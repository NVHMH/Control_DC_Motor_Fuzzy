
Control_MotorDC_Fuzzy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d6c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08005e7c  08005e7c  00015e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006158  08006158  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006158  08006158  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006158  08006158  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006158  08006158  00016158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800615c  0800615c  0001615c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  20000010  08006170  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08006170  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f27b  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020a8  00000000  00000000  0002f2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff0  00000000  00000000  00031360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f30  00000000  00000000  00032350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001814e  00000000  00000000  00033280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000afbe  00000000  00000000  0004b3ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008af89  00000000  00000000  0005638c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e1315  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046c4  00000000  00000000  000e1390  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e64 	.word	0x08005e64

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005e64 	.word	0x08005e64

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b58:	f1a2 0201 	sub.w	r2, r2, #1
 8000b5c:	d1ed      	bne.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__gesf2>:
 8000f58:	f04f 3cff 	mov.w	ip, #4294967295
 8000f5c:	e006      	b.n	8000f6c <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__lesf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	e002      	b.n	8000f6c <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__cmpsf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	bf18      	it	ne
 8000f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f82:	d011      	beq.n	8000fa8 <__cmpsf2+0x40>
 8000f84:	b001      	add	sp, #4
 8000f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f8a:	bf18      	it	ne
 8000f8c:	ea90 0f01 	teqne	r0, r1
 8000f90:	bf58      	it	pl
 8000f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f96:	bf88      	it	hi
 8000f98:	17c8      	asrhi	r0, r1, #31
 8000f9a:	bf38      	it	cc
 8000f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa0:	bf18      	it	ne
 8000fa2:	f040 0001 	orrne.w	r0, r0, #1
 8000fa6:	4770      	bx	lr
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	d102      	bne.n	8000fb4 <__cmpsf2+0x4c>
 8000fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fb2:	d105      	bne.n	8000fc0 <__cmpsf2+0x58>
 8000fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb8:	d1e4      	bne.n	8000f84 <__cmpsf2+0x1c>
 8000fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fbe:	d0e1      	beq.n	8000f84 <__cmpsf2+0x1c>
 8000fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_cfrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4661      	mov	r1, ip
 8000fce:	e7ff      	b.n	8000fd0 <__aeabi_cfcmpeq>

08000fd0 <__aeabi_cfcmpeq>:
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fd2:	f7ff ffc9 	bl	8000f68 <__cmpsf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	bf48      	it	mi
 8000fda:	f110 0f00 	cmnmi.w	r0, #0
 8000fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe0 <__aeabi_fcmpeq>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff fff4 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000fe8:	bf0c      	ite	eq
 8000fea:	2001      	moveq	r0, #1
 8000fec:	2000      	movne	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmplt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffea 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmple>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffe0 	bl	8000fd0 <__aeabi_cfcmpeq>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpge>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffd2 	bl	8000fc8 <__aeabi_cfrcmple>
 8001024:	bf94      	ite	ls
 8001026:	2001      	movls	r0, #1
 8001028:	2000      	movhi	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpgt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffc8 	bl	8000fc8 <__aeabi_cfrcmple>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_f2uiz>:
 8001044:	0042      	lsls	r2, r0, #1
 8001046:	d20e      	bcs.n	8001066 <__aeabi_f2uiz+0x22>
 8001048:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800104c:	d30b      	bcc.n	8001066 <__aeabi_f2uiz+0x22>
 800104e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001052:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001056:	d409      	bmi.n	800106c <__aeabi_f2uiz+0x28>
 8001058:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800105c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001060:	fa23 f002 	lsr.w	r0, r3, r2
 8001064:	4770      	bx	lr
 8001066:	f04f 0000 	mov.w	r0, #0
 800106a:	4770      	bx	lr
 800106c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001070:	d101      	bne.n	8001076 <__aeabi_f2uiz+0x32>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	d102      	bne.n	800107c <__aeabi_f2uiz+0x38>
 8001076:	f04f 30ff 	mov.w	r0, #4294967295
 800107a:	4770      	bx	lr
 800107c:	f04f 0000 	mov.w	r0, #0
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <fuzzy_init>:
static const float u_ZE_p[] = { 0.0000f };
static const float u_PS_p[] = { 0.3300f };
static const float u_PM_p[] = { 0.6600f };
static const float u_PB_p[] = { 1.0000f };

void fuzzy_init( void ){
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af0a      	add	r7, sp, #40	; 0x28
    /* Set inputs */
    qFIS_InputSetup( fuzzy_inputs, e, -1.0000f, 1.0000f );
 800108a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800108e:	4a8d      	ldr	r2, [pc, #564]	; (80012c4 <fuzzy_init+0x240>)
 8001090:	2100      	movs	r1, #0
 8001092:	488d      	ldr	r0, [pc, #564]	; (80012c8 <fuzzy_init+0x244>)
 8001094:	f001 f8c8 	bl	8002228 <qFIS_InputSetup>
    qFIS_InputSetup( fuzzy_inputs, edot, -1.0000f, 1.0000f );
 8001098:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800109c:	4a89      	ldr	r2, [pc, #548]	; (80012c4 <fuzzy_init+0x240>)
 800109e:	2101      	movs	r1, #1
 80010a0:	4889      	ldr	r0, [pc, #548]	; (80012c8 <fuzzy_init+0x244>)
 80010a2:	f001 f8c1 	bl	8002228 <qFIS_InputSetup>
    /* Set outputs */
    qFIS_OutputSetup( fuzzy_outputs, u, 0.0000f, 1.0000f );
 80010a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	4886      	ldr	r0, [pc, #536]	; (80012cc <fuzzy_init+0x248>)
 80010b2:	f001 f8e4 	bl	800227e <qFIS_OutputSetup>
    /* Set membership functions for the inputs */
    qFIS_SetMF( MFin, e, e_NB, trimf, NULL, e_NB_p, 1.0f );
 80010b6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	4b84      	ldr	r3, [pc, #528]	; (80012d0 <fuzzy_init+0x24c>)
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	2300      	movs	r3, #0
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	4882      	ldr	r0, [pc, #520]	; (80012d4 <fuzzy_init+0x250>)
 80010cc:	f001 f980 	bl	80023d0 <qFIS_SetMF>
    qFIS_SetMF( MFin, e, e_NS, trimf, NULL, e_NS_p, 1.0f );
 80010d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010d4:	9302      	str	r3, [sp, #8]
 80010d6:	4b80      	ldr	r3, [pc, #512]	; (80012d8 <fuzzy_init+0x254>)
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	2300      	movs	r3, #0
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	2201      	movs	r2, #1
 80010e2:	2100      	movs	r1, #0
 80010e4:	487b      	ldr	r0, [pc, #492]	; (80012d4 <fuzzy_init+0x250>)
 80010e6:	f001 f973 	bl	80023d0 <qFIS_SetMF>
    qFIS_SetMF( MFin, e, e_ZE, trimf, NULL, e_ZE_p, 1.0f );
 80010ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	4b7a      	ldr	r3, [pc, #488]	; (80012dc <fuzzy_init+0x258>)
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	2300      	movs	r3, #0
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	2202      	movs	r2, #2
 80010fc:	2100      	movs	r1, #0
 80010fe:	4875      	ldr	r0, [pc, #468]	; (80012d4 <fuzzy_init+0x250>)
 8001100:	f001 f966 	bl	80023d0 <qFIS_SetMF>
    qFIS_SetMF( MFin, e, e_PS, trimf, NULL, e_PS_p, 1.0f );
 8001104:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001108:	9302      	str	r3, [sp, #8]
 800110a:	4b75      	ldr	r3, [pc, #468]	; (80012e0 <fuzzy_init+0x25c>)
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	2300      	movs	r3, #0
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2301      	movs	r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	2100      	movs	r1, #0
 8001118:	486e      	ldr	r0, [pc, #440]	; (80012d4 <fuzzy_init+0x250>)
 800111a:	f001 f959 	bl	80023d0 <qFIS_SetMF>
    qFIS_SetMF( MFin, e, e_PB, trimf, NULL, e_PB_p, 1.0f );
 800111e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	4b6f      	ldr	r3, [pc, #444]	; (80012e4 <fuzzy_init+0x260>)
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	2300      	movs	r3, #0
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	2204      	movs	r2, #4
 8001130:	2100      	movs	r1, #0
 8001132:	4868      	ldr	r0, [pc, #416]	; (80012d4 <fuzzy_init+0x250>)
 8001134:	f001 f94c 	bl	80023d0 <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_NB, trimf, NULL, edot_NB_p, 1.0f );
 8001138:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800113c:	9302      	str	r3, [sp, #8]
 800113e:	4b6a      	ldr	r3, [pc, #424]	; (80012e8 <fuzzy_init+0x264>)
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	2300      	movs	r3, #0
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2301      	movs	r3, #1
 8001148:	2205      	movs	r2, #5
 800114a:	2101      	movs	r1, #1
 800114c:	4861      	ldr	r0, [pc, #388]	; (80012d4 <fuzzy_init+0x250>)
 800114e:	f001 f93f 	bl	80023d0 <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_NS, trimf, NULL, edot_NS_p, 1.0f );
 8001152:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	4b64      	ldr	r3, [pc, #400]	; (80012ec <fuzzy_init+0x268>)
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	2300      	movs	r3, #0
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2301      	movs	r3, #1
 8001162:	2206      	movs	r2, #6
 8001164:	2101      	movs	r1, #1
 8001166:	485b      	ldr	r0, [pc, #364]	; (80012d4 <fuzzy_init+0x250>)
 8001168:	f001 f932 	bl	80023d0 <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_ZE, trimf, NULL, edot_ZE_p, 1.0f );
 800116c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001170:	9302      	str	r3, [sp, #8]
 8001172:	4b5f      	ldr	r3, [pc, #380]	; (80012f0 <fuzzy_init+0x26c>)
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	2300      	movs	r3, #0
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	2207      	movs	r2, #7
 800117e:	2101      	movs	r1, #1
 8001180:	4854      	ldr	r0, [pc, #336]	; (80012d4 <fuzzy_init+0x250>)
 8001182:	f001 f925 	bl	80023d0 <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_PS, trimf, NULL, edot_PS_p, 1.0f );
 8001186:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	4b59      	ldr	r3, [pc, #356]	; (80012f4 <fuzzy_init+0x270>)
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	2300      	movs	r3, #0
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	2208      	movs	r2, #8
 8001198:	2101      	movs	r1, #1
 800119a:	484e      	ldr	r0, [pc, #312]	; (80012d4 <fuzzy_init+0x250>)
 800119c:	f001 f918 	bl	80023d0 <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_PB, trimf, NULL, edot_PB_p, 1.0f );
 80011a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	4b54      	ldr	r3, [pc, #336]	; (80012f8 <fuzzy_init+0x274>)
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	2300      	movs	r3, #0
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2301      	movs	r3, #1
 80011b0:	2209      	movs	r2, #9
 80011b2:	2101      	movs	r1, #1
 80011b4:	4847      	ldr	r0, [pc, #284]	; (80012d4 <fuzzy_init+0x250>)
 80011b6:	f001 f90b 	bl	80023d0 <qFIS_SetMF>
    /* Set membership functions for the outputs */
    qFIS_SetMF( MFout, u, u_NB, constantmf, NULL, u_NB_p, 1.0f );
 80011ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011be:	9302      	str	r3, [sp, #8]
 80011c0:	4b4e      	ldr	r3, [pc, #312]	; (80012fc <fuzzy_init+0x278>)
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	2300      	movs	r3, #0
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2313      	movs	r3, #19
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	484c      	ldr	r0, [pc, #304]	; (8001300 <fuzzy_init+0x27c>)
 80011d0:	f001 f8fe 	bl	80023d0 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NM, constantmf, NULL, u_NM_p, 1.0f );
 80011d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011d8:	9302      	str	r3, [sp, #8]
 80011da:	4b4a      	ldr	r3, [pc, #296]	; (8001304 <fuzzy_init+0x280>)
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	2300      	movs	r3, #0
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2313      	movs	r3, #19
 80011e4:	2201      	movs	r2, #1
 80011e6:	2100      	movs	r1, #0
 80011e8:	4845      	ldr	r0, [pc, #276]	; (8001300 <fuzzy_init+0x27c>)
 80011ea:	f001 f8f1 	bl	80023d0 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NS, constantmf, NULL, u_NS_p, 1.0f );
 80011ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	4b44      	ldr	r3, [pc, #272]	; (8001308 <fuzzy_init+0x284>)
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	2300      	movs	r3, #0
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2313      	movs	r3, #19
 80011fe:	2202      	movs	r2, #2
 8001200:	2100      	movs	r1, #0
 8001202:	483f      	ldr	r0, [pc, #252]	; (8001300 <fuzzy_init+0x27c>)
 8001204:	f001 f8e4 	bl	80023d0 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_ZE, constantmf, NULL, u_ZE_p, 1.0f );
 8001208:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800120c:	9302      	str	r3, [sp, #8]
 800120e:	4b3f      	ldr	r3, [pc, #252]	; (800130c <fuzzy_init+0x288>)
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	2300      	movs	r3, #0
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2313      	movs	r3, #19
 8001218:	2203      	movs	r2, #3
 800121a:	2100      	movs	r1, #0
 800121c:	4838      	ldr	r0, [pc, #224]	; (8001300 <fuzzy_init+0x27c>)
 800121e:	f001 f8d7 	bl	80023d0 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PS, constantmf, NULL, u_PS_p, 1.0f );
 8001222:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001226:	9302      	str	r3, [sp, #8]
 8001228:	4b39      	ldr	r3, [pc, #228]	; (8001310 <fuzzy_init+0x28c>)
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	2300      	movs	r3, #0
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2313      	movs	r3, #19
 8001232:	2204      	movs	r2, #4
 8001234:	2100      	movs	r1, #0
 8001236:	4832      	ldr	r0, [pc, #200]	; (8001300 <fuzzy_init+0x27c>)
 8001238:	f001 f8ca 	bl	80023d0 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PM, constantmf, NULL, u_PM_p, 1.0f );
 800123c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	4b34      	ldr	r3, [pc, #208]	; (8001314 <fuzzy_init+0x290>)
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	2300      	movs	r3, #0
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2313      	movs	r3, #19
 800124c:	2205      	movs	r2, #5
 800124e:	2100      	movs	r1, #0
 8001250:	482b      	ldr	r0, [pc, #172]	; (8001300 <fuzzy_init+0x27c>)
 8001252:	f001 f8bd 	bl	80023d0 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PB, constantmf, NULL, u_PB_p, 1.0f );
 8001256:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	4b2e      	ldr	r3, [pc, #184]	; (8001318 <fuzzy_init+0x294>)
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2300      	movs	r3, #0
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2313      	movs	r3, #19
 8001266:	2206      	movs	r2, #6
 8001268:	2100      	movs	r1, #0
 800126a:	4825      	ldr	r0, [pc, #148]	; (8001300 <fuzzy_init+0x27c>)
 800126c:	f001 f8b0 	bl	80023d0 <qFIS_SetMF>

    /* Configure the Inference System */
    qFIS_Setup( &fuzzy, Sugeno,
 8001270:	2319      	movs	r3, #25
 8001272:	9308      	str	r3, [sp, #32]
 8001274:	4b29      	ldr	r3, [pc, #164]	; (800131c <fuzzy_init+0x298>)
 8001276:	9307      	str	r3, [sp, #28]
 8001278:	4b29      	ldr	r3, [pc, #164]	; (8001320 <fuzzy_init+0x29c>)
 800127a:	9306      	str	r3, [sp, #24]
 800127c:	238c      	movs	r3, #140	; 0x8c
 800127e:	9305      	str	r3, [sp, #20]
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <fuzzy_init+0x27c>)
 8001282:	9304      	str	r3, [sp, #16]
 8001284:	23c8      	movs	r3, #200	; 0xc8
 8001286:	9303      	str	r3, [sp, #12]
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <fuzzy_init+0x250>)
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2334      	movs	r3, #52	; 0x34
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <fuzzy_init+0x248>)
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2318      	movs	r3, #24
 8001296:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <fuzzy_init+0x244>)
 8001298:	2101      	movs	r1, #1
 800129a:	4822      	ldr	r0, [pc, #136]	; (8001324 <fuzzy_init+0x2a0>)
 800129c:	f000 feec 	bl	8002078 <qFIS_Setup>
    		fuzzy_inputs, sizeof(fuzzy_inputs),
			fuzzy_outputs, sizeof(fuzzy_outputs),
                MFin, sizeof(MFin), MFout, sizeof(MFout),
                rules, rStrength, 25u );
    qFIS_SetParameter( &fuzzy, qFIS_AND, qFIS_PROD );
 80012a0:	2201      	movs	r2, #1
 80012a2:	2102      	movs	r1, #2
 80012a4:	481f      	ldr	r0, [pc, #124]	; (8001324 <fuzzy_init+0x2a0>)
 80012a6:	f000 fe75 	bl	8001f94 <qFIS_SetParameter>
    qFIS_SetParameter( &fuzzy, qFIS_Implication, qFIS_PROD );
 80012aa:	2201      	movs	r2, #1
 80012ac:	2100      	movs	r1, #0
 80012ae:	481d      	ldr	r0, [pc, #116]	; (8001324 <fuzzy_init+0x2a0>)
 80012b0:	f000 fe70 	bl	8001f94 <qFIS_SetParameter>
    qFIS_SetParameter( &fuzzy, qFIS_Aggregation, qFIS_SUM );
 80012b4:	2204      	movs	r2, #4
 80012b6:	2101      	movs	r1, #1
 80012b8:	481a      	ldr	r0, [pc, #104]	; (8001324 <fuzzy_init+0x2a0>)
 80012ba:	f000 fe6b 	bl	8001f94 <qFIS_SetParameter>
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	bf800000 	.word	0xbf800000
 80012c8:	2000008c 	.word	0x2000008c
 80012cc:	200000a4 	.word	0x200000a4
 80012d0:	08006024 	.word	0x08006024
 80012d4:	200000d8 	.word	0x200000d8
 80012d8:	08006030 	.word	0x08006030
 80012dc:	0800603c 	.word	0x0800603c
 80012e0:	08006048 	.word	0x08006048
 80012e4:	08006054 	.word	0x08006054
 80012e8:	08006060 	.word	0x08006060
 80012ec:	0800606c 	.word	0x0800606c
 80012f0:	08006078 	.word	0x08006078
 80012f4:	08006084 	.word	0x08006084
 80012f8:	08006090 	.word	0x08006090
 80012fc:	0800609c 	.word	0x0800609c
 8001300:	200001a0 	.word	0x200001a0
 8001304:	080060a0 	.word	0x080060a0
 8001308:	080060a4 	.word	0x080060a4
 800130c:	080060a8 	.word	0x080060a8
 8001310:	080060ac 	.word	0x080060ac
 8001314:	080060b0 	.word	0x080060b0
 8001318:	080060b4 	.word	0x080060b4
 800131c:	2000022c 	.word	0x2000022c
 8001320:	08005e90 	.word	0x08005e90
 8001324:	2000002c 	.word	0x2000002c

08001328 <fuzzy_run>:

void fuzzy_run( float *inputs, float *outputs ) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
    /* Set the crips inputs */
    qFIS_SetInput( fuzzy_inputs, e, inputs[ e ] );
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	2100      	movs	r1, #0
 800133a:	4811      	ldr	r0, [pc, #68]	; (8001380 <fuzzy_run+0x58>)
 800133c:	f001 f80c 	bl	8002358 <qFIS_SetInput>
    qFIS_SetInput( fuzzy_inputs, edot, inputs[ edot ] );
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3304      	adds	r3, #4
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	2101      	movs	r1, #1
 800134a:	480d      	ldr	r0, [pc, #52]	; (8001380 <fuzzy_run+0x58>)
 800134c:	f001 f804 	bl	8002358 <qFIS_SetInput>

    qFIS_Fuzzify( &fuzzy );
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <fuzzy_run+0x5c>)
 8001352:	f001 f91a 	bl	800258a <qFIS_Fuzzify>
    if ( qFIS_Inference( &fuzzy ) > 0 ) {
 8001356:	480b      	ldr	r0, [pc, #44]	; (8001384 <fuzzy_run+0x5c>)
 8001358:	f001 fd4a 	bl	8002df0 <qFIS_Inference>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	dd02      	ble.n	8001368 <fuzzy_run+0x40>
        qFIS_DeFuzzify( &fuzzy );
 8001362:	4808      	ldr	r0, [pc, #32]	; (8001384 <fuzzy_run+0x5c>)
 8001364:	f001 fbff 	bl	8002b66 <qFIS_DeFuzzify>
    else {
        /* Error! */
    }

    /* Get the crips outputs */
    outputs[ u ] = qFIS_GetOutput( fuzzy_outputs, u );
 8001368:	2100      	movs	r1, #0
 800136a:	4807      	ldr	r0, [pc, #28]	; (8001388 <fuzzy_run+0x60>)
 800136c:	f001 f814 	bl	8002398 <qFIS_GetOutput>
 8001370:	4602      	mov	r2, r0
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	601a      	str	r2, [r3, #0]
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000008c 	.word	0x2000008c
 8001384:	2000002c 	.word	0x2000002c
 8001388:	200000a4 	.word	0x200000a4

0800138c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	Init_parameter(1000, &t_parameter_controller);
 8001390:	4912      	ldr	r1, [pc, #72]	; (80013dc <main+0x50>)
 8001392:	4813      	ldr	r0, [pc, #76]	; (80013e0 <main+0x54>)
 8001394:	f000 fbae 	bl	8001af4 <Init_parameter>
	fuzzy_init();
 8001398:	f7ff fe74 	bl	8001084 <fuzzy_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139c:	f002 ffa2 	bl	80042e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a0:	f000 f824 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a4:	f000 fa0e 	bl	80017c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80013a8:	f000 f8e6 	bl	8001578 <MX_TIM2_Init>
  MX_TIM1_Init();
 80013ac:	f000 f860 	bl	8001470 <MX_TIM1_Init>
  MX_TIM3_Init();
 80013b0:	f000 f936 	bl	8001620 <MX_TIM3_Init>
  MX_TIM4_Init();
 80013b4:	f000 f98e 	bl	80016d4 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80013b8:	f000 f9da 	bl	8001770 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (u8_flag_10ms)
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <main+0x58>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0fb      	beq.n	80013bc <main+0x30>
	  	  {
	  		u8_flag_10ms = 0;
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <main+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
	  		Controller (Read_enc (&(t_parameter_controller.i_pre_cnt)), &t_parameter_controller);
 80013ca:	4807      	ldr	r0, [pc, #28]	; (80013e8 <main+0x5c>)
 80013cc:	f000 fabc 	bl	8001948 <Read_enc>
 80013d0:	4603      	mov	r3, r0
 80013d2:	4902      	ldr	r1, [pc, #8]	; (80013dc <main+0x50>)
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fafb 	bl	80019d0 <Controller>
	  if (u8_flag_10ms)
 80013da:	e7ef      	b.n	80013bc <main+0x30>
 80013dc:	20000370 	.word	0x20000370
 80013e0:	447a0000 	.word	0x447a0000
 80013e4:	20000290 	.word	0x20000290
 80013e8:	20000394 	.word	0x20000394

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b090      	sub	sp, #64	; 0x40
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	2228      	movs	r2, #40	; 0x28
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f004 fd2a 	bl	8005e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800140e:	2302      	movs	r3, #2
 8001410:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001412:	2301      	movs	r3, #1
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001416:	2310      	movs	r3, #16
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141a:	2302      	movs	r3, #2
 800141c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800141e:	2300      	movs	r3, #0
 8001420:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001422:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001426:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001428:	f107 0318 	add.w	r3, r7, #24
 800142c:	4618      	mov	r0, r3
 800142e:	f003 fa11 	bl	8004854 <HAL_RCC_OscConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001438:	f000 fa18 	bl	800186c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143c:	230f      	movs	r3, #15
 800143e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001440:	2302      	movs	r3, #2
 8001442:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800144c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2102      	movs	r1, #2
 8001456:	4618      	mov	r0, r3
 8001458:	f003 fc7c 	bl	8004d54 <HAL_RCC_ClockConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001462:	f000 fa03 	bl	800186c <Error_Handler>
  }
}
 8001466:	bf00      	nop
 8001468:	3740      	adds	r7, #64	; 0x40
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b092      	sub	sp, #72	; 0x48
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001476:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
 8001490:	615a      	str	r2, [r3, #20]
 8001492:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2220      	movs	r2, #32
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f004 fcda 	bl	8005e54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014a0:	4b33      	ldr	r3, [pc, #204]	; (8001570 <MX_TIM1_Init+0x100>)
 80014a2:	4a34      	ldr	r2, [pc, #208]	; (8001574 <MX_TIM1_Init+0x104>)
 80014a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80014a6:	4b32      	ldr	r3, [pc, #200]	; (8001570 <MX_TIM1_Init+0x100>)
 80014a8:	220f      	movs	r2, #15
 80014aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ac:	4b30      	ldr	r3, [pc, #192]	; (8001570 <MX_TIM1_Init+0x100>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 399;
 80014b2:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <MX_TIM1_Init+0x100>)
 80014b4:	f240 128f 	movw	r2, #399	; 0x18f
 80014b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <MX_TIM1_Init+0x100>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014c0:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <MX_TIM1_Init+0x100>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <MX_TIM1_Init+0x100>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014cc:	4828      	ldr	r0, [pc, #160]	; (8001570 <MX_TIM1_Init+0x100>)
 80014ce:	f003 fe2c 	bl	800512a <HAL_TIM_PWM_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80014d8:	f000 f9c8 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014e8:	4619      	mov	r1, r3
 80014ea:	4821      	ldr	r0, [pc, #132]	; (8001570 <MX_TIM1_Init+0x100>)
 80014ec:	f004 fb04 	bl	8005af8 <HAL_TIMEx_MasterConfigSynchronization>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80014f6:	f000 f9b9 	bl	800186c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014fa:	2360      	movs	r3, #96	; 0x60
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001502:	2300      	movs	r3, #0
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001506:	2300      	movs	r3, #0
 8001508:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151a:	2200      	movs	r2, #0
 800151c:	4619      	mov	r1, r3
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <MX_TIM1_Init+0x100>)
 8001520:	f003 fef4 	bl	800530c <HAL_TIM_PWM_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800152a:	f000 f99f 	bl	800186c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001546:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4807      	ldr	r0, [pc, #28]	; (8001570 <MX_TIM1_Init+0x100>)
 8001552:	f004 fb2f 	bl	8005bb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800155c:	f000 f986 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001560:	4803      	ldr	r0, [pc, #12]	; (8001570 <MX_TIM1_Init+0x100>)
 8001562:	f002 fdb5 	bl	80040d0 <HAL_TIM_MspPostInit>

}
 8001566:	bf00      	nop
 8001568:	3748      	adds	r7, #72	; 0x48
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000398 	.word	0x20000398
 8001574:	40012c00 	.word	0x40012c00

08001578 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	2224      	movs	r2, #36	; 0x24
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f004 fc64 	bl	8005e54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <MX_TIM2_Init+0xa4>)
 8001596:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800159a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <MX_TIM2_Init+0xa4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <MX_TIM2_Init+0xa4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <MX_TIM2_Init+0xa4>)
 80015aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_TIM2_Init+0xa4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <MX_TIM2_Init+0xa4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015bc:	2301      	movs	r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015c4:	2301      	movs	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015d4:	2301      	movs	r3, #1
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	4619      	mov	r1, r3
 80015e6:	480d      	ldr	r0, [pc, #52]	; (800161c <MX_TIM2_Init+0xa4>)
 80015e8:	f003 fdee 	bl	80051c8 <HAL_TIM_Encoder_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80015f2:	f000 f93b 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	4619      	mov	r1, r3
 8001602:	4806      	ldr	r0, [pc, #24]	; (800161c <MX_TIM2_Init+0xa4>)
 8001604:	f004 fa78 	bl	8005af8 <HAL_TIMEx_MasterConfigSynchronization>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800160e:	f000 f92d 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	3730      	adds	r7, #48	; 0x30
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200003e0 	.word	0x200003e0

08001620 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001626:	f107 0320 	add.w	r3, r7, #32
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	615a      	str	r2, [r3, #20]
 8001640:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001642:	4b22      	ldr	r3, [pc, #136]	; (80016cc <MX_TIM3_Init+0xac>)
 8001644:	4a22      	ldr	r2, [pc, #136]	; (80016d0 <MX_TIM3_Init+0xb0>)
 8001646:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001648:	4b20      	ldr	r3, [pc, #128]	; (80016cc <MX_TIM3_Init+0xac>)
 800164a:	220f      	movs	r2, #15
 800164c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164e:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <MX_TIM3_Init+0xac>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 399;
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <MX_TIM3_Init+0xac>)
 8001656:	f240 128f 	movw	r2, #399	; 0x18f
 800165a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <MX_TIM3_Init+0xac>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_TIM3_Init+0xac>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001668:	4818      	ldr	r0, [pc, #96]	; (80016cc <MX_TIM3_Init+0xac>)
 800166a:	f003 fd5e 	bl	800512a <HAL_TIM_PWM_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001674:	f000 f8fa 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001680:	f107 0320 	add.w	r3, r7, #32
 8001684:	4619      	mov	r1, r3
 8001686:	4811      	ldr	r0, [pc, #68]	; (80016cc <MX_TIM3_Init+0xac>)
 8001688:	f004 fa36 	bl	8005af8 <HAL_TIMEx_MasterConfigSynchronization>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001692:	f000 f8eb 	bl	800186c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001696:	2360      	movs	r3, #96	; 0x60
 8001698:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2200      	movs	r2, #0
 80016aa:	4619      	mov	r1, r3
 80016ac:	4807      	ldr	r0, [pc, #28]	; (80016cc <MX_TIM3_Init+0xac>)
 80016ae:	f003 fe2d 	bl	800530c <HAL_TIM_PWM_ConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80016b8:	f000 f8d8 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016bc:	4803      	ldr	r0, [pc, #12]	; (80016cc <MX_TIM3_Init+0xac>)
 80016be:	f002 fd07 	bl	80040d0 <HAL_TIM_MspPostInit>

}
 80016c2:	bf00      	nop
 80016c4:	3728      	adds	r7, #40	; 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000328 	.word	0x20000328
 80016d0:	40000400 	.word	0x40000400

080016d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e8:	463b      	mov	r3, r7
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <MX_TIM4_Init+0x94>)
 80016f2:	4a1e      	ldr	r2, [pc, #120]	; (800176c <MX_TIM4_Init+0x98>)
 80016f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 319;
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <MX_TIM4_Init+0x94>)
 80016f8:	f240 123f 	movw	r2, #319	; 0x13f
 80016fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <MX_TIM4_Init+0x94>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <MX_TIM4_Init+0x94>)
 8001706:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800170a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <MX_TIM4_Init+0x94>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <MX_TIM4_Init+0x94>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001718:	4813      	ldr	r0, [pc, #76]	; (8001768 <MX_TIM4_Init+0x94>)
 800171a:	f003 fcb7 	bl	800508c <HAL_TIM_Base_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001724:	f000 f8a2 	bl	800186c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	4619      	mov	r1, r3
 8001734:	480c      	ldr	r0, [pc, #48]	; (8001768 <MX_TIM4_Init+0x94>)
 8001736:	f003 fea7 	bl	8005488 <HAL_TIM_ConfigClockSource>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001740:	f000 f894 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800174c:	463b      	mov	r3, r7
 800174e:	4619      	mov	r1, r3
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_TIM4_Init+0x94>)
 8001752:	f004 f9d1 	bl	8005af8 <HAL_TIMEx_MasterConfigSynchronization>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800175c:	f000 f886 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	2000029c 	.word	0x2000029c
 800176c:	40000800 	.word	0x40000800

08001770 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <MX_USART3_UART_Init+0x50>)
 8001778:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 800177c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001780:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001796:	220c      	movs	r2, #12
 8001798:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 80017a8:	f004 fa55 	bl	8005c56 <HAL_UART_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017b2:	f000 f85b 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200002e4 	.word	0x200002e4
 80017c0:	40004800 	.word	0x40004800

080017c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d8:	4b21      	ldr	r3, [pc, #132]	; (8001860 <MX_GPIO_Init+0x9c>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a20      	ldr	r2, [pc, #128]	; (8001860 <MX_GPIO_Init+0x9c>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <MX_GPIO_Init+0x9c>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <MX_GPIO_Init+0x9c>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a1a      	ldr	r2, [pc, #104]	; (8001860 <MX_GPIO_Init+0x9c>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <MX_GPIO_Init+0x9c>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800180e:	4815      	ldr	r0, [pc, #84]	; (8001864 <MX_GPIO_Init+0xa0>)
 8001810:	f003 f808 	bl	8004824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	2120      	movs	r1, #32
 8001818:	4813      	ldr	r0, [pc, #76]	; (8001868 <MX_GPIO_Init+0xa4>)
 800181a:	f003 f803 	bl	8004824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800181e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001822:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2302      	movs	r3, #2
 800182e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 0308 	add.w	r3, r7, #8
 8001834:	4619      	mov	r1, r3
 8001836:	480b      	ldr	r0, [pc, #44]	; (8001864 <MX_GPIO_Init+0xa0>)
 8001838:	f002 fe9a 	bl	8004570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800183c:	2320      	movs	r3, #32
 800183e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2302      	movs	r3, #2
 800184a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 0308 	add.w	r3, r7, #8
 8001850:	4619      	mov	r1, r3
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_GPIO_Init+0xa4>)
 8001854:	f002 fe8c 	bl	8004570 <HAL_GPIO_Init>

}
 8001858:	bf00      	nop
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000
 8001864:	40010800 	.word	0x40010800
 8001868:	40010c00 	.word	0x40010c00

0800186c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001870:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001872:	e7fe      	b.n	8001872 <Error_Handler+0x6>

08001874 <Set_duty>:

#include "motor.h"



static void Set_duty(float duty, TIM_HandleTypeDef *htim, int channel){
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
	if (channel == 1){
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d111      	bne.n	80018aa <Set_duty+0x36>
		htim->Instance->CCR1 =  (duty*MAX_CNT) + MIN_CNT;
 8001886:	4915      	ldr	r1, [pc, #84]	; (80018dc <Set_duty+0x68>)
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f7ff fa15 	bl	8000cb8 <__aeabi_fmul>
 800188e:	4603      	mov	r3, r0
 8001890:	4913      	ldr	r1, [pc, #76]	; (80018e0 <Set_duty+0x6c>)
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff f908 	bl	8000aa8 <__addsf3>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	681c      	ldr	r4, [r3, #0]
 80018a0:	4610      	mov	r0, r2
 80018a2:	f7ff fbcf 	bl	8001044 <__aeabi_f2uiz>
 80018a6:	4603      	mov	r3, r0
 80018a8:	6363      	str	r3, [r4, #52]	; 0x34
	}
	if (channel == 2){
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d111      	bne.n	80018d4 <Set_duty+0x60>
		htim->Instance->CCR2 =  (duty*MAX_CNT) + MIN_CNT;
 80018b0:	490a      	ldr	r1, [pc, #40]	; (80018dc <Set_duty+0x68>)
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f7ff fa00 	bl	8000cb8 <__aeabi_fmul>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4909      	ldr	r1, [pc, #36]	; (80018e0 <Set_duty+0x6c>)
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff f8f3 	bl	8000aa8 <__addsf3>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	681c      	ldr	r4, [r3, #0]
 80018ca:	4610      	mov	r0, r2
 80018cc:	f7ff fbba 	bl	8001044 <__aeabi_f2uiz>
 80018d0:	4603      	mov	r3, r0
 80018d2:	63a3      	str	r3, [r4, #56]	; 0x38
	}
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd90      	pop	{r4, r7, pc}
 80018dc:	43960000 	.word	0x43960000
 80018e0:	41a00000 	.word	0x41a00000

080018e4 <Forward>:
void Stop_motor(){
	Set_duty(0, &htim3, 1);
	Set_duty(0, &htim1, 1);
}

void Forward (float duty){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	Set_duty(0, &htim3, 1);
 80018ec:	2201      	movs	r2, #1
 80018ee:	4907      	ldr	r1, [pc, #28]	; (800190c <Forward+0x28>)
 80018f0:	f04f 0000 	mov.w	r0, #0
 80018f4:	f7ff ffbe 	bl	8001874 <Set_duty>
	Set_duty(duty, &htim1, 1);
 80018f8:	2201      	movs	r2, #1
 80018fa:	4905      	ldr	r1, [pc, #20]	; (8001910 <Forward+0x2c>)
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ffb9 	bl	8001874 <Set_duty>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000328 	.word	0x20000328
 8001910:	20000398 	.word	0x20000398

08001914 <Reverse>:

void Reverse (float duty){
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	Set_duty(duty, &htim3, 1);
 800191c:	2201      	movs	r2, #1
 800191e:	4907      	ldr	r1, [pc, #28]	; (800193c <Reverse+0x28>)
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ffa7 	bl	8001874 <Set_duty>
	Set_duty(0, &htim1, 1);
 8001926:	2201      	movs	r2, #1
 8001928:	4905      	ldr	r1, [pc, #20]	; (8001940 <Reverse+0x2c>)
 800192a:	f04f 0000 	mov.w	r0, #0
 800192e:	f7ff ffa1 	bl	8001874 <Set_duty>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000328 	.word	0x20000328
 8001940:	20000398 	.word	0x20000398
 8001944:	00000000 	.word	0x00000000

08001948 <Read_enc>:

float Read_enc (int *pre_cnt){
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	int delta_cnt;
	delta_cnt = (int16_t)(htim2.Instance->CNT)-*pre_cnt;
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <Read_enc+0x78>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	b21b      	sxth	r3, r3
 8001958:	461a      	mov	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	60fb      	str	r3, [r7, #12]
	*pre_cnt = htim2.Instance->CNT;
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <Read_enc+0x78>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	461a      	mov	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	601a      	str	r2, [r3, #0]
	return  delta_cnt*60.0f/TIME_EXAMPLE/PPR;
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f7ff f94e 	bl	8000c10 <__aeabi_i2f>
 8001974:	4603      	mov	r3, r0
 8001976:	4913      	ldr	r1, [pc, #76]	; (80019c4 <Read_enc+0x7c>)
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff f99d 	bl	8000cb8 <__aeabi_fmul>
 800197e:	4603      	mov	r3, r0
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fd49 	bl	8000418 <__aeabi_f2d>
 8001986:	a30c      	add	r3, pc, #48	; (adr r3, 80019b8 <Read_enc+0x70>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	f7fe fec6 	bl	800071c <__aeabi_ddiv>
 8001990:	4603      	mov	r3, r0
 8001992:	460c      	mov	r4, r1
 8001994:	4618      	mov	r0, r3
 8001996:	4621      	mov	r1, r4
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <Read_enc+0x80>)
 800199e:	f7fe febd 	bl	800071c <__aeabi_ddiv>
 80019a2:	4603      	mov	r3, r0
 80019a4:	460c      	mov	r4, r1
 80019a6:	4618      	mov	r0, r3
 80019a8:	4621      	mov	r1, r4
 80019aa:	f7ff f827 	bl	80009fc <__aeabi_d2f>
 80019ae:	4603      	mov	r3, r0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd90      	pop	{r4, r7, pc}
 80019b8:	47ae147b 	.word	0x47ae147b
 80019bc:	3f847ae1 	.word	0x3f847ae1
 80019c0:	200003e0 	.word	0x200003e0
 80019c4:	42700000 	.word	0x42700000
 80019c8:	4094a000 	.word	0x4094a000
 80019cc:	00000000 	.word	0x00000000

080019d0 <Controller>:

void Controller (float new_speed, Parameter_controller_t *parameter){
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]

	float ek, ek_dot;
	ek =parameter->f_setpoint- new_speed;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff f85f 	bl	8000aa4 <__aeabi_fsub>
 80019e6:	4603      	mov	r3, r0
 80019e8:	60fb      	str	r3, [r7, #12]
	ek_dot = (ek-2*parameter->f_ek_1+parameter->f_ek_2)/TIME_EXAMPLE;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	4619      	mov	r1, r3
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff f859 	bl	8000aa8 <__addsf3>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4619      	mov	r1, r3
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7ff f852 	bl	8000aa4 <__aeabi_fsub>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f7ff f84c 	bl	8000aa8 <__addsf3>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd00 	bl	8000418 <__aeabi_f2d>
 8001a18:	a333      	add	r3, pc, #204	; (adr r3, 8001ae8 <Controller+0x118>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f7fe fe7d 	bl	800071c <__aeabi_ddiv>
 8001a22:	4603      	mov	r3, r0
 8001a24:	460c      	mov	r4, r1
 8001a26:	4618      	mov	r0, r3
 8001a28:	4621      	mov	r1, r4
 8001a2a:	f7fe ffe7 	bl	80009fc <__aeabi_d2f>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	60bb      	str	r3, [r7, #8]
	parameter->f_inp_fuzzy[0] = ek*parameter->f_K_e;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68f9      	ldr	r1, [r7, #12]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff f93d 	bl	8000cb8 <__aeabi_fmul>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461a      	mov	r2, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	615a      	str	r2, [r3, #20]
	parameter->f_inp_fuzzy[1] = ek_dot*parameter->f_K_e_dot;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	68b9      	ldr	r1, [r7, #8]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f933 	bl	8000cb8 <__aeabi_fmul>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	619a      	str	r2, [r3, #24]
	fuzzy_run(parameter->f_inp_fuzzy,&(parameter->f_uk));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	f103 0214 	add.w	r2, r3, #20
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	331c      	adds	r3, #28
 8001a64:	4619      	mov	r1, r3
 8001a66:	4610      	mov	r0, r2
 8001a68:	f7ff fc5e 	bl	8001328 <fuzzy_run>
	if((parameter->f_uk<=1)&&(parameter->f_uk>0)){
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fac7 	bl	8001008 <__aeabi_fcmple>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00f      	beq.n	8001aa0 <Controller+0xd0>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fad1 	bl	8001030 <__aeabi_fcmpgt>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <Controller+0xd0>
		Forward(parameter->f_uk);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff23 	bl	80018e4 <Forward>


//	parameter->f_ek_2				= parameter->f_ek_1	;
//	parameter->f_ek_1				= ek;
//	parameter->uk_dot_norm_1		= uk_dot_norm;
}
 8001a9e:	e01f      	b.n	8001ae0 <Controller+0x110>
	} else if ((parameter->f_uk<=0)&&(parameter->f_uk>=-1)){
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	f04f 0100 	mov.w	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff faad 	bl	8001008 <__aeabi_fcmple>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d100      	bne.n	8001ab6 <Controller+0xe6>
}
 8001ab4:	e014      	b.n	8001ae0 <Controller+0x110>
	} else if ((parameter->f_uk<=0)&&(parameter->f_uk>=-1)){
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	490d      	ldr	r1, [pc, #52]	; (8001af0 <Controller+0x120>)
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff faad 	bl	800101c <__aeabi_fcmpge>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d100      	bne.n	8001aca <Controller+0xfa>
}
 8001ac8:	e00a      	b.n	8001ae0 <Controller+0x110>
		parameter->f_uk*=(-1);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	61da      	str	r2, [r3, #28]
		Reverse(parameter->f_uk);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff1a 	bl	8001914 <Reverse>
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd90      	pop	{r4, r7, pc}
 8001ae8:	47ae147b 	.word	0x47ae147b
 8001aec:	3f847ae1 	.word	0x3f847ae1
 8001af0:	bf800000 	.word	0xbf800000

08001af4 <Init_parameter>:

void Init_parameter(float setpoint, Parameter_controller_t *parameter){
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
	parameter->f_K_e = K_IN0;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <Init_parameter+0x44>)
 8001b02:	601a      	str	r2, [r3, #0]
	parameter->f_K_e_dot = K_IN1;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <Init_parameter+0x48>)
 8001b08:	605a      	str	r2, [r3, #4]
	parameter->f_K_u = K_OUT_FUZZY;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	4a0c      	ldr	r2, [pc, #48]	; (8001b40 <Init_parameter+0x4c>)
 8001b0e:	609a      	str	r2, [r3, #8]
	parameter->f_ek_1 = 0;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	60da      	str	r2, [r3, #12]
	parameter->f_ek_2 = 0;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
	parameter->i_pre_cnt = 0;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2200      	movs	r2, #0
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
	parameter->f_setpoint = setpoint;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	621a      	str	r2, [r3, #32]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	3c23d70a 	.word	0x3c23d70a
 8001b3c:	3a83126f 	.word	0x3a83126f
 8001b40:	41c00000 	.word	0x41c00000

08001b44 <_qFFMath_GetAbnormal>:
(void)memcpy( &dst, &src, sizeof(dst_type) )                                \

static float qFFMath_CalcCbrt( float x , bool r );
/*============================================================================*/
float _qFFMath_GetAbnormal( const int i )
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
    static const uint32_t u_ab[ 2 ] = { 0x7F800000u, 0x7FBFFFFFu };
    static float f_ab[ 2 ] = { 0.0f, 0.0f };
    static bool init = true;
    
    if ( init ) {
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <_qFFMath_GetAbnormal+0x34>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <_qFFMath_GetAbnormal+0x22>
        /*cppcheck-suppress misra-c2012-21.15 */
        (void)memcpy( f_ab, u_ab, sizeof(f_ab) );
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <_qFFMath_GetAbnormal+0x38>)
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <_qFFMath_GetAbnormal+0x3c>)
 8001b58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b5c:	e883 0003 	stmia.w	r3, {r0, r1}
        init = false;
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <_qFFMath_GetAbnormal+0x34>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
    }
    
    return f_ab[ i ]; 
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <_qFFMath_GetAbnormal+0x38>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	20000294 	.word	0x20000294
 8001b80:	080060b8 	.word	0x080060b8

08001b84 <qFFMath_FPClassify>:
/*============================================================================*/
int qFFMath_FPClassify( const float f ) 
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
    uint32_t u = 0u;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
    int retVal;

    /*cppcheck-suppress misra-c2012-21.15 */
    cast_reinterpret( u, f, uint32_t );
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	60bb      	str	r3, [r7, #8]
    u &= 0x7FFFFFFFu;
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b9a:	60bb      	str	r3, [r7, #8]

    if ( 0u == u ) {
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d102      	bne.n	8001ba8 <qFFMath_FPClassify+0x24>
        retVal = QFFM_FP_ZERO;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	e016      	b.n	8001bd6 <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x00800000u ) {
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bae:	d202      	bcs.n	8001bb6 <qFFMath_FPClassify+0x32>
        retVal = QFFM_FP_SUBNORMAL;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	e00f      	b.n	8001bd6 <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x7F800000u ) {
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8001bbc:	d202      	bcs.n	8001bc4 <qFFMath_FPClassify+0x40>
        retVal = QFFM_FP_NORMAL;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	e008      	b.n	8001bd6 <qFFMath_FPClassify+0x52>
    }
    else if ( 0x7F800000U == u ) {
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8001bca:	d102      	bne.n	8001bd2 <qFFMath_FPClassify+0x4e>
        retVal = QFFM_FP_INFINITE;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	e001      	b.n	8001bd6 <qFFMath_FPClassify+0x52>
    }
    else {
        retVal = QFFM_FP_NAN;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <qFFMath_IsNaN>:
/*============================================================================*/
bool qFFMath_IsNaN( const float x )
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
    return ( QFFM_FP_NAN == qFFMath_FPClassify( x ) );
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffca 	bl	8001b84 <qFFMath_FPClassify>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	bf0c      	ite	eq
 8001bf6:	2301      	moveq	r3, #1
 8001bf8:	2300      	movne	r3, #0
 8001bfa:	b2db      	uxtb	r3, r3
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <qFFMath_Abs>:
{
    return ( qFFMath_FPClassify( x ) == QFFM_FP_NORMAL );
}
/*============================================================================*/
float qFFMath_Abs( float x )
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
    return ( x < 0.0f ) ? -x : x;
 8001c0c:	f04f 0100 	mov.w	r1, #0
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff f9ef 	bl	8000ff4 <__aeabi_fcmplt>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <qFFMath_Abs+0x20>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c22:	e000      	b.n	8001c26 <qFFMath_Abs+0x22>
 8001c24:	687b      	ldr	r3, [r7, #4]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <qFFMath_Sqrt>:
    
    return z*( 2.0f - ( x*z ) );
}
/*============================================================================*/
float qFFMath_Sqrt( float x )
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f04f 0100 	mov.w	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff f9d9 	bl	8000ff4 <__aeabi_fcmplt>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d004      	beq.n	8001c52 <qFFMath_Sqrt+0x24>
        retVal = QFFM_NAN;
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f7ff ff7b 	bl	8001b44 <_qFFMath_GetAbnormal>
 8001c4e:	6178      	str	r0, [r7, #20]
 8001c50:	e02f      	b.n	8001cb2 <qFFMath_Sqrt+0x84>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff95 	bl	8001b84 <qFFMath_FPClassify>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d103      	bne.n	8001c68 <qFFMath_Sqrt+0x3a>
        retVal = 0.0f;
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	e024      	b.n	8001cb2 <qFFMath_Sqrt+0x84>
    }
    else {
        uint32_t y = 0u;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	613b      	str	r3, [r7, #16]
        float z = 0.0f;
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( y, x, uint32_t );
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	613b      	str	r3, [r7, #16]
        y = ( ( y - 0x00800000u ) >> 1u ) + 0x20000000u;
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8001c7c:	085b      	lsrs	r3, r3, #1
 8001c7e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001c82:	613b      	str	r3, [r7, #16]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( z, y, float );
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	60fb      	str	r3, [r7, #12]
        retVal = ( ( x/z ) + z ) * 0.5f;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f8c6 	bl	8000e20 <__aeabi_fdiv>
 8001c94:	4603      	mov	r3, r0
 8001c96:	461a      	mov	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	f7fe ff03 	bl	8000aa8 <__addsf3>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff f805 	bl	8000cb8 <__aeabi_fmul>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8001cb2:	697b      	ldr	r3, [r7, #20]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <qFFMath_Sin>:
    return ( QFFM_FP_ZERO == qFFMath_FPClassify( x )) ? QFFM_NAN
                                                      : ( x - ( y*qFFMath_Trunc( x/y ) ) );
}
/*============================================================================*/
float qFFMath_Sin( float x )
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
    float y;

    x *= -QFFM_1_PI;
 8001cc4:	491e      	ldr	r1, [pc, #120]	; (8001d40 <qFFMath_Sin+0x84>)
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7fe fff6 	bl	8000cb8 <__aeabi_fmul>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	607b      	str	r3, [r7, #4]
    y = x + 25165824.0f;
 8001cd0:	491c      	ldr	r1, [pc, #112]	; (8001d44 <qFFMath_Sin+0x88>)
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7fe fee8 	bl	8000aa8 <__addsf3>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60fb      	str	r3, [r7, #12]
    x -= y - 25165824.0f;
 8001cdc:	4919      	ldr	r1, [pc, #100]	; (8001d44 <qFFMath_Sin+0x88>)
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f7fe fee0 	bl	8000aa4 <__aeabi_fsub>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7fe fedb 	bl	8000aa4 <__aeabi_fsub>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	607b      	str	r3, [r7, #4]
    x *= qFFMath_Abs( x ) - 1.0f;
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ff86 	bl	8001c04 <qFFMath_Abs>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fed0 	bl	8000aa4 <__aeabi_fsub>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4619      	mov	r1, r3
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7fe ffd5 	bl	8000cb8 <__aeabi_fmul>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	607b      	str	r3, [r7, #4]

    return x*( ( 3.5841304553896f*qFFMath_Abs( x ) ) + 3.1039673861526f );
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ff76 	bl	8001c04 <qFFMath_Abs>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	490b      	ldr	r1, [pc, #44]	; (8001d48 <qFFMath_Sin+0x8c>)
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe ffcb 	bl	8000cb8 <__aeabi_fmul>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4909      	ldr	r1, [pc, #36]	; (8001d4c <qFFMath_Sin+0x90>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe febe 	bl	8000aa8 <__addsf3>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe ffc1 	bl	8000cb8 <__aeabi_fmul>
 8001d36:	4603      	mov	r3, r0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	bea2f983 	.word	0xbea2f983
 8001d44:	4bc00000 	.word	0x4bc00000
 8001d48:	40656265 	.word	0x40656265
 8001d4c:	4046a767 	.word	0x4046a767

08001d50 <qFFMath_Cos>:
/*============================================================================*/
float qFFMath_Cos( float x )
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
    return qFFMath_Sin( x + QFFM_PI_2 );
 8001d58:	4906      	ldr	r1, [pc, #24]	; (8001d74 <qFFMath_Cos+0x24>)
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7fe fea4 	bl	8000aa8 <__addsf3>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ffaa 	bl	8001cbc <qFFMath_Sin>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	3fc90fdb 	.word	0x3fc90fdb

08001d78 <qFFMath_Exp2>:

    return y + ( f*( ( 0.5f*t ) - y ) );
}
/*============================================================================*/
float qFFMath_Exp2( float x )
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x <= -126.0f ) {
 8001d80:	492e      	ldr	r1, [pc, #184]	; (8001e3c <qFFMath_Exp2+0xc4>)
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff f940 	bl	8001008 <__aeabi_fcmple>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <qFFMath_Exp2+0x1e>
        retVal = 0.0f;
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	e04c      	b.n	8001e30 <qFFMath_Exp2+0xb8>
    }
    else if ( x > 128.0f ) {
 8001d96:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff f948 	bl	8001030 <__aeabi_fcmpgt>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d004      	beq.n	8001db0 <qFFMath_Exp2+0x38>
        retVal = QFFM_INFINITY;
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff fecc 	bl	8001b44 <_qFFMath_GetAbnormal>
 8001dac:	6178      	str	r0, [r7, #20]
 8001dae:	e03f      	b.n	8001e30 <qFFMath_Exp2+0xb8>
    }
    else {
        float y = 0.0f;
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
        uint32_t exponent;
        /*cstat -CERT-FLP34-C -MISRAC2012-Rule-10.8*/
        exponent = (uint32_t)( x + 127.0f );
 8001db6:	4922      	ldr	r1, [pc, #136]	; (8001e40 <qFFMath_Exp2+0xc8>)
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7fe fe75 	bl	8000aa8 <__addsf3>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff f93f 	bl	8001044 <__aeabi_f2uiz>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	60fb      	str	r3, [r7, #12]
        /*cstat +CERT-FLP34-C +MISRAC2012-Rule-10.8 -CERT-FLP36-C*/
        x += 127.0f - (float)exponent;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe ff1b 	bl	8000c08 <__aeabi_ui2f>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	481a      	ldr	r0, [pc, #104]	; (8001e40 <qFFMath_Exp2+0xc8>)
 8001dd8:	f7fe fe64 	bl	8000aa4 <__aeabi_fsub>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4619      	mov	r1, r3
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7fe fe61 	bl	8000aa8 <__addsf3>
 8001de6:	4603      	mov	r3, r0
 8001de8:	607b      	str	r3, [r7, #4]
        /*cstat +CERT-FLP36-C*/
        exponent <<= 23u;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	05db      	lsls	r3, r3, #23
 8001dee:	60fb      	str	r3, [r7, #12]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( y, exponent, float );
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	613b      	str	r3, [r7, #16]
        x *= ( x*0.339766027f ) + 0.660233972f;
 8001df4:	4913      	ldr	r1, [pc, #76]	; (8001e44 <qFFMath_Exp2+0xcc>)
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7fe ff5e 	bl	8000cb8 <__aeabi_fmul>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	4912      	ldr	r1, [pc, #72]	; (8001e48 <qFFMath_Exp2+0xd0>)
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fe51 	bl	8000aa8 <__addsf3>
 8001e06:	4603      	mov	r3, r0
 8001e08:	4619      	mov	r1, r3
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7fe ff54 	bl	8000cb8 <__aeabi_fmul>
 8001e10:	4603      	mov	r3, r0
 8001e12:	607b      	str	r3, [r7, #4]
        retVal = y*( x + 1.0f );
 8001e14:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7fe fe45 	bl	8000aa8 <__addsf3>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461a      	mov	r2, r3
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4619      	mov	r1, r3
 8001e26:	4610      	mov	r0, r2
 8001e28:	f7fe ff46 	bl	8000cb8 <__aeabi_fmul>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8001e30:	697b      	ldr	r3, [r7, #20]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	c2fc0000 	.word	0xc2fc0000
 8001e40:	42fe0000 	.word	0x42fe0000
 8001e44:	3eadf5d0 	.word	0x3eadf5d0
 8001e48:	3f290518 	.word	0x3f290518

08001e4c <qFFMath_Log2>:
/*============================================================================*/
float qFFMath_Log2( float x )
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f04f 0100 	mov.w	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f8ca 	bl	8000ff4 <__aeabi_fcmplt>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d004      	beq.n	8001e70 <qFFMath_Log2+0x24>
        retVal = QFFM_NAN;
 8001e66:	2001      	movs	r0, #1
 8001e68:	f7ff fe6c 	bl	8001b44 <_qFFMath_GetAbnormal>
 8001e6c:	6178      	str	r0, [r7, #20]
 8001e6e:	e049      	b.n	8001f04 <qFFMath_Log2+0xb8>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fe86 	bl	8001b84 <qFFMath_FPClassify>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d107      	bne.n	8001e8e <qFFMath_Log2+0x42>
        retVal = -QFFM_INFINITY;
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff fe60 	bl	8001b44 <_qFFMath_GetAbnormal>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	e03a      	b.n	8001f04 <qFFMath_Log2+0xb8>
    }
    else {
        uint32_t y = 0u, y2;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( y, x, uint32_t );
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	60fb      	str	r3, [r7, #12]
        y2 = y;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	613b      	str	r3, [r7, #16]
        y >>= 23u;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	0ddb      	lsrs	r3, r3, #23
 8001e9e:	60fb      	str	r3, [r7, #12]
        /*cstat -CERT-FLP36-C*/
        retVal = (float)y;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe feb0 	bl	8000c08 <__aeabi_ui2f>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	617b      	str	r3, [r7, #20]
        /*cstat +CERT-FLP36-C*/
        y = ( y2 & 0x007FFFFFu ) | 0x3F800000u;
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001eb2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8001eb6:	60fb      	str	r3, [r7, #12]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( x, y, float );
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	607b      	str	r3, [r7, #4]
        retVal += -128.0f + ( x*( ( -0.333333333f*x ) + 2.0f ) ) - 0.666666666f;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4914      	ldr	r1, [pc, #80]	; (8001f10 <qFFMath_Log2+0xc4>)
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fef9 	bl	8000cb8 <__aeabi_fmul>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fdeb 	bl	8000aa8 <__addsf3>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f7fe feec 	bl	8000cb8 <__aeabi_fmul>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fddc 	bl	8000aa4 <__aeabi_fsub>
 8001eec:	4603      	mov	r3, r0
 8001eee:	4909      	ldr	r1, [pc, #36]	; (8001f14 <qFFMath_Log2+0xc8>)
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fdd7 	bl	8000aa4 <__aeabi_fsub>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4619      	mov	r1, r3
 8001efa:	6978      	ldr	r0, [r7, #20]
 8001efc:	f7fe fdd4 	bl	8000aa8 <__addsf3>
 8001f00:	4603      	mov	r3, r0
 8001f02:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8001f04:	697b      	ldr	r3, [r7, #20]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	beaaaaab 	.word	0xbeaaaaab
 8001f14:	3f2aaaab 	.word	0x3f2aaaab

08001f18 <qFFMath_Exp>:
/*============================================================================*/
float qFFMath_Exp( float x )
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
    return qFFMath_Exp2( QFFM_LOG2E*x );
 8001f20:	4906      	ldr	r1, [pc, #24]	; (8001f3c <qFFMath_Exp+0x24>)
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fec8 	bl	8000cb8 <__aeabi_fmul>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff ff24 	bl	8001d78 <qFFMath_Exp2>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	3fb8aa3b 	.word	0x3fb8aa3b

08001f40 <qFFMath_Log>:
{
    return qFFMath_Exp2( 3.32192809f*x );
}
/*============================================================================*/
float qFFMath_Log( float x )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
    return QFFM_LN2*qFFMath_Log2(x);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ff7f 	bl	8001e4c <qFFMath_Log2>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4904      	ldr	r1, [pc, #16]	; (8001f64 <qFFMath_Log+0x24>)
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe feb0 	bl	8000cb8 <__aeabi_fmul>
 8001f58:	4603      	mov	r3, r0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	3f317218 	.word	0x3f317218

08001f68 <qFFMath_Pow>:
    return 0.301029996f*qFFMath_Log2(x);
}
/*============================================================================*/
float qFFMath_Pow( float b,
                   float e )
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
    return qFFMath_Exp2( e*qFFMath_Log2( b ) );
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ff6a 	bl	8001e4c <qFFMath_Log2>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	6839      	ldr	r1, [r7, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fe9b 	bl	8000cb8 <__aeabi_fmul>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fef7 	bl	8001d78 <qFFMath_Exp2>
 8001f8a:	4603      	mov	r3, r0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <qFIS_SetParameter>:

/*============================================================================*/
int qFIS_SetParameter( qFIS_t * const f,
                       const qFIS_Parameter_t p,
                       const qFIS_ParamValue_t x )
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	70bb      	strb	r3, [r7, #2]
    int retVal = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
    typedef float (*methods_fcn)( const float a, const float b );
    static const methods_fcn method[ 5 ] = { &qFIS_Min, &qFIS_Prod, &qFIS_Max,
                                             &qFIS_ProbOR, &qFIS_Sum
                                           };

    if ( NULL != f ) {
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d04f      	beq.n	800204e <qFIS_SetParameter+0xba>
        switch ( p ) {
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d84e      	bhi.n	8002052 <qFIS_SetParameter+0xbe>
 8001fb4:	a201      	add	r2, pc, #4	; (adr r2, 8001fbc <qFIS_SetParameter+0x28>)
 8001fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fba:	bf00      	nop
 8001fbc:	08001fd1 	.word	0x08001fd1
 8001fc0:	08001fe9 	.word	0x08001fe9
 8001fc4:	08002007 	.word	0x08002007
 8001fc8:	0800201f 	.word	0x0800201f
 8001fcc:	0800203d 	.word	0x0800203d
            case qFIS_Implication:
                if ( x <= qFIS_PROD ) {
 8001fd0:	78bb      	ldrb	r3, [r7, #2]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d83f      	bhi.n	8002056 <qFIS_SetParameter+0xc2>
                    /*cppcheck-suppress misra-c2012-11.1 */
                    f->implicate = method[ x ];
 8001fd6:	78bb      	ldrb	r3, [r7, #2]
 8001fd8:	4a26      	ldr	r2, [pc, #152]	; (8002074 <qFIS_SetParameter+0xe0>)
 8001fda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	619a      	str	r2, [r3, #24]
                    retVal = 1;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	60fb      	str	r3, [r7, #12]
                }
                break;
 8001fe6:	e036      	b.n	8002056 <qFIS_SetParameter+0xc2>
            case qFIS_Aggregation:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_SUM ) ) {
 8001fe8:	78bb      	ldrb	r3, [r7, #2]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d935      	bls.n	800205a <qFIS_SetParameter+0xc6>
 8001fee:	78bb      	ldrb	r3, [r7, #2]
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d832      	bhi.n	800205a <qFIS_SetParameter+0xc6>
                    /*cppcheck-suppress misra-c2012-11.1 */
                    f->aggregate = method[ x ];
 8001ff4:	78bb      	ldrb	r3, [r7, #2]
 8001ff6:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <qFIS_SetParameter+0xe0>)
 8001ff8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	61da      	str	r2, [r3, #28]
                    retVal = 1;
 8002000:	2301      	movs	r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002004:	e029      	b.n	800205a <qFIS_SetParameter+0xc6>
            case qFIS_AND:
                if ( x <= qFIS_PROD ) {
 8002006:	78bb      	ldrb	r3, [r7, #2]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d828      	bhi.n	800205e <qFIS_SetParameter+0xca>
                    /*cppcheck-suppress misra-c2012-11.1 */
                    f->andOp = method[ x ];
 800200c:	78bb      	ldrb	r3, [r7, #2]
 800200e:	4a19      	ldr	r2, [pc, #100]	; (8002074 <qFIS_SetParameter+0xe0>)
 8002010:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	611a      	str	r2, [r3, #16]
                    retVal = 1;
 8002018:	2301      	movs	r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
                }
                break;
 800201c:	e01f      	b.n	800205e <qFIS_SetParameter+0xca>
            case qFIS_OR:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_PROBOR ) ) {
 800201e:	78bb      	ldrb	r3, [r7, #2]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d91e      	bls.n	8002062 <qFIS_SetParameter+0xce>
 8002024:	78bb      	ldrb	r3, [r7, #2]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d81b      	bhi.n	8002062 <qFIS_SetParameter+0xce>
                    /*cppcheck-suppress misra-c2012-11.1 */
                    f->orOp = method[ x ];
 800202a:	78bb      	ldrb	r3, [r7, #2]
 800202c:	4a11      	ldr	r2, [pc, #68]	; (8002074 <qFIS_SetParameter+0xe0>)
 800202e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	615a      	str	r2, [r3, #20]
                    retVal = 1;
 8002036:	2301      	movs	r3, #1
 8002038:	60fb      	str	r3, [r7, #12]
                }
                break;
 800203a:	e012      	b.n	8002062 <qFIS_SetParameter+0xce>
            case qFIS_EvalPoints:
                if ( (int)x >= 20 ) {
 800203c:	78bb      	ldrb	r3, [r7, #2]
 800203e:	2b13      	cmp	r3, #19
 8002040:	d911      	bls.n	8002066 <qFIS_SetParameter+0xd2>
                    f->nPoints = (size_t)x;
 8002042:	78ba      	ldrb	r2, [r7, #2]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	64da      	str	r2, [r3, #76]	; 0x4c
                    retVal = 1;
 8002048:	2301      	movs	r3, #1
 800204a:	60fb      	str	r3, [r7, #12]
                }
                break;
 800204c:	e00b      	b.n	8002066 <qFIS_SetParameter+0xd2>
            default:
                break;
        }
    }
 800204e:	bf00      	nop
 8002050:	e00a      	b.n	8002068 <qFIS_SetParameter+0xd4>
                break;
 8002052:	bf00      	nop
 8002054:	e008      	b.n	8002068 <qFIS_SetParameter+0xd4>
                break;
 8002056:	bf00      	nop
 8002058:	e006      	b.n	8002068 <qFIS_SetParameter+0xd4>
                break;
 800205a:	bf00      	nop
 800205c:	e004      	b.n	8002068 <qFIS_SetParameter+0xd4>
                break;
 800205e:	bf00      	nop
 8002060:	e002      	b.n	8002068 <qFIS_SetParameter+0xd4>
                break;
 8002062:	bf00      	nop
 8002064:	e000      	b.n	8002068 <qFIS_SetParameter+0xd4>
                break;
 8002066:	bf00      	nop

    return retVal;
 8002068:	68fb      	ldr	r3, [r7, #12]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	080060c0 	.word	0x080060c0

08002078 <qFIS_Setup>:
                qFIS_MF_t *const mf_outputs,
                const size_t nmo,
                const qFIS_Rules_t * const r,
                float *wi,
                const size_t n )
{
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	460b      	mov	r3, r1
 8002086:	72fb      	strb	r3, [r7, #11]
    int retVal = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]

    if ( ( NULL != f ) && ( t <= Tsukamoto ) && ( NULL != r ) && ( NULL != wi ) ) {
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 80bb 	beq.w	800220a <qFIS_Setup+0x192>
 8002094:	7afb      	ldrb	r3, [r7, #11]
 8002096:	2b02      	cmp	r3, #2
 8002098:	f200 80b7 	bhi.w	800220a <qFIS_Setup+0x192>
 800209c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 80b3 	beq.w	800220a <qFIS_Setup+0x192>
 80020a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 80af 	beq.w	800220a <qFIS_Setup+0x192>
        size_t i;

        f->nInputs = ni/sizeof(qFIS_Input_t);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4a59      	ldr	r2, [pc, #356]	; (8002214 <qFIS_Setup+0x19c>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	63da      	str	r2, [r3, #60]	; 0x3c
        f->nOutputs = no/sizeof(qFIS_Output_t);
 80020ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020bc:	4a56      	ldr	r2, [pc, #344]	; (8002218 <qFIS_Setup+0x1a0>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	091a      	lsrs	r2, r3, #4
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40
        f->nMFInputs = nmi/sizeof(qFIS_MF_t);
 80020c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ca:	4a54      	ldr	r2, [pc, #336]	; (800221c <qFIS_Setup+0x1a4>)
 80020cc:	fba2 2303 	umull	r2, r3, r2, r3
 80020d0:	091a      	lsrs	r2, r3, #4
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44
        f->nMFOutputs = nmo/sizeof(qFIS_MF_t);
 80020d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d8:	4a50      	ldr	r2, [pc, #320]	; (800221c <qFIS_Setup+0x1a4>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	091a      	lsrs	r2, r3, #4
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	649a      	str	r2, [r3, #72]	; 0x48
        f->input = inputs;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	601a      	str	r2, [r3, #0]
        f->output = outputs;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020ee:	605a      	str	r2, [r3, #4]
        f->inMF = mf_inputs;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020f4:	609a      	str	r2, [r3, #8]
        f->outMF = mf_outputs;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020fa:	60da      	str	r2, [r3, #12]
        f->wi = wi;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
        f->rules = r;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002106:	635a      	str	r2, [r3, #52]	; 0x34
        f->nRules = n;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800210c:	651a      	str	r2, [r3, #80]	; 0x50
        f->type = t;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	7afa      	ldrb	r2, [r7, #11]
 8002112:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        retVal += qFIS_SetParameter( f, qFIS_EvalPoints, (qFIS_ParamValue_t)100 );
 8002116:	2264      	movs	r2, #100	; 0x64
 8002118:	2104      	movs	r1, #4
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f7ff ff3a 	bl	8001f94 <qFIS_SetParameter>
 8002120:	4602      	mov	r2, r0
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	4413      	add	r3, r2
 8002126:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_AND, qFIS_MIN );
 8002128:	2200      	movs	r2, #0
 800212a:	2102      	movs	r1, #2
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f7ff ff31 	bl	8001f94 <qFIS_SetParameter>
 8002132:	4602      	mov	r2, r0
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	4413      	add	r3, r2
 8002138:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_OR, qFIS_MAX );
 800213a:	2202      	movs	r2, #2
 800213c:	2103      	movs	r1, #3
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f7ff ff28 	bl	8001f94 <qFIS_SetParameter>
 8002144:	4602      	mov	r2, r0
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	4413      	add	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Implication, qFIS_MIN );
 800214c:	2200      	movs	r2, #0
 800214e:	2100      	movs	r1, #0
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f7ff ff1f 	bl	8001f94 <qFIS_SetParameter>
 8002156:	4602      	mov	r2, r0
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	4413      	add	r3, r2
 800215c:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Aggregation, qFIS_MAX );
 800215e:	2202      	movs	r2, #2
 8002160:	2101      	movs	r1, #1
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f7ff ff16 	bl	8001f94 <qFIS_SetParameter>
 8002168:	4602      	mov	r2, r0
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	4413      	add	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
        /*cppcheck-suppress misra-c2012-10.6 */
        retVal = ( 5 == retVal ) ? 1 : 0;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2b05      	cmp	r3, #5
 8002174:	bf0c      	ite	eq
 8002176:	2301      	moveq	r3, #1
 8002178:	2300      	movne	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	617b      	str	r3, [r7, #20]
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
                                     : &qFIS_DeFuzz_WtAverage;
 800217e:	7afb      	ldrb	r3, [r7, #11]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <qFIS_Setup+0x110>
 8002184:	4a26      	ldr	r2, [pc, #152]	; (8002220 <qFIS_Setup+0x1a8>)
 8002186:	e000      	b.n	800218a <qFIS_Setup+0x112>
 8002188:	4a26      	ldr	r2, [pc, #152]	; (8002224 <qFIS_Setup+0x1ac>)
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	629a      	str	r2, [r3, #40]	; 0x28
        f->ruleWeight = NULL;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c
        for ( i = 0u ; i < f->nOutputs ; ++i ) {
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	e032      	b.n	8002200 <qFIS_Setup+0x188>
            /*cstat -CERT-FLP36-C*/
            f->output[ i ].res = ( f->output[ i ].b.max - f->output[ i ].b.min )/(float)f->nPoints;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2134      	movs	r1, #52	; 0x34
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	6858      	ldr	r0, [r3, #4]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2134      	movs	r1, #52	; 0x34
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4619      	mov	r1, r3
 80021bc:	f7fe fc72 	bl	8000aa4 <__aeabi_fsub>
 80021c0:	4603      	mov	r3, r0
 80021c2:	461d      	mov	r5, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe fd1d 	bl	8000c08 <__aeabi_ui2f>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2134      	movs	r1, #52	; 0x34
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	18d4      	adds	r4, r2, r3
 80021dc:	4601      	mov	r1, r0
 80021de:	4628      	mov	r0, r5
 80021e0:	f7fe fe1e 	bl	8000e20 <__aeabi_fdiv>
 80021e4:	4603      	mov	r3, r0
 80021e6:	61a3      	str	r3, [r4, #24]
            /*cstat +CERT-FLP36-C*/
            f->output[ i ].owner = f;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2134      	movs	r1, #52	; 0x34
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	60da      	str	r2, [r3, #12]
        for ( i = 0u ; i < f->nOutputs ; ++i ) {
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	3301      	adds	r3, #1
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	429a      	cmp	r2, r3
 8002208:	d3c7      	bcc.n	800219a <qFIS_Setup+0x122>
        }
    }

    return retVal;
 800220a:	697b      	ldr	r3, [r7, #20]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bdb0      	pop	{r4, r5, r7, pc}
 8002214:	aaaaaaab 	.word	0xaaaaaaab
 8002218:	4ec4ec4f 	.word	0x4ec4ec4f
 800221c:	cccccccd 	.word	0xcccccccd
 8002220:	08002a9d 	.word	0x08002a9d
 8002224:	08002b31 	.word	0x08002b31

08002228 <qFIS_InputSetup>:
/*============================================================================*/
int qFIS_InputSetup( qFIS_Input_t * const v,
                     const qFIS_Tag_t t,
                     const float min,
                     const float max )
{
 8002228:	b480      	push	{r7}
 800222a:	b087      	sub	sp, #28
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d018      	beq.n	8002272 <qFIS_InputSetup+0x4a>
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	db15      	blt.n	8002272 <qFIS_InputSetup+0x4a>
        v[ t ].b.min = min;
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	461a      	mov	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4413      	add	r3, r2
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	461a      	mov	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4413      	add	r3, r2
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	605a      	str	r2, [r3, #4]
        retVal = 1;
 800226e:	2301      	movs	r3, #1
 8002270:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002272:	697b      	ldr	r3, [r7, #20]
}
 8002274:	4618      	mov	r0, r3
 8002276:	371c      	adds	r7, #28
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr

0800227e <qFIS_OutputSetup>:
/*============================================================================*/
int qFIS_OutputSetup( qFIS_Output_t * const v,
                      const qFIS_Tag_t t,
                      const float min,
                      const float max )
{
 800227e:	b480      	push	{r7}
 8002280:	b087      	sub	sp, #28
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d05a      	beq.n	800234c <qFIS_OutputSetup+0xce>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	db57      	blt.n	800234c <qFIS_OutputSetup+0xce>
        v[ t ].data[ 0 ] = 0.0f;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2234      	movs	r2, #52	; 0x34
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
        v[ t ].data[ 1 ] = 0.0f;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2234      	movs	r2, #52	; 0x34
 80022b2:	fb02 f303 	mul.w	r3, r2, r3
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4413      	add	r3, r2
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
        v[ t ].data[ 2 ] = 0.0f;
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2234      	movs	r2, #52	; 0x34
 80022c4:	fb02 f303 	mul.w	r3, r2, r3
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4413      	add	r3, r2
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	62da      	str	r2, [r3, #44]	; 0x2c
        v[ t ].data[ 3 ] = 0.0f;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2234      	movs	r2, #52	; 0x34
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4413      	add	r3, r2
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
        v[ t ].x = 0.0f;
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2234      	movs	r2, #52	; 0x34
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4413      	add	r3, r2
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
        v[ t ].y = 0.0f;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2234      	movs	r2, #52	; 0x34
 80022fa:	fb02 f303 	mul.w	r3, r2, r3
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4413      	add	r3, r2
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
        v[ t ].b.min = min;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2234      	movs	r2, #52	; 0x34
 800230c:	fb02 f303 	mul.w	r3, r2, r3
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4413      	add	r3, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2234      	movs	r2, #52	; 0x34
 800231c:	fb02 f303 	mul.w	r3, r2, r3
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4413      	add	r3, r2
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	605a      	str	r2, [r3, #4]
        v[ t ].xag = NULL;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2234      	movs	r2, #52	; 0x34
 800232c:	fb02 f303 	mul.w	r3, r2, r3
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	2200      	movs	r2, #0
 8002336:	611a      	str	r2, [r3, #16]
        v[ t ].yag = NULL;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2234      	movs	r2, #52	; 0x34
 800233c:	fb02 f303 	mul.w	r3, r2, r3
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4413      	add	r3, r2
 8002344:	2200      	movs	r2, #0
 8002346:	615a      	str	r2, [r3, #20]
        retVal = 1;
 8002348:	2301      	movs	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 800234c:	697b      	ldr	r3, [r7, #20]
}
 800234e:	4618      	mov	r0, r3
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <qFIS_SetInput>:
/*============================================================================*/
int qFIS_SetInput( qFIS_Input_t * const v,
                   const qFIS_Tag_t t,
                   const float value )
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
    int retVal = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00e      	beq.n	800238c <qFIS_SetInput+0x34>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	db0b      	blt.n	800238c <qFIS_SetInput+0x34>
        v[ t ].b.value = value;
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	4613      	mov	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	609a      	str	r2, [r3, #8]
        retVal = 1;
 8002388:	2301      	movs	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 800238c:	697b      	ldr	r3, [r7, #20]
}
 800238e:	4618      	mov	r0, r3
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <qFIS_GetOutput>:
/*============================================================================*/
float qFIS_GetOutput( const qFIS_Output_t * const v,
                      const qFIS_Tag_t t )
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
    float retVal = 0.0f;
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <qFIS_GetOutput+0x2c>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	db07      	blt.n	80023c4 <qFIS_GetOutput+0x2c>
        retVal = v[ t ].b.value;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2234      	movs	r2, #52	; 0x34
 80023b8:	fb02 f303 	mul.w	r3, r2, r3
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 80023c4:	68fb      	ldr	r3, [r7, #12]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <qFIS_SetMF>:
                const qFIS_Tag_t mf,
                const qFIS_MF_Name_t s,
                qFIS_MF_Fcn_t custom_mf,
                const float *cp,
                float h )
{
 80023d0:	b590      	push	{r4, r7, lr}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	70fb      	strb	r3, [r7, #3]
    int retVal = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
    /* Only for Tsukamoto consequents*/
    &qFIS_TLinSMF, &qFIS_TLinZMF, &qFIS_TConcaveMF,&qFIS_TSigMF, &qFIS_TSMF,
    &qFIS_TZMF
    };

    if ( ( NULL != m ) && ( io >= 0 ) && ( mf >= 0 ) && ( s < _NUM_MFS ) ) {
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d055      	beq.n	8002494 <qFIS_SetMF+0xc4>
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	db52      	blt.n	8002494 <qFIS_SetMF+0xc4>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	db4f      	blt.n	8002494 <qFIS_SetMF+0xc4>
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	2b1a      	cmp	r3, #26
 80023f8:	d84c      	bhi.n	8002494 <qFIS_SetMF+0xc4>
        if ( NULL != custom_mf ) {
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <qFIS_SetMF+0x46>
            m[ mf ].shape = custom_mf; /*user-defined membership function*/
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	461a      	mov	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	e00c      	b.n	8002430 <qFIS_SetMF+0x60>
        }
        else {
            /*cppcheck-suppress misra-c2012-11.1 */
            m[ mf ].shape = fShape[ s ];
 8002416:	78f9      	ldrb	r1, [r7, #3]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	461a      	mov	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4413      	add	r3, r2
 8002428:	4a1d      	ldr	r2, [pc, #116]	; (80024a0 <qFIS_SetMF+0xd0>)
 800242a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800242e:	601a      	str	r2, [r3, #0]
        }
        m[ mf ].index = (size_t)io;
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	461a      	mov	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4413      	add	r3, r2
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	611a      	str	r2, [r3, #16]
        m[ mf ].points = cp;
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002456:	605a      	str	r2, [r3, #4]
        m[ mf ].fx = 0.0f;
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	461a      	mov	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4413      	add	r3, r2
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
        m[ mf ].h = qFIS_Bound( h, 0.0f, 1.0f );
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	461a      	mov	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	189c      	adds	r4, r3, r2
 800247e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002482:	f04f 0100 	mov.w	r1, #0
 8002486:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002488:	f001 fce9 	bl	8003e5e <qFIS_Bound>
 800248c:	4603      	mov	r3, r0
 800248e:	60e3      	str	r3, [r4, #12]
        retVal = 1;
 8002490:	2301      	movs	r3, #1
 8002492:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002494:	697b      	ldr	r3, [r7, #20]
}
 8002496:	4618      	mov	r0, r3
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	bd90      	pop	{r4, r7, pc}
 800249e:	bf00      	nop
 80024a0:	080060d4 	.word	0x080060d4

080024a4 <qFIS_EvalInputMFs>:

    return retVal;
}
/*============================================================================*/
static void qFIS_EvalInputMFs( qFIS_t * const f )
{
 80024a4:	b5b0      	push	{r4, r5, r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
    size_t i;
    qFIS_MF_t *mf;

    for ( i = 0 ; i < f->nMFInputs ; ++i ) {
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	e026      	b.n	8002500 <qFIS_EvalInputMFs+0x5c>
        mf = &f->inMF[ i ];
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6899      	ldr	r1, [r3, #8]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	60bb      	str	r3, [r7, #8]
        /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
        /*cppcheck-suppress misra-c2012-11.3 */
        mf->fx = mf->h*mf->shape( (qFIS_IO_Base_t*)&f->input[ mf->index ],
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	68dd      	ldr	r5, [r3, #12]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	681c      	ldr	r4, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6819      	ldr	r1, [r3, #0]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	18c8      	adds	r0, r1, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	4619      	mov	r1, r3
 80024e6:	47a0      	blx	r4
 80024e8:	4603      	mov	r3, r0
 80024ea:	4619      	mov	r1, r3
 80024ec:	4628      	mov	r0, r5
 80024ee:	f7fe fbe3 	bl	8000cb8 <__aeabi_fmul>
 80024f2:	4603      	mov	r3, r0
 80024f4:	461a      	mov	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	609a      	str	r2, [r3, #8]
    for ( i = 0 ; i < f->nMFInputs ; ++i ) {
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	3301      	adds	r3, #1
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	429a      	cmp	r2, r3
 8002508:	d3d3      	bcc.n	80024b2 <qFIS_EvalInputMFs+0xe>
                                  mf->points,
                                  1u );
        /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
    }
}
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bdb0      	pop	{r4, r5, r7, pc}

08002512 <qFIS_TruncateInputs>:
/*============================================================================*/
static void qFIS_TruncateInputs( qFIS_t * const f )
{
 8002512:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002514:	b085      	sub	sp, #20
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
    size_t i;

    for ( i = 0 ; i < f->nInputs ; ++i ) {
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	e02b      	b.n	8002578 <qFIS_TruncateInputs+0x66>
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6819      	ldr	r1, [r3, #0]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	6898      	ldr	r0, [r3, #8]
                                            f->input[ i ].b.min,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6819      	ldr	r1, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002542:	681d      	ldr	r5, [r3, #0]
                                            f->input[ i ].b.max );
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6819      	ldr	r1, [r3, #0]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4613      	mov	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002554:	685e      	ldr	r6, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6819      	ldr	r1, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	18cc      	adds	r4, r1, r3
 8002566:	4632      	mov	r2, r6
 8002568:	4629      	mov	r1, r5
 800256a:	f001 fc78 	bl	8003e5e <qFIS_Bound>
 800256e:	4603      	mov	r3, r0
 8002570:	60a3      	str	r3, [r4, #8]
    for ( i = 0 ; i < f->nInputs ; ++i ) {
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	3301      	adds	r3, #1
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	429a      	cmp	r2, r3
 8002580:	d3ce      	bcc.n	8002520 <qFIS_TruncateInputs+0xe>
    }
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800258a <qFIS_Fuzzify>:
/*============================================================================*/
int qFIS_Fuzzify( qFIS_t * const f )
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]

    if ( NULL != f ) {
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <qFIS_Fuzzify+0x22>
        qFIS_TruncateInputs( f );
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ffb8 	bl	8002512 <qFIS_TruncateInputs>
        qFIS_EvalInputMFs( f );
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ff7e 	bl	80024a4 <qFIS_EvalInputMFs>
        retVal = 1;
 80025a8:	2301      	movs	r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 80025ac:	68fb      	ldr	r3, [r7, #12]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <qFIS_ParseFuzzValue>:
/*============================================================================*/
static float qFIS_ParseFuzzValue( qFIS_MF_t * const mfIO,
                                  qFIS_Rules_t index )
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	807b      	strh	r3, [r7, #2]
    uint8_t neg = ( index < 0 ) ? 1u : 0u ;
 80025c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025c6:	13db      	asrs	r3, r3, #15
 80025c8:	b21b      	sxth	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
    float y;

    if ( 0u != neg ) {
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <qFIS_ParseFuzzValue+0x2a>
        index = -index;
 80025d8:	887b      	ldrh	r3, [r7, #2]
 80025da:	425b      	negs	r3, r3
 80025dc:	b29b      	uxth	r3, r3
 80025de:	807b      	strh	r3, [r7, #2]
    }
    /*cstat -CERT-INT32-C_a*/
    y = qFIS_Bound( mfIO[ index - 1 ].fx, 0.0f, 1.0f );
 80025e0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	3b14      	subs	r3, #20
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80025f8:	f04f 0100 	mov.w	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f001 fc2e 	bl	8003e5e <qFIS_Bound>
 8002602:	60b8      	str	r0, [r7, #8]
    /*cstat +CERT-INT32-C_a*/
    /*cppcheck-suppress misra-c2012-12.1 */
    y = ( 0u != neg ) ? ( 1.0f - y ) : y ;
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d006      	beq.n	8002618 <qFIS_ParseFuzzValue+0x62>
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002610:	f7fe fa48 	bl	8000aa4 <__aeabi_fsub>
 8002614:	4603      	mov	r3, r0
 8002616:	e000      	b.n	800261a <qFIS_ParseFuzzValue+0x64>
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	60bb      	str	r3, [r7, #8]

    return y;
 800261c:	68bb      	ldr	r3, [r7, #8]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <qFIS_GetFuzzOperator>:
/*============================================================================*/
static qFIS_FuzzyOperator_t qFIS_GetFuzzOperator( const qFIS_t * const f )
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
    qFIS_FuzzyOperator_t oper;

    switch ( f->lastConnector ) {
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8002636:	4a0c      	ldr	r2, [pc, #48]	; (8002668 <qFIS_GetFuzzOperator+0x40>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d003      	beq.n	8002644 <qFIS_GetFuzzOperator+0x1c>
 800263c:	4a0b      	ldr	r2, [pc, #44]	; (800266c <qFIS_GetFuzzOperator+0x44>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d004      	beq.n	800264c <qFIS_GetFuzzOperator+0x24>
 8002642:	e007      	b.n	8002654 <qFIS_GetFuzzOperator+0x2c>
        case _QFIS_AND:
            oper = f->andOp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	60fb      	str	r3, [r7, #12]
            break;
 800264a:	e006      	b.n	800265a <qFIS_GetFuzzOperator+0x32>
        case _QFIS_OR:
            oper = f->orOp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	60fb      	str	r3, [r7, #12]
            break;
 8002652:	e002      	b.n	800265a <qFIS_GetFuzzOperator+0x32>
        default: 
            oper = &qFIS_Sum;
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <qFIS_GetFuzzOperator+0x48>)
 8002656:	60fb      	str	r3, [r7, #12]
            break;
 8002658:	bf00      	nop
    }

    return oper;
 800265a:	68fb      	ldr	r3, [r7, #12]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	ffff8002 	.word	0xffff8002
 800266c:	ffff8003 	.word	0xffff8003
 8002670:	08003e33 	.word	0x08003e33

08002674 <qFIS_InferenceAntecedent>:
/*============================================================================*/
static size_t qFIS_InferenceAntecedent( struct _qFIS_s * const f,
                                        size_t i )
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
    int16_t inIndex, MFInIndex, connector;
    qFIS_FuzzyOperator_t op;
    /*cstat -CERT-INT30-C_a*/
    inIndex = f->rules[ i ];
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	82fb      	strh	r3, [r7, #22]
    MFInIndex = f->rules[ i + 1u ];
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	3301      	adds	r3, #1
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	82bb      	strh	r3, [r7, #20]
    connector = f->rules[ i + 2u ];
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	3302      	adds	r3, #2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	827b      	strh	r3, [r7, #18]
    /*cstat -CERT-INT30-C_a*/
    op = qFIS_GetFuzzOperator( f );
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ffbb 	bl	8002628 <qFIS_GetFuzzOperator>
 80026b2:	60f8      	str	r0, [r7, #12]
    f->rStrength = op( f->rStrength, qFIS_ParseFuzzValue( f->inMF, MFInIndex ) );
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff77 	bl	80025b6 <qFIS_ParseFuzzValue>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4611      	mov	r1, r2
 80026ce:	4620      	mov	r0, r4
 80026d0:	4798      	blx	r3
 80026d2:	4602      	mov	r2, r0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	659a      	str	r2, [r3, #88]	; 0x58

    if ( ( inIndex < 0 ) || ( (size_t)inIndex > f->nInputs ) ) {
 80026d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	db05      	blt.n	80026ec <qFIS_InferenceAntecedent+0x78>
 80026e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d902      	bls.n	80026f2 <qFIS_InferenceAntecedent+0x7e>
        i = QFIS_INFERENCE_ERROR;
 80026ec:	2300      	movs	r3, #0
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	e022      	b.n	8002738 <qFIS_InferenceAntecedent+0xc4>
    }
    else {
        if ( ( _QFIS_AND == connector ) || ( _QFIS_OR == connector ) ) {
 80026f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026f6:	4a13      	ldr	r2, [pc, #76]	; (8002744 <qFIS_InferenceAntecedent+0xd0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d004      	beq.n	8002706 <qFIS_InferenceAntecedent+0x92>
 80026fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002700:	4a11      	ldr	r2, [pc, #68]	; (8002748 <qFIS_InferenceAntecedent+0xd4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10a      	bne.n	800271c <qFIS_InferenceAntecedent+0xa8>
            f->lastConnector = connector;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	8a7a      	ldrh	r2, [r7, #18]
 800270a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            f->inferenceState = &qFIS_InferenceAntecedent;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a0e      	ldr	r2, [pc, #56]	; (800274c <qFIS_InferenceAntecedent+0xd8>)
 8002712:	621a      	str	r2, [r3, #32]
            i += 2u;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	3302      	adds	r3, #2
 8002718:	603b      	str	r3, [r7, #0]
 800271a:	e00d      	b.n	8002738 <qFIS_InferenceAntecedent+0xc4>
        }
        else if ( _QFIS_THEN == connector ) {
 800271c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002720:	4a0b      	ldr	r2, [pc, #44]	; (8002750 <qFIS_InferenceAntecedent+0xdc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d106      	bne.n	8002734 <qFIS_InferenceAntecedent+0xc0>
            f->inferenceState = &qFIS_InferenceReachEnd;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <qFIS_InferenceAntecedent+0xe0>)
 800272a:	621a      	str	r2, [r3, #32]
            i += 2u;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	3302      	adds	r3, #2
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	e001      	b.n	8002738 <qFIS_InferenceAntecedent+0xc4>
        }
        else {
            i = QFIS_INFERENCE_ERROR;
 8002734:	2300      	movs	r3, #0
 8002736:	603b      	str	r3, [r7, #0]
        }
    }

    return i;
 8002738:	683b      	ldr	r3, [r7, #0]
}
 800273a:	4618      	mov	r0, r3
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	bd90      	pop	{r4, r7, pc}
 8002742:	bf00      	nop
 8002744:	ffff8002 	.word	0xffff8002
 8002748:	ffff8003 	.word	0xffff8003
 800274c:	08002675 	.word	0x08002675
 8002750:	ffff8004 	.word	0xffff8004
 8002754:	08002759 	.word	0x08002759

08002758 <qFIS_InferenceReachEnd>:
/*============================================================================*/
static size_t qFIS_InferenceReachEnd( struct _qFIS_s * const f,
                                      size_t i )
{
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
    int16_t  connector;

    connector = ( f->nOutputs > 1u )? f->rules[ i + 2u ] : -1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	2b01      	cmp	r3, #1
 8002768:	d908      	bls.n	800277c <qFIS_InferenceReachEnd+0x24>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	3302      	adds	r3, #2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800277a:	e001      	b.n	8002780 <qFIS_InferenceReachEnd+0x28>
 800277c:	f04f 33ff 	mov.w	r3, #4294967295
 8002780:	81fb      	strh	r3, [r7, #14]
    i += 2u;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	3302      	adds	r3, #2
 8002786:	603b      	str	r3, [r7, #0]
    if ( _QFIS_AND != connector ) {
 8002788:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800278c:	4a23      	ldr	r2, [pc, #140]	; (800281c <qFIS_InferenceReachEnd+0xc4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d03f      	beq.n	8002812 <qFIS_InferenceReachEnd+0xba>
        f->inferenceState = &qFIS_InferenceAntecedent;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a22      	ldr	r2, [pc, #136]	; (8002820 <qFIS_InferenceReachEnd+0xc8>)
 8002796:	621a      	str	r2, [r3, #32]
        f->lastConnector = -1;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800279e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        f->wi[ f->ruleCount ] = f->rStrength;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80027b2:	601a      	str	r2, [r3, #0]
        if ( NULL != f->ruleWeight ) {
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01e      	beq.n	80027fa <qFIS_InferenceReachEnd+0xa2>
            f->wi[ f->ruleCount ] *= qFIS_Bound( f->ruleWeight[ f->ruleCount ], 0.0f, 1.0f );
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80027ce:	f04f 0100 	mov.w	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f001 fb43 	bl	8003e5e <qFIS_Bound>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	6819      	ldr	r1, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	18d4      	adds	r4, r2, r3
 80027f2:	f7fe fa61 	bl	8000cb8 <__aeabi_fmul>
 80027f6:	4603      	mov	r3, r0
 80027f8:	6023      	str	r3, [r4, #0]
        }
        f->rStrength = 0.0f;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	659a      	str	r2, [r3, #88]	; 0x58
        ++f->ruleCount;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	655a      	str	r2, [r3, #84]	; 0x54
        --i;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	3b01      	subs	r3, #1
 8002810:	603b      	str	r3, [r7, #0]
    }

    return i;
 8002812:	683b      	ldr	r3, [r7, #0]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	bd90      	pop	{r4, r7, pc}
 800281c:	ffff8002 	.word	0xffff8002
 8002820:	08002675 	.word	0x08002675

08002824 <qFIS_AggregationFindConsequent>:
/*============================================================================*/
static size_t qFIS_AggregationFindConsequent( struct _qFIS_s * const f,
                                              size_t i )
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
    while ( _QFIS_THEN != f->rules[ i++ ] ) {}
 800282e:	bf00      	nop
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	1c59      	adds	r1, r3, #1
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002842:	4a07      	ldr	r2, [pc, #28]	; (8002860 <qFIS_AggregationFindConsequent+0x3c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d1f3      	bne.n	8002830 <qFIS_AggregationFindConsequent+0xc>
    f->aggregationState = &qFIS_InferenceConsequent;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a06      	ldr	r2, [pc, #24]	; (8002864 <qFIS_AggregationFindConsequent+0x40>)
 800284c:	625a      	str	r2, [r3, #36]	; 0x24

    return --i;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	3b01      	subs	r3, #1
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	ffff8004 	.word	0xffff8004
 8002864:	08002869 	.word	0x08002869

08002868 <qFIS_InferenceConsequent>:
/*============================================================================*/
static size_t qFIS_InferenceConsequent( struct _qFIS_s * const f,
                                        size_t i )
{
 8002868:	b5b0      	push	{r4, r5, r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
    int16_t outIndex, MFOutIndex, connector;
    uint8_t neg = 0u;
 8002872:	2300      	movs	r3, #0
 8002874:	777b      	strb	r3, [r7, #29]

    outIndex = f->rules[ i ];
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	837b      	strh	r3, [r7, #26]
    MFOutIndex = f->rules[ i + 1u ];
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	3301      	adds	r3, #1
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	83fb      	strh	r3, [r7, #30]
    connector = ( f->nOutputs > 1u )? f->rules[ i + 2u ] : -1;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	2b01      	cmp	r3, #1
 800289a:	d908      	bls.n	80028ae <qFIS_InferenceConsequent+0x46>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	3302      	adds	r3, #2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ac:	e001      	b.n	80028b2 <qFIS_InferenceConsequent+0x4a>
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295
 80028b2:	833b      	strh	r3, [r7, #24]
    if ( MFOutIndex < 0 ) {
 80028b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	da05      	bge.n	80028c8 <qFIS_InferenceConsequent+0x60>
        MFOutIndex = -MFOutIndex;
 80028bc:	8bfb      	ldrh	r3, [r7, #30]
 80028be:	425b      	negs	r3, r3
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	83fb      	strh	r3, [r7, #30]
        neg = 1u;
 80028c4:	2301      	movs	r3, #1
 80028c6:	777b      	strb	r3, [r7, #29]
    }
    MFOutIndex -= 1;
 80028c8:	8bfb      	ldrh	r3, [r7, #30]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	83fb      	strh	r3, [r7, #30]

    if ( f->wi[ f->ruleCount ] > 0.0f ) {
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f04f 0100 	mov.w	r1, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe fba4 	bl	8001030 <__aeabi_fcmpgt>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d07b      	beq.n	80029e6 <qFIS_InferenceConsequent+0x17e>
        qFIS_Output_t *o = &f->output[ outIndex ];
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80028f6:	2134      	movs	r1, #52	; 0x34
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]
        qFIS_MF_t *m = &f->outMF[ MFOutIndex ];
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68d9      	ldr	r1, [r3, #12]
 8002904:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	613b      	str	r3, [r7, #16]

        if ( Mamdani == f->type ) {
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800291a:	2b00      	cmp	r3, #0
 800291c:	d133      	bne.n	8002986 <qFIS_InferenceConsequent+0x11e>
            float v;
            /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
            /*cppcheck-suppress misra-c2012-11.3 */
            v = m->h*m->shape( (qFIS_IO_Base_t*)o, m->points, 1u );
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	68dc      	ldr	r4, [r3, #12]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	6851      	ldr	r1, [r2, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	6978      	ldr	r0, [r7, #20]
 800292e:	4798      	blx	r3
 8002930:	4603      	mov	r3, r0
 8002932:	4619      	mov	r1, r3
 8002934:	4620      	mov	r0, r4
 8002936:	f7fe f9bf 	bl	8000cb8 <__aeabi_fmul>
 800293a:	4603      	mov	r3, r0
 800293c:	60bb      	str	r3, [r7, #8]
            /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
            /*cppcheck-suppress misra-c2012-12.1 */
            v = ( 1u == neg )? ( 1.0f - v ) : v;
 800293e:	7f7b      	ldrb	r3, [r7, #29]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d106      	bne.n	8002952 <qFIS_InferenceConsequent+0xea>
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800294a:	f7fe f8ab 	bl	8000aa4 <__aeabi_fsub>
 800294e:	4603      	mov	r3, r0
 8002950:	e000      	b.n	8002954 <qFIS_InferenceConsequent+0xec>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	60bb      	str	r3, [r7, #8]
            o->y = f->aggregate( o->y, f->implicate( f->wi[ f->ruleCount ], v ) );
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69dc      	ldr	r4, [r3, #28]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	6a1d      	ldr	r5, [r3, #32]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800296a:	0092      	lsls	r2, r2, #2
 800296c:	440a      	add	r2, r1
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	68b9      	ldr	r1, [r7, #8]
 8002972:	4610      	mov	r0, r2
 8002974:	4798      	blx	r3
 8002976:	4603      	mov	r3, r0
 8002978:	4619      	mov	r1, r3
 800297a:	4628      	mov	r0, r5
 800297c:	47a0      	blx	r4
 800297e:	4602      	mov	r2, r0
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	621a      	str	r2, [r3, #32]
 8002984:	e02f      	b.n	80029e6 <qFIS_InferenceConsequent+0x17e>
        }
        else { /* Sugeno and Tsukamoto*/
            float zi;
            /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
            /*cppcheck-suppress misra-c2012-11.3 */
            zi = m->shape( (qFIS_IO_Base_t*)f->input, m->points, f->nInputs );
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6810      	ldr	r0, [r2, #0]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	6851      	ldr	r1, [r2, #4]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002996:	4798      	blx	r3
 8002998:	60f8      	str	r0, [r7, #12]
            /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
            o->data[ 0 ] += zi*f->wi[ f->ruleCount ];
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68f9      	ldr	r1, [r7, #12]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe f982 	bl	8000cb8 <__aeabi_fmul>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4619      	mov	r1, r3
 80029b8:	4620      	mov	r0, r4
 80029ba:	f7fe f875 	bl	8000aa8 <__addsf3>
 80029be:	4603      	mov	r3, r0
 80029c0:	461a      	mov	r2, r3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] += f->wi[ f->ruleCount ];
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4619      	mov	r1, r3
 80029da:	f7fe f865 	bl	8000aa8 <__addsf3>
 80029de:	4603      	mov	r3, r0
 80029e0:	461a      	mov	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	629a      	str	r2, [r3, #40]	; 0x28
        }
    }

    i += 2u;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	3302      	adds	r3, #2
 80029ea:	603b      	str	r3, [r7, #0]
    if ( _QFIS_AND != connector ) {
 80029ec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80029f0:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <qFIS_InferenceConsequent+0x1b0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00a      	beq.n	8002a0c <qFIS_InferenceConsequent+0x1a4>
        f->aggregationState = &qFIS_AggregationFindConsequent;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a08      	ldr	r2, [pc, #32]	; (8002a1c <qFIS_InferenceConsequent+0x1b4>)
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24
        ++f->ruleCount;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
        --i;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	603b      	str	r3, [r7, #0]
    }

    return i;
 8002a0c:	683b      	ldr	r3, [r7, #0]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bdb0      	pop	{r4, r5, r7, pc}
 8002a16:	bf00      	nop
 8002a18:	ffff8002 	.word	0xffff8002
 8002a1c:	08002825 	.word	0x08002825

08002a20 <qFIS_Aggregate>:
/*============================================================================*/
static void qFIS_Aggregate( qFIS_t * const f )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
    if ( NULL != f ) {
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d02d      	beq.n	8002a8a <qFIS_Aggregate+0x6a>
        if ( QFIS_RULES_BEGIN == f->rules[ 0 ] ) {
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a36:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002a3a:	d126      	bne.n	8002a8a <qFIS_Aggregate+0x6a>
            size_t i = 1u;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]

            f->aggregationState = &qFIS_AggregationFindConsequent;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a14      	ldr	r2, [pc, #80]	; (8002a94 <qFIS_Aggregate+0x74>)
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24
            f->ruleCount = 0u;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	655a      	str	r2, [r3, #84]	; 0x54
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 8002a4c:	e00b      	b.n	8002a66 <qFIS_Aggregate+0x46>
                i = f->aggregationState( f, i );
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	68f9      	ldr	r1, [r7, #12]
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
 8002a58:	60f8      	str	r0, [r7, #12]
                if ( QFIS_INFERENCE_ERROR == i ) {
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <qFIS_Aggregate+0x68>
                    break;
                }
                ++i;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3301      	adds	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	4413      	add	r3, r2
 8002a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a74:	4a08      	ldr	r2, [pc, #32]	; (8002a98 <qFIS_Aggregate+0x78>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d007      	beq.n	8002a8a <qFIS_Aggregate+0x6a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d3e3      	bcc.n	8002a4e <qFIS_Aggregate+0x2e>
            }
        }
    }
}
 8002a86:	e000      	b.n	8002a8a <qFIS_Aggregate+0x6a>
                    break;
 8002a88:	bf00      	nop
}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	08002825 	.word	0x08002825
 8002a98:	ffff8001 	.word	0xffff8001

08002a9c <qFIS_DeFuzz_Centroid>:
/*============================================================================*/
static float qFIS_DeFuzz_Centroid( qFIS_Output_t * const o,
                                   const qFIS_DeFuzzState_t stage )
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d004      	beq.n	8002abe <qFIS_DeFuzz_Centroid+0x22>
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d02b      	beq.n	8002b10 <qFIS_DeFuzz_Centroid+0x74>
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d020      	beq.n	8002afe <qFIS_DeFuzz_Centroid+0x62>
            break;
        case DeFuzz_End:
            d = o->data[ 0 ]/o->data[ 1 ]; /*sum(x*y)/sum(y)*/
            break;
        default:
            break;
 8002abc:	e033      	b.n	8002b26 <qFIS_DeFuzz_Centroid+0x8a>
            o->data[ 0 ] += o->x*o->y;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69da      	ldr	r2, [r3, #28]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	4619      	mov	r1, r3
 8002acc:	4610      	mov	r0, r2
 8002ace:	f7fe f8f3 	bl	8000cb8 <__aeabi_fmul>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	f7fd ffe6 	bl	8000aa8 <__addsf3>
 8002adc:	4603      	mov	r3, r0
 8002ade:	461a      	mov	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] += o->y;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	4619      	mov	r1, r3
 8002aee:	4610      	mov	r0, r2
 8002af0:	f7fd ffda 	bl	8000aa8 <__addsf3>
 8002af4:	4603      	mov	r3, r0
 8002af6:	461a      	mov	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 8002afc:	e013      	b.n	8002b26 <qFIS_DeFuzz_Centroid+0x8a>
            o->data[ 0 ] = 0.0f; /*store sum(y)*/
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] = 0.0f; /*store sum(x*y)*/
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 8002b0e:	e00a      	b.n	8002b26 <qFIS_DeFuzz_Centroid+0x8a>
            d = o->data[ 0 ]/o->data[ 1 ]; /*sum(x*y)/sum(y)*/
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	f7fe f980 	bl	8000e20 <__aeabi_fdiv>
 8002b20:	4603      	mov	r3, r0
 8002b22:	60fb      	str	r3, [r7, #12]
            break;
 8002b24:	bf00      	nop
    }

    return d;
 8002b26:	68fb      	ldr	r3, [r7, #12]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd90      	pop	{r4, r7, pc}

08002b30 <qFIS_DeFuzz_WtAverage>:
    return d;
}
/*============================================================================*/
static float qFIS_DeFuzz_WtAverage( qFIS_Output_t * const o,
                                    const qFIS_DeFuzzState_t stage )
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]

    if ( DeFuzz_End == stage ) {
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d109      	bne.n	8002b5c <qFIS_DeFuzz_WtAverage+0x2c>
        d = o->data[ 0 ]/o->data[ 1 ];
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	4619      	mov	r1, r3
 8002b52:	4610      	mov	r0, r2
 8002b54:	f7fe f964 	bl	8000e20 <__aeabi_fdiv>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	60fb      	str	r3, [r7, #12]
    }

    return d;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <qFIS_DeFuzzify>:

    return d;
}
/*============================================================================*/
int qFIS_DeFuzzify( qFIS_t * const f )
{
 8002b66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b68:	b087      	sub	sp, #28
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]

    if ( NULL != f ) {
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8136 	beq.w	8002de6 <qFIS_DeFuzzify+0x280>
        size_t i;

        for ( i = 0; i < f->nOutputs ; ++i ) {
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	e00e      	b.n	8002b9e <qFIS_DeFuzzify+0x38>
            f->deFuzz( &f->output[ i ] , DeFuzz_Init );
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6851      	ldr	r1, [r2, #4]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	2034      	movs	r0, #52	; 0x34
 8002b8c:	fb00 f202 	mul.w	r2, r0, r2
 8002b90:	440a      	add	r2, r1
 8002b92:	2100      	movs	r1, #0
 8002b94:	4610      	mov	r0, r2
 8002b96:	4798      	blx	r3
        for ( i = 0; i < f->nOutputs ; ++i ) {
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d3eb      	bcc.n	8002b80 <qFIS_DeFuzzify+0x1a>
        }

        if ( Mamdani == f->type  ) {
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f040 809b 	bne.w	8002cea <qFIS_DeFuzzify+0x184>
            size_t k;

            for ( k = 0u ; k < f->nPoints ; ++k ) {
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	e090      	b.n	8002cdc <qFIS_DeFuzzify+0x176>
                for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	e039      	b.n	8002c34 <qFIS_DeFuzzify+0xce>
                    f->output[ i ].y = 0.0f;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2134      	movs	r1, #52	; 0x34
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	621a      	str	r2, [r3, #32]
                    f->output[ i ].x = qFIS_GetNextX( f->output[ i ].b.min,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2134      	movs	r1, #52	; 0x34
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	6818      	ldr	r0, [r3, #0]
                                                      f->output[ i ].res,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2134      	movs	r1, #52	; 0x34
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
                    f->output[ i ].x = qFIS_GetNextX( f->output[ i ].b.min,
 8002bf2:	699d      	ldr	r5, [r3, #24]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2134      	movs	r1, #52	; 0x34
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	18d4      	adds	r4, r2, r3
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4629      	mov	r1, r5
 8002c06:	f000 f951 	bl	8002eac <qFIS_GetNextX>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	61e3      	str	r3, [r4, #28]
                                                      k );
                    f->output[ i ].b.value = f->output[ i ].x;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2134      	movs	r1, #52	; 0x34
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	441a      	add	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6859      	ldr	r1, [r3, #4]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2034      	movs	r0, #52	; 0x34
 8002c24:	fb00 f303 	mul.w	r3, r0, r3
 8002c28:	440b      	add	r3, r1
 8002c2a:	69d2      	ldr	r2, [r2, #28]
 8002c2c:	609a      	str	r2, [r3, #8]
                for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	3301      	adds	r3, #1
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d3c0      	bcc.n	8002bc0 <qFIS_DeFuzzify+0x5a>
                }
                qFIS_Aggregate( f );
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff feee 	bl	8002a20 <qFIS_Aggregate>
                for ( i = 0; i < f->nOutputs ; ++i ) {
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	e040      	b.n	8002ccc <qFIS_DeFuzzify+0x166>
                    f->deFuzz( &f->output[ i ] , DeFuzz_Compute );
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6851      	ldr	r1, [r2, #4]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	2034      	movs	r0, #52	; 0x34
 8002c56:	fb00 f202 	mul.w	r2, r0, r2
 8002c5a:	440a      	add	r2, r1
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4798      	blx	r3
                    if ( NULL != f->output[ i ].xag ) { /*store aggregated*/
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2134      	movs	r1, #52	; 0x34
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d027      	beq.n	8002cc6 <qFIS_DeFuzzify+0x160>
                        f->output[ i ].xag[ k ] = f->output[ i ].x;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2134      	movs	r1, #52	; 0x34
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	441a      	add	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6859      	ldr	r1, [r3, #4]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2034      	movs	r0, #52	; 0x34
 8002c8c:	fb00 f303 	mul.w	r3, r0, r3
 8002c90:	440b      	add	r3, r1
 8002c92:	6919      	ldr	r1, [r3, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	69d2      	ldr	r2, [r2, #28]
 8002c9c:	601a      	str	r2, [r3, #0]
                        f->output[ i ].yag[ k ] = f->output[ i ].y;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2134      	movs	r1, #52	; 0x34
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	441a      	add	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2034      	movs	r0, #52	; 0x34
 8002cb4:	fb00 f303 	mul.w	r3, r0, r3
 8002cb8:	440b      	add	r3, r1
 8002cba:	6959      	ldr	r1, [r3, #20]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	6a12      	ldr	r2, [r2, #32]
 8002cc4:	601a      	str	r2, [r3, #0]
                for ( i = 0; i < f->nOutputs ; ++i ) {
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d3b9      	bcc.n	8002c4a <qFIS_DeFuzzify+0xe4>
            for ( k = 0u ; k < f->nPoints ; ++k ) {
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	f4ff af69 	bcc.w	8002bba <qFIS_DeFuzzify+0x54>
 8002ce8:	e038      	b.n	8002d5c <qFIS_DeFuzzify+0x1f6>
                    }
                }
            }
        }
        else { /*Sugeno and Tsukamoto systems*/
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e016      	b.n	8002d1e <qFIS_DeFuzzify+0x1b8>
                f->output[ i ].data[ 0 ] = 0.0f; /*store sum wi*/
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2134      	movs	r1, #52	; 0x34
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24
                f->output[ i ].data[ 1 ] = 0.0f; /*store sum zi*wi*/
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2134      	movs	r1, #52	; 0x34
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d3e3      	bcc.n	8002cf0 <qFIS_DeFuzzify+0x18a>
            }
            qFIS_Aggregate( f );
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff fe79 	bl	8002a20 <qFIS_Aggregate>
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	e00e      	b.n	8002d52 <qFIS_DeFuzzify+0x1ec>
                f->deFuzz( &f->output[ i ] , DeFuzz_Compute );
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6851      	ldr	r1, [r2, #4]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	2034      	movs	r0, #52	; 0x34
 8002d40:	fb00 f202 	mul.w	r2, r0, r2
 8002d44:	440a      	add	r2, r1
 8002d46:	2101      	movs	r1, #1
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4798      	blx	r3
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d3eb      	bcc.n	8002d34 <qFIS_DeFuzzify+0x1ce>
            }
        }

        for ( i = 0; i < f->nOutputs ; ++i ) {
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	e03c      	b.n	8002ddc <qFIS_DeFuzzify+0x276>
            f->output[ i ].b.value = f->deFuzz( &f->output[ i ] , DeFuzz_End );
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6851      	ldr	r1, [r2, #4]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	2034      	movs	r0, #52	; 0x34
 8002d6e:	fb00 f202 	mul.w	r2, r0, r2
 8002d72:	188d      	adds	r5, r1, r2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6851      	ldr	r1, [r2, #4]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	2034      	movs	r0, #52	; 0x34
 8002d7c:	fb00 f202 	mul.w	r2, r0, r2
 8002d80:	188c      	adds	r4, r1, r2
 8002d82:	2102      	movs	r1, #2
 8002d84:	4628      	mov	r0, r5
 8002d86:	4798      	blx	r3
 8002d88:	4603      	mov	r3, r0
 8002d8a:	60a3      	str	r3, [r4, #8]
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2134      	movs	r1, #52	; 0x34
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	6898      	ldr	r0, [r3, #8]
                                                 f->output[ i ].b.min,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2134      	movs	r1, #52	; 0x34
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 8002daa:	681d      	ldr	r5, [r3, #0]
                                                 f->output[ i ].b.max );
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2134      	movs	r1, #52	; 0x34
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 8002dba:	685e      	ldr	r6, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2134      	movs	r1, #52	; 0x34
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	18d4      	adds	r4, r2, r3
 8002dca:	4632      	mov	r2, r6
 8002dcc:	4629      	mov	r1, r5
 8002dce:	f001 f846 	bl	8003e5e <qFIS_Bound>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	60a3      	str	r3, [r4, #8]
        for ( i = 0; i < f->nOutputs ; ++i ) {
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d3bd      	bcc.n	8002d62 <qFIS_DeFuzzify+0x1fc>
        }
    }

    return retVal;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	371c      	adds	r7, #28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002df0 <qFIS_Inference>:

    return retVal;
}
/*============================================================================*/
int qFIS_Inference( qFIS_t * const f )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]

    if ( NULL != f  ) {
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d04a      	beq.n	8002e98 <qFIS_Inference+0xa8>
        size_t i = 0u;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]

        if ( QFIS_RULES_BEGIN == f->rules[ 0 ] ) {
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e0e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002e12:	d12f      	bne.n	8002e74 <qFIS_Inference+0x84>
            f->inferenceState = &qFIS_InferenceAntecedent;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a23      	ldr	r2, [pc, #140]	; (8002ea4 <qFIS_Inference+0xb4>)
 8002e18:	621a      	str	r2, [r3, #32]
            f->rStrength = 0.0f;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	659a      	str	r2, [r3, #88]	; 0x58
            f->lastConnector = -1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            f->ruleCount = 0u;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	655a      	str	r2, [r3, #84]	; 0x54
            i = 1u;
 8002e32:	2301      	movs	r3, #1
 8002e34:	60bb      	str	r3, [r7, #8]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 8002e36:	e00b      	b.n	8002e50 <qFIS_Inference+0x60>
                i = f->inferenceState( f, i );
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	4798      	blx	r3
 8002e42:	60b8      	str	r0, [r7, #8]
                if ( QFIS_INFERENCE_ERROR == i ) {
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d013      	beq.n	8002e72 <qFIS_Inference+0x82>
                    break;
                }
                ++i;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	60bb      	str	r3, [r7, #8]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e5e:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <qFIS_Inference+0xb8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d007      	beq.n	8002e74 <qFIS_Inference+0x84>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d3e3      	bcc.n	8002e38 <qFIS_Inference+0x48>
 8002e70:	e000      	b.n	8002e74 <qFIS_Inference+0x84>
                    break;
 8002e72:	bf00      	nop
            }
        }
        if ( ( _QFIS_RULES_END == f->rules[ i ] ) && ( f->ruleCount == f->nRules) ) {
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e82:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <qFIS_Inference+0xb8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d107      	bne.n	8002e98 <qFIS_Inference+0xa8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d101      	bne.n	8002e98 <qFIS_Inference+0xa8>
            retVal = 1;
 8002e94:	2301      	movs	r3, #1
 8002e96:	60fb      	str	r3, [r7, #12]
        }
    }

    return retVal;
 8002e98:	68fb      	ldr	r3, [r7, #12]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	08002675 	.word	0x08002675
 8002ea8:	ffff8001 	.word	0xffff8001

08002eac <qFIS_GetNextX>:
/*============================================================================*/
static float qFIS_GetNextX( const float init,
                            const float res,
                            const size_t i )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
    /*cstat -CERT-FLP36-C*/
    return init + ( ( (float)i + 0.5f )*res );
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7fd fea5 	bl	8000c08 <__aeabi_ui2f>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fd fdef 	bl	8000aa8 <__addsf3>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd fef2 	bl	8000cb8 <__aeabi_fmul>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	68f9      	ldr	r1, [r7, #12]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd fde5 	bl	8000aa8 <__addsf3>
 8002ede:	4603      	mov	r3, r0
    /*cstat +CERT-FLP36-C*/
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <qFIS_TriMF>:
/*============================================================================*/
static float qFIS_TriMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 8002ee8:	b5b0      	push	{r4, r5, r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
    float a, b, c, tmp;
    float x = in[ 0 ].value;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	61bb      	str	r3, [r7, #24]
    tmp = qFIS_Min( ( x - a )/( b - a ) , ( c - x )/( c - b ) );
 8002f0c:	6a39      	ldr	r1, [r7, #32]
 8002f0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f10:	f7fd fdc8 	bl	8000aa4 <__aeabi_fsub>
 8002f14:	4603      	mov	r3, r0
 8002f16:	461c      	mov	r4, r3
 8002f18:	6a39      	ldr	r1, [r7, #32]
 8002f1a:	69f8      	ldr	r0, [r7, #28]
 8002f1c:	f7fd fdc2 	bl	8000aa4 <__aeabi_fsub>
 8002f20:	4603      	mov	r3, r0
 8002f22:	4619      	mov	r1, r3
 8002f24:	4620      	mov	r0, r4
 8002f26:	f7fd ff7b 	bl	8000e20 <__aeabi_fdiv>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	461c      	mov	r4, r3
 8002f2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f30:	69b8      	ldr	r0, [r7, #24]
 8002f32:	f7fd fdb7 	bl	8000aa4 <__aeabi_fsub>
 8002f36:	4603      	mov	r3, r0
 8002f38:	461d      	mov	r5, r3
 8002f3a:	69f9      	ldr	r1, [r7, #28]
 8002f3c:	69b8      	ldr	r0, [r7, #24]
 8002f3e:	f7fd fdb1 	bl	8000aa4 <__aeabi_fsub>
 8002f42:	4603      	mov	r3, r0
 8002f44:	4619      	mov	r1, r3
 8002f46:	4628      	mov	r0, r5
 8002f48:	f7fd ff6a 	bl	8000e20 <__aeabi_fdiv>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4620      	mov	r0, r4
 8002f52:	f000 ff01 	bl	8003d58 <qFIS_Min>
 8002f56:	6178      	str	r0, [r7, #20]

    return qFIS_Max( tmp , 0.0f );
 8002f58:	f04f 0100 	mov.w	r1, #0
 8002f5c:	6978      	ldr	r0, [r7, #20]
 8002f5e:	f000 ff16 	bl	8003d8e <qFIS_Max>
 8002f62:	4603      	mov	r3, r0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3728      	adds	r7, #40	; 0x28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bdb0      	pop	{r4, r5, r7, pc}

08002f6c <qFIS_TrapMF>:
/*============================================================================*/
static float qFIS_TrapMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8002f6c:	b590      	push	{r4, r7, lr}
 8002f6e:	b08b      	sub	sp, #44	; 0x2c
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
    float a, b, c, d, tmp;
    float x = in[ 0 ].value;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	61bb      	str	r3, [r7, #24]
    d = p[ 3 ];
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	617b      	str	r3, [r7, #20]
    tmp = qFIS_Min( ( x - a )/( b - a ) , 1.0f );
 8002f96:	6a39      	ldr	r1, [r7, #32]
 8002f98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f9a:	f7fd fd83 	bl	8000aa4 <__aeabi_fsub>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	461c      	mov	r4, r3
 8002fa2:	6a39      	ldr	r1, [r7, #32]
 8002fa4:	69f8      	ldr	r0, [r7, #28]
 8002fa6:	f7fd fd7d 	bl	8000aa4 <__aeabi_fsub>
 8002faa:	4603      	mov	r3, r0
 8002fac:	4619      	mov	r1, r3
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f7fd ff36 	bl	8000e20 <__aeabi_fdiv>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fecc 	bl	8003d58 <qFIS_Min>
 8002fc0:	6138      	str	r0, [r7, #16]
    tmp = qFIS_Min( tmp, ( d - x )/( d - c ) ) ;
 8002fc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fc4:	6978      	ldr	r0, [r7, #20]
 8002fc6:	f7fd fd6d 	bl	8000aa4 <__aeabi_fsub>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	461c      	mov	r4, r3
 8002fce:	69b9      	ldr	r1, [r7, #24]
 8002fd0:	6978      	ldr	r0, [r7, #20]
 8002fd2:	f7fd fd67 	bl	8000aa4 <__aeabi_fsub>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f7fd ff20 	bl	8000e20 <__aeabi_fdiv>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6938      	ldr	r0, [r7, #16]
 8002fe6:	f000 feb7 	bl	8003d58 <qFIS_Min>
 8002fea:	6138      	str	r0, [r7, #16]

    return qFIS_Max( tmp , 0.0f );
 8002fec:	f04f 0100 	mov.w	r1, #0
 8002ff0:	6938      	ldr	r0, [r7, #16]
 8002ff2:	f000 fecc 	bl	8003d8e <qFIS_Max>
 8002ff6:	4603      	mov	r3, r0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	372c      	adds	r7, #44	; 0x2c
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd90      	pop	{r4, r7, pc}

08003000 <qFIS_GBellMF>:
/*============================================================================*/
static float qFIS_GBellMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b089      	sub	sp, #36	; 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
    float a, b, c;
    float x = in[ 0 ].value;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	617b      	str	r3, [r7, #20]
    c = p[ 2 ];
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	613b      	str	r3, [r7, #16]
    
    return ( 1.0f/( 1.0f + QLIB_POW( QLIB_ABS( ( x - c )/a ) , 2.0f*b ) ) );
 8003024:	6939      	ldr	r1, [r7, #16]
 8003026:	69f8      	ldr	r0, [r7, #28]
 8003028:	f7fd fd3c 	bl	8000aa4 <__aeabi_fsub>
 800302c:	4603      	mov	r3, r0
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd fef5 	bl	8000e20 <__aeabi_fdiv>
 8003036:	4603      	mov	r3, r0
 8003038:	4618      	mov	r0, r3
 800303a:	f7fe fde3 	bl	8001c04 <qFFMath_Abs>
 800303e:	4604      	mov	r4, r0
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	4619      	mov	r1, r3
 8003044:	4618      	mov	r0, r3
 8003046:	f7fd fd2f 	bl	8000aa8 <__addsf3>
 800304a:	4603      	mov	r3, r0
 800304c:	4619      	mov	r1, r3
 800304e:	4620      	mov	r0, r4
 8003050:	f7fe ff8a 	bl	8001f68 <qFFMath_Pow>
 8003054:	4603      	mov	r3, r0
 8003056:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fd24 	bl	8000aa8 <__addsf3>
 8003060:	4603      	mov	r3, r0
 8003062:	4619      	mov	r1, r3
 8003064:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003068:	f7fd feda 	bl	8000e20 <__aeabi_fdiv>
 800306c:	4603      	mov	r3, r0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3724      	adds	r7, #36	; 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd90      	pop	{r4, r7, pc}

08003076 <qFIS_GaussMF>:
/*============================================================================*/
static float qFIS_GaussMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b088      	sub	sp, #32
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
    float a, c, tmp;
    float x = in[ 0 ].value;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	617b      	str	r3, [r7, #20]
    tmp = ( x - c )/a;
 8003094:	6979      	ldr	r1, [r7, #20]
 8003096:	69f8      	ldr	r0, [r7, #28]
 8003098:	f7fd fd04 	bl	8000aa4 <__aeabi_fsub>
 800309c:	4603      	mov	r3, r0
 800309e:	69b9      	ldr	r1, [r7, #24]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fd febd 	bl	8000e20 <__aeabi_fdiv>
 80030a6:	4603      	mov	r3, r0
 80030a8:	613b      	str	r3, [r7, #16]

    return QLIB_EXP( -0.5f*tmp*tmp );
 80030aa:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 80030ae:	6938      	ldr	r0, [r7, #16]
 80030b0:	f7fd fe02 	bl	8000cb8 <__aeabi_fmul>
 80030b4:	4603      	mov	r3, r0
 80030b6:	6939      	ldr	r1, [r7, #16]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fd fdfd 	bl	8000cb8 <__aeabi_fmul>
 80030be:	4603      	mov	r3, r0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe ff29 	bl	8001f18 <qFFMath_Exp>
 80030c6:	4603      	mov	r3, r0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3720      	adds	r7, #32
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <qFIS_Gauss2MF>:
/*============================================================================*/
static float qFIS_Gauss2MF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08a      	sub	sp, #40	; 0x28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
    float c1, c2, f1, f2;
    float x = in[ 0 ].value;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24

    c1 = p[ 1 ];
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	623b      	str	r3, [r7, #32]
    c2 = p[ 3 ];
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	61fb      	str	r3, [r7, #28]
    f1 = ( x <= c1 ) ? qFIS_GaussMF( in , p, n ) : 1.0f;
 80030ee:	6a39      	ldr	r1, [r7, #32]
 80030f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030f2:	f7fd ff89 	bl	8001008 <__aeabi_fcmple>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d006      	beq.n	800310a <qFIS_Gauss2MF+0x3a>
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f7ff ffb8 	bl	8003076 <qFIS_GaussMF>
 8003106:	4603      	mov	r3, r0
 8003108:	e001      	b.n	800310e <qFIS_Gauss2MF+0x3e>
 800310a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800310e:	61bb      	str	r3, [r7, #24]
    f2 = ( x <= c2 ) ? qFIS_GaussMF( in , &p[ 2 ], n ) : 1.0f;
 8003110:	69f9      	ldr	r1, [r7, #28]
 8003112:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003114:	f7fd ff78 	bl	8001008 <__aeabi_fcmple>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <qFIS_Gauss2MF+0x60>
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	3308      	adds	r3, #8
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	4619      	mov	r1, r3
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7ff ffa5 	bl	8003076 <qFIS_GaussMF>
 800312c:	4603      	mov	r3, r0
 800312e:	e001      	b.n	8003134 <qFIS_Gauss2MF+0x64>
 8003130:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003134:	617b      	str	r3, [r7, #20]

    return f1*f2;
 8003136:	6979      	ldr	r1, [r7, #20]
 8003138:	69b8      	ldr	r0, [r7, #24]
 800313a:	f7fd fdbd 	bl	8000cb8 <__aeabi_fmul>
 800313e:	4603      	mov	r3, r0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3728      	adds	r7, #40	; 0x28
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <qFIS_SigMF>:
/*============================================================================*/
static float qFIS_SigMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b089      	sub	sp, #36	; 0x24
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
    float a, b;
    float x = in[ 0 ].value;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	617b      	str	r3, [r7, #20]

    return 1.0f/( 1.0f + QLIB_EXP( -a*( x - b ) ) );
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800316c:	6979      	ldr	r1, [r7, #20]
 800316e:	69f8      	ldr	r0, [r7, #28]
 8003170:	f7fd fc98 	bl	8000aa4 <__aeabi_fsub>
 8003174:	4603      	mov	r3, r0
 8003176:	4619      	mov	r1, r3
 8003178:	4620      	mov	r0, r4
 800317a:	f7fd fd9d 	bl	8000cb8 <__aeabi_fmul>
 800317e:	4603      	mov	r3, r0
 8003180:	4618      	mov	r0, r3
 8003182:	f7fe fec9 	bl	8001f18 <qFFMath_Exp>
 8003186:	4603      	mov	r3, r0
 8003188:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800318c:	4618      	mov	r0, r3
 800318e:	f7fd fc8b 	bl	8000aa8 <__addsf3>
 8003192:	4603      	mov	r3, r0
 8003194:	4619      	mov	r1, r3
 8003196:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800319a:	f7fd fe41 	bl	8000e20 <__aeabi_fdiv>
 800319e:	4603      	mov	r3, r0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3724      	adds	r7, #36	; 0x24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd90      	pop	{r4, r7, pc}

080031a8 <qFIS_TSigMF>:
/*============================================================================*/
static float qFIS_TSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08a      	sub	sp, #40	; 0x28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	623b      	str	r3, [r7, #32]
    float min = in[ 0 ].min;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	61fb      	str	r3, [r7, #28]
    float max = in[ 0 ].max;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ]; /*slope*/
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	617b      	str	r3, [r7, #20]
    b = p[ 1 ]; /*inflection*/
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	613b      	str	r3, [r7, #16]
    if ( qFMathEx_Equal( x, 1.0f ) ) {
 80031d2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80031d6:	6a38      	ldr	r0, [r7, #32]
 80031d8:	f000 feab 	bl	8003f32 <qFMathEx_Equal>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00d      	beq.n	80031fe <qFIS_TSigMF+0x56>
        if ( a >= 0.0f ) {
 80031e2:	f04f 0100 	mov.w	r1, #0
 80031e6:	6978      	ldr	r0, [r7, #20]
 80031e8:	f7fd ff18 	bl	800101c <__aeabi_fcmpge>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <qFIS_TSigMF+0x50>
            y = max;
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
 80031f6:	e033      	b.n	8003260 <qFIS_TSigMF+0xb8>
        }
        else {
            y = min;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
 80031fc:	e030      	b.n	8003260 <qFIS_TSigMF+0xb8>
        }
    }
    else if ( qFMathEx_Equal( x, 0.0f ) ) {
 80031fe:	f04f 0100 	mov.w	r1, #0
 8003202:	6a38      	ldr	r0, [r7, #32]
 8003204:	f000 fe95 	bl	8003f32 <qFMathEx_Equal>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00d      	beq.n	800322a <qFIS_TSigMF+0x82>
        if ( a >= 0.0f ) {
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	6978      	ldr	r0, [r7, #20]
 8003214:	f7fd ff02 	bl	800101c <__aeabi_fcmpge>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <qFIS_TSigMF+0x7c>
            y = min;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
 8003222:	e01d      	b.n	8003260 <qFIS_TSigMF+0xb8>
        }
        else {
            y = max;
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
 8003228:	e01a      	b.n	8003260 <qFIS_TSigMF+0xb8>
        }
    }
    else {
        /*cstat -MISRAC2012-Dir-4.11_a*/
        y = b - ( QLIB_LOG( ( 1.0f/x ) - 1.0f )/a );
 800322a:	6a39      	ldr	r1, [r7, #32]
 800322c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003230:	f7fd fdf6 	bl	8000e20 <__aeabi_fdiv>
 8003234:	4603      	mov	r3, r0
 8003236:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd fc32 	bl	8000aa4 <__aeabi_fsub>
 8003240:	4603      	mov	r3, r0
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe fe7c 	bl	8001f40 <qFFMath_Log>
 8003248:	4603      	mov	r3, r0
 800324a:	6979      	ldr	r1, [r7, #20]
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd fde7 	bl	8000e20 <__aeabi_fdiv>
 8003252:	4603      	mov	r3, r0
 8003254:	4619      	mov	r1, r3
 8003256:	6938      	ldr	r0, [r7, #16]
 8003258:	f7fd fc24 	bl	8000aa4 <__aeabi_fsub>
 800325c:	4603      	mov	r3, r0
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
        /*cstat +MISRAC2012-Dir-4.11_a*/
    }

    return y;
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003262:	4618      	mov	r0, r3
 8003264:	3728      	adds	r7, #40	; 0x28
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <qFIS_DSigMF>:
/*============================================================================*/
static float qFIS_DSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 800326a:	b590      	push	{r4, r7, lr}
 800326c:	b085      	sub	sp, #20
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n ) - qFIS_SigMF( in , &p[ 2 ], n ) );
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f7ff ff64 	bl	8003148 <qFIS_SigMF>
 8003280:	4604      	mov	r4, r0
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	3308      	adds	r3, #8
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	4619      	mov	r1, r3
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f7ff ff5c 	bl	8003148 <qFIS_SigMF>
 8003290:	4603      	mov	r3, r0
 8003292:	4619      	mov	r1, r3
 8003294:	4620      	mov	r0, r4
 8003296:	f7fd fc05 	bl	8000aa4 <__aeabi_fsub>
 800329a:	4603      	mov	r3, r0
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fcb1 	bl	8001c04 <qFFMath_Abs>
 80032a2:	4603      	mov	r3, r0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd90      	pop	{r4, r7, pc}

080032ac <qFIS_PSigMF>:
/*============================================================================*/
static float qFIS_PSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n )*qFIS_SigMF( in , &p[ 2 ], n ) );
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	68b9      	ldr	r1, [r7, #8]
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f7ff ff43 	bl	8003148 <qFIS_SigMF>
 80032c2:	4604      	mov	r4, r0
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	3308      	adds	r3, #8
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	4619      	mov	r1, r3
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f7ff ff3b 	bl	8003148 <qFIS_SigMF>
 80032d2:	4603      	mov	r3, r0
 80032d4:	4619      	mov	r1, r3
 80032d6:	4620      	mov	r0, r4
 80032d8:	f7fd fcee 	bl	8000cb8 <__aeabi_fmul>
 80032dc:	4603      	mov	r3, r0
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe fc90 	bl	8001c04 <qFFMath_Abs>
 80032e4:	4603      	mov	r3, r0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd90      	pop	{r4, r7, pc}

080032ee <qFIS_SMF>:
/*============================================================================*/
static float qFIS_SMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 80032ee:	b590      	push	{r4, r7, lr}
 80032f0:	b08b      	sub	sp, #44	; 0x2c
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 800330c:	69f9      	ldr	r1, [r7, #28]
 800330e:	6a38      	ldr	r0, [r7, #32]
 8003310:	f7fd fe7a 	bl	8001008 <__aeabi_fcmple>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <qFIS_SMF+0x34>
        y =  0.0f;
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
 8003320:	e081      	b.n	8003426 <qFIS_SMF+0x138>
    }
    else if ( x >= b ) {
 8003322:	69b9      	ldr	r1, [r7, #24]
 8003324:	6a38      	ldr	r0, [r7, #32]
 8003326:	f7fd fe79 	bl	800101c <__aeabi_fcmpge>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <qFIS_SMF+0x4a>
        y = 1.0f;
 8003330:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
 8003336:	e076      	b.n	8003426 <qFIS_SMF+0x138>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 8003338:	69f9      	ldr	r1, [r7, #28]
 800333a:	6a38      	ldr	r0, [r7, #32]
 800333c:	f7fd fe6e 	bl	800101c <__aeabi_fcmpge>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d02f      	beq.n	80033a6 <qFIS_SMF+0xb8>
 8003346:	69b9      	ldr	r1, [r7, #24]
 8003348:	69f8      	ldr	r0, [r7, #28]
 800334a:	f7fd fbad 	bl	8000aa8 <__addsf3>
 800334e:	4603      	mov	r3, r0
 8003350:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003354:	4618      	mov	r0, r3
 8003356:	f7fd fcaf 	bl	8000cb8 <__aeabi_fmul>
 800335a:	4603      	mov	r3, r0
 800335c:	4619      	mov	r1, r3
 800335e:	6a38      	ldr	r0, [r7, #32]
 8003360:	f7fd fe52 	bl	8001008 <__aeabi_fcmple>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01d      	beq.n	80033a6 <qFIS_SMF+0xb8>
        tmp = ( x - a )/( b - a );
 800336a:	69f9      	ldr	r1, [r7, #28]
 800336c:	6a38      	ldr	r0, [r7, #32]
 800336e:	f7fd fb99 	bl	8000aa4 <__aeabi_fsub>
 8003372:	4603      	mov	r3, r0
 8003374:	461c      	mov	r4, r3
 8003376:	69f9      	ldr	r1, [r7, #28]
 8003378:	69b8      	ldr	r0, [r7, #24]
 800337a:	f7fd fb93 	bl	8000aa4 <__aeabi_fsub>
 800337e:	4603      	mov	r3, r0
 8003380:	4619      	mov	r1, r3
 8003382:	4620      	mov	r0, r4
 8003384:	f7fd fd4c 	bl	8000e20 <__aeabi_fdiv>
 8003388:	4603      	mov	r3, r0
 800338a:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	4619      	mov	r1, r3
 8003390:	4618      	mov	r0, r3
 8003392:	f7fd fb89 	bl	8000aa8 <__addsf3>
 8003396:	4603      	mov	r3, r0
 8003398:	4619      	mov	r1, r3
 800339a:	6978      	ldr	r0, [r7, #20]
 800339c:	f7fd fc8c 	bl	8000cb8 <__aeabi_fmul>
 80033a0:	4603      	mov	r3, r0
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
 80033a4:	e03f      	b.n	8003426 <qFIS_SMF+0x138>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 80033a6:	69b9      	ldr	r1, [r7, #24]
 80033a8:	6a38      	ldr	r0, [r7, #32]
 80033aa:	f7fd fe2d 	bl	8001008 <__aeabi_fcmple>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d035      	beq.n	8003420 <qFIS_SMF+0x132>
 80033b4:	69b9      	ldr	r1, [r7, #24]
 80033b6:	69f8      	ldr	r0, [r7, #28]
 80033b8:	f7fd fb76 	bl	8000aa8 <__addsf3>
 80033bc:	4603      	mov	r3, r0
 80033be:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd fc78 	bl	8000cb8 <__aeabi_fmul>
 80033c8:	4603      	mov	r3, r0
 80033ca:	4619      	mov	r1, r3
 80033cc:	6a38      	ldr	r0, [r7, #32]
 80033ce:	f7fd fe25 	bl	800101c <__aeabi_fcmpge>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d023      	beq.n	8003420 <qFIS_SMF+0x132>
        tmp = ( x - b )/( b - a );
 80033d8:	69b9      	ldr	r1, [r7, #24]
 80033da:	6a38      	ldr	r0, [r7, #32]
 80033dc:	f7fd fb62 	bl	8000aa4 <__aeabi_fsub>
 80033e0:	4603      	mov	r3, r0
 80033e2:	461c      	mov	r4, r3
 80033e4:	69f9      	ldr	r1, [r7, #28]
 80033e6:	69b8      	ldr	r0, [r7, #24]
 80033e8:	f7fd fb5c 	bl	8000aa4 <__aeabi_fsub>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4619      	mov	r1, r3
 80033f0:	4620      	mov	r0, r4
 80033f2:	f7fd fd15 	bl	8000e20 <__aeabi_fdiv>
 80033f6:	4603      	mov	r3, r0
 80033f8:	617b      	str	r3, [r7, #20]
        y = ( 1.0f - ( 2.0f*tmp*tmp ) );
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	4619      	mov	r1, r3
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd fb52 	bl	8000aa8 <__addsf3>
 8003404:	4603      	mov	r3, r0
 8003406:	6979      	ldr	r1, [r7, #20]
 8003408:	4618      	mov	r0, r3
 800340a:	f7fd fc55 	bl	8000cb8 <__aeabi_fmul>
 800340e:	4603      	mov	r3, r0
 8003410:	4619      	mov	r1, r3
 8003412:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003416:	f7fd fb45 	bl	8000aa4 <__aeabi_fsub>
 800341a:	4603      	mov	r3, r0
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
 800341e:	e002      	b.n	8003426 <qFIS_SMF+0x138>
    }
    else {
        y = 0.0f;
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003428:	4618      	mov	r0, r3
 800342a:	372c      	adds	r7, #44	; 0x2c
 800342c:	46bd      	mov	sp, r7
 800342e:	bd90      	pop	{r4, r7, pc}

08003430 <qFIS_TSMF>:
/*============================================================================*/
static float qFIS_TSMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b091      	sub	sp, #68	; 0x44
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp = { 0.0f, 0.0f, 0.0f };
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	61bb      	str	r3, [r7, #24]
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	61fb      	str	r3, [r7, #28]

    a = p[ 0 ]; /*start*/
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 8003460:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003462:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003464:	f7fd fb1e 	bl	8000aa4 <__aeabi_fsub>
 8003468:	4603      	mov	r3, r0
 800346a:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 800346c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003472:	f7fd fc21 	bl	8000cb8 <__aeabi_fmul>
 8003476:	4603      	mov	r3, r0
 8003478:	4619      	mov	r1, r3
 800347a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800347c:	f7fd fc1c 	bl	8000cb8 <__aeabi_fmul>
 8003480:	4603      	mov	r3, r0
 8003482:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( x*diff );
 8003484:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003486:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003488:	f7fd fc16 	bl	8000cb8 <__aeabi_fmul>
 800348c:	4603      	mov	r3, r0
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe fbcd 	bl	8001c2e <qFFMath_Sqrt>
 8003494:	4603      	mov	r3, r0
 8003496:	4619      	mov	r1, r3
 8003498:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800349a:	f7fd fb05 	bl	8000aa8 <__addsf3>
 800349e:	4603      	mov	r3, r0
 80034a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 80034a6:	f107 0314 	add.w	r3, r7, #20
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff ff1d 	bl	80032ee <qFIS_SMF>
 80034b4:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( -( x - 1.0f )*diff );
 80034b6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80034ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80034bc:	f7fd faf2 	bl	8000aa4 <__aeabi_fsub>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80034c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd fbf5 	bl	8000cb8 <__aeabi_fmul>
 80034ce:	4603      	mov	r3, r0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe fbac 	bl	8001c2e <qFFMath_Sqrt>
 80034d6:	4603      	mov	r3, r0
 80034d8:	4619      	mov	r1, r3
 80034da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80034dc:	f7fd fae4 	bl	8000aa8 <__addsf3>
 80034e0:	4603      	mov	r3, r0
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 80034e8:	f107 0314 	add.w	r3, r7, #20
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fefc 	bl	80032ee <qFIS_SMF>
 80034f6:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 80034f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80034fc:	f7fd fad2 	bl	8000aa4 <__aeabi_fsub>
 8003500:	4603      	mov	r3, r0
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe fb7e 	bl	8001c04 <qFFMath_Abs>
 8003508:	4604      	mov	r4, r0
 800350a:	6a39      	ldr	r1, [r7, #32]
 800350c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800350e:	f7fd fac9 	bl	8000aa4 <__aeabi_fsub>
 8003512:	4603      	mov	r3, r0
 8003514:	4618      	mov	r0, r3
 8003516:	f7fe fb75 	bl	8001c04 <qFFMath_Abs>
 800351a:	4603      	mov	r3, r0
 800351c:	4619      	mov	r1, r3
 800351e:	4620      	mov	r0, r4
 8003520:	f7fd fd68 	bl	8000ff4 <__aeabi_fcmplt>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <qFIS_TSMF+0xfe>
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	e000      	b.n	8003530 <qFIS_TSMF+0x100>
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003530:	4618      	mov	r0, r3
 8003532:	3744      	adds	r7, #68	; 0x44
 8003534:	46bd      	mov	sp, r7
 8003536:	bd90      	pop	{r4, r7, pc}

08003538 <qFIS_ZMF>:
/*============================================================================*/
static float qFIS_ZMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 8003538:	b590      	push	{r4, r7, lr}
 800353a:	b08b      	sub	sp, #44	; 0x2c
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 8003556:	69f9      	ldr	r1, [r7, #28]
 8003558:	6a38      	ldr	r0, [r7, #32]
 800355a:	f7fd fd55 	bl	8001008 <__aeabi_fcmple>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <qFIS_ZMF+0x34>
        y = 1.0f;
 8003564:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
 800356a:	e081      	b.n	8003670 <qFIS_ZMF+0x138>
    }
    else if ( x >= b ) {
 800356c:	69b9      	ldr	r1, [r7, #24]
 800356e:	6a38      	ldr	r0, [r7, #32]
 8003570:	f7fd fd54 	bl	800101c <__aeabi_fcmpge>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <qFIS_ZMF+0x4a>
        y = 0.0f;
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
 8003580:	e076      	b.n	8003670 <qFIS_ZMF+0x138>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 8003582:	69f9      	ldr	r1, [r7, #28]
 8003584:	6a38      	ldr	r0, [r7, #32]
 8003586:	f7fd fd49 	bl	800101c <__aeabi_fcmpge>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d035      	beq.n	80035fc <qFIS_ZMF+0xc4>
 8003590:	69b9      	ldr	r1, [r7, #24]
 8003592:	69f8      	ldr	r0, [r7, #28]
 8003594:	f7fd fa88 	bl	8000aa8 <__addsf3>
 8003598:	4603      	mov	r3, r0
 800359a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd fb8a 	bl	8000cb8 <__aeabi_fmul>
 80035a4:	4603      	mov	r3, r0
 80035a6:	4619      	mov	r1, r3
 80035a8:	6a38      	ldr	r0, [r7, #32]
 80035aa:	f7fd fd2d 	bl	8001008 <__aeabi_fcmple>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d023      	beq.n	80035fc <qFIS_ZMF+0xc4>
        tmp = ( x - a )/( b - a );
 80035b4:	69f9      	ldr	r1, [r7, #28]
 80035b6:	6a38      	ldr	r0, [r7, #32]
 80035b8:	f7fd fa74 	bl	8000aa4 <__aeabi_fsub>
 80035bc:	4603      	mov	r3, r0
 80035be:	461c      	mov	r4, r3
 80035c0:	69f9      	ldr	r1, [r7, #28]
 80035c2:	69b8      	ldr	r0, [r7, #24]
 80035c4:	f7fd fa6e 	bl	8000aa4 <__aeabi_fsub>
 80035c8:	4603      	mov	r3, r0
 80035ca:	4619      	mov	r1, r3
 80035cc:	4620      	mov	r0, r4
 80035ce:	f7fd fc27 	bl	8000e20 <__aeabi_fdiv>
 80035d2:	4603      	mov	r3, r0
 80035d4:	617b      	str	r3, [r7, #20]
        y = 1.0f - ( 2.0f*tmp*tmp );
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	4619      	mov	r1, r3
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fd fa64 	bl	8000aa8 <__addsf3>
 80035e0:	4603      	mov	r3, r0
 80035e2:	6979      	ldr	r1, [r7, #20]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fd fb67 	bl	8000cb8 <__aeabi_fmul>
 80035ea:	4603      	mov	r3, r0
 80035ec:	4619      	mov	r1, r3
 80035ee:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80035f2:	f7fd fa57 	bl	8000aa4 <__aeabi_fsub>
 80035f6:	4603      	mov	r3, r0
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
 80035fa:	e039      	b.n	8003670 <qFIS_ZMF+0x138>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 80035fc:	69b9      	ldr	r1, [r7, #24]
 80035fe:	6a38      	ldr	r0, [r7, #32]
 8003600:	f7fd fd02 	bl	8001008 <__aeabi_fcmple>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d02f      	beq.n	800366a <qFIS_ZMF+0x132>
 800360a:	69b9      	ldr	r1, [r7, #24]
 800360c:	69f8      	ldr	r0, [r7, #28]
 800360e:	f7fd fa4b 	bl	8000aa8 <__addsf3>
 8003612:	4603      	mov	r3, r0
 8003614:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003618:	4618      	mov	r0, r3
 800361a:	f7fd fb4d 	bl	8000cb8 <__aeabi_fmul>
 800361e:	4603      	mov	r3, r0
 8003620:	4619      	mov	r1, r3
 8003622:	6a38      	ldr	r0, [r7, #32]
 8003624:	f7fd fcfa 	bl	800101c <__aeabi_fcmpge>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d01d      	beq.n	800366a <qFIS_ZMF+0x132>
        tmp = ( x - b )/( b - a );
 800362e:	69b9      	ldr	r1, [r7, #24]
 8003630:	6a38      	ldr	r0, [r7, #32]
 8003632:	f7fd fa37 	bl	8000aa4 <__aeabi_fsub>
 8003636:	4603      	mov	r3, r0
 8003638:	461c      	mov	r4, r3
 800363a:	69f9      	ldr	r1, [r7, #28]
 800363c:	69b8      	ldr	r0, [r7, #24]
 800363e:	f7fd fa31 	bl	8000aa4 <__aeabi_fsub>
 8003642:	4603      	mov	r3, r0
 8003644:	4619      	mov	r1, r3
 8003646:	4620      	mov	r0, r4
 8003648:	f7fd fbea 	bl	8000e20 <__aeabi_fdiv>
 800364c:	4603      	mov	r3, r0
 800364e:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	4619      	mov	r1, r3
 8003654:	4618      	mov	r0, r3
 8003656:	f7fd fa27 	bl	8000aa8 <__addsf3>
 800365a:	4603      	mov	r3, r0
 800365c:	4619      	mov	r1, r3
 800365e:	6978      	ldr	r0, [r7, #20]
 8003660:	f7fd fb2a 	bl	8000cb8 <__aeabi_fmul>
 8003664:	4603      	mov	r3, r0
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
 8003668:	e002      	b.n	8003670 <qFIS_ZMF+0x138>
    }
    else {
        y = 0.0f;
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003672:	4618      	mov	r0, r3
 8003674:	372c      	adds	r7, #44	; 0x2c
 8003676:	46bd      	mov	sp, r7
 8003678:	bd90      	pop	{r4, r7, pc}

0800367a <qFIS_LinSMF>:
/*============================================================================*/
static float qFIS_LinSMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 800367a:	b590      	push	{r4, r7, lr}
 800367c:	b089      	sub	sp, #36	; 0x24
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 8003698:	6939      	ldr	r1, [r7, #16]
 800369a:	6978      	ldr	r0, [r7, #20]
 800369c:	f7fd fcaa 	bl	8000ff4 <__aeabi_fcmplt>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d027      	beq.n	80036f6 <qFIS_LinSMF+0x7c>
        if ( x < a ) {
 80036a6:	6979      	ldr	r1, [r7, #20]
 80036a8:	69b8      	ldr	r0, [r7, #24]
 80036aa:	f7fd fca3 	bl	8000ff4 <__aeabi_fcmplt>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <qFIS_LinSMF+0x42>
            y = 0.0f;
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	e034      	b.n	8003726 <qFIS_LinSMF+0xac>
        }
        else if ( x > b ) {
 80036bc:	6939      	ldr	r1, [r7, #16]
 80036be:	69b8      	ldr	r0, [r7, #24]
 80036c0:	f7fd fcb6 	bl	8001030 <__aeabi_fcmpgt>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <qFIS_LinSMF+0x58>
            y = 1.0f;
 80036ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80036ce:	61fb      	str	r3, [r7, #28]
 80036d0:	e029      	b.n	8003726 <qFIS_LinSMF+0xac>
        }
        else {
            y = ( x - a )/( b - a );
 80036d2:	6979      	ldr	r1, [r7, #20]
 80036d4:	69b8      	ldr	r0, [r7, #24]
 80036d6:	f7fd f9e5 	bl	8000aa4 <__aeabi_fsub>
 80036da:	4603      	mov	r3, r0
 80036dc:	461c      	mov	r4, r3
 80036de:	6979      	ldr	r1, [r7, #20]
 80036e0:	6938      	ldr	r0, [r7, #16]
 80036e2:	f7fd f9df 	bl	8000aa4 <__aeabi_fsub>
 80036e6:	4603      	mov	r3, r0
 80036e8:	4619      	mov	r1, r3
 80036ea:	4620      	mov	r0, r4
 80036ec:	f7fd fb98 	bl	8000e20 <__aeabi_fdiv>
 80036f0:	4603      	mov	r3, r0
 80036f2:	61fb      	str	r3, [r7, #28]
 80036f4:	e017      	b.n	8003726 <qFIS_LinSMF+0xac>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 80036f6:	6939      	ldr	r1, [r7, #16]
 80036f8:	6978      	ldr	r0, [r7, #20]
 80036fa:	f000 fc1a 	bl	8003f32 <qFMathEx_Equal>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00d      	beq.n	8003720 <qFIS_LinSMF+0xa6>
        y = ( x < a ) ? 0.0f : 1.0f;
 8003704:	6979      	ldr	r1, [r7, #20]
 8003706:	69b8      	ldr	r0, [r7, #24]
 8003708:	f7fd fc74 	bl	8000ff4 <__aeabi_fcmplt>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <qFIS_LinSMF+0x9e>
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	e001      	b.n	800371c <qFIS_LinSMF+0xa2>
 8003718:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	e002      	b.n	8003726 <qFIS_LinSMF+0xac>
    }
    else {
        y = 0.0f;
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
    }

    return y;
 8003726:	69fb      	ldr	r3, [r7, #28]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3724      	adds	r7, #36	; 0x24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd90      	pop	{r4, r7, pc}

08003730 <qFIS_LinZMF>:
/*============================================================================*/
static float qFIS_LinZMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b089      	sub	sp, #36	; 0x24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 800374e:	6939      	ldr	r1, [r7, #16]
 8003750:	6978      	ldr	r0, [r7, #20]
 8003752:	f7fd fc4f 	bl	8000ff4 <__aeabi_fcmplt>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d027      	beq.n	80037ac <qFIS_LinZMF+0x7c>
        if ( x < a ) {
 800375c:	6979      	ldr	r1, [r7, #20]
 800375e:	69b8      	ldr	r0, [r7, #24]
 8003760:	f7fd fc48 	bl	8000ff4 <__aeabi_fcmplt>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <qFIS_LinZMF+0x42>
            y = 1.0f;
 800376a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	e034      	b.n	80037dc <qFIS_LinZMF+0xac>
        }
        else if ( x > b ) {
 8003772:	6939      	ldr	r1, [r7, #16]
 8003774:	69b8      	ldr	r0, [r7, #24]
 8003776:	f7fd fc5b 	bl	8001030 <__aeabi_fcmpgt>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <qFIS_LinZMF+0x58>
            y = 0.0f;
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	e029      	b.n	80037dc <qFIS_LinZMF+0xac>
        }
        else {
            y = ( a - x )/( a - b );
 8003788:	69b9      	ldr	r1, [r7, #24]
 800378a:	6978      	ldr	r0, [r7, #20]
 800378c:	f7fd f98a 	bl	8000aa4 <__aeabi_fsub>
 8003790:	4603      	mov	r3, r0
 8003792:	461c      	mov	r4, r3
 8003794:	6939      	ldr	r1, [r7, #16]
 8003796:	6978      	ldr	r0, [r7, #20]
 8003798:	f7fd f984 	bl	8000aa4 <__aeabi_fsub>
 800379c:	4603      	mov	r3, r0
 800379e:	4619      	mov	r1, r3
 80037a0:	4620      	mov	r0, r4
 80037a2:	f7fd fb3d 	bl	8000e20 <__aeabi_fdiv>
 80037a6:	4603      	mov	r3, r0
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	e017      	b.n	80037dc <qFIS_LinZMF+0xac>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 80037ac:	6939      	ldr	r1, [r7, #16]
 80037ae:	6978      	ldr	r0, [r7, #20]
 80037b0:	f000 fbbf 	bl	8003f32 <qFMathEx_Equal>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00d      	beq.n	80037d6 <qFIS_LinZMF+0xa6>
        y = ( x < a ) ? 1.0f : 0.0f;
 80037ba:	6979      	ldr	r1, [r7, #20]
 80037bc:	69b8      	ldr	r0, [r7, #24]
 80037be:	f7fd fc19 	bl	8000ff4 <__aeabi_fcmplt>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <qFIS_LinZMF+0x9e>
 80037c8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80037cc:	e001      	b.n	80037d2 <qFIS_LinZMF+0xa2>
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	e002      	b.n	80037dc <qFIS_LinZMF+0xac>
    }
    else {
        y = 0.0f;
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	61fb      	str	r3, [r7, #28]
    }

    return y;
 80037dc:	69fb      	ldr	r3, [r7, #28]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3724      	adds	r7, #36	; 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd90      	pop	{r4, r7, pc}

080037e6 <qFIS_TZMF>:
/*============================================================================*/
static float qFIS_TZMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 80037e6:	b590      	push	{r4, r7, lr}
 80037e8:	b091      	sub	sp, #68	; 0x44
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp = { 0.0f, 0.0f, 0.0f };
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]

    a = p[ 0 ]; /*start*/
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 8003816:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003818:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800381a:	f7fd f943 	bl	8000aa4 <__aeabi_fsub>
 800381e:	4603      	mov	r3, r0
 8003820:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 8003822:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003826:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003828:	f7fd fa46 	bl	8000cb8 <__aeabi_fmul>
 800382c:	4603      	mov	r3, r0
 800382e:	4619      	mov	r1, r3
 8003830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003832:	f7fd fa41 	bl	8000cb8 <__aeabi_fmul>
 8003836:	4603      	mov	r3, r0
 8003838:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( -( x - 1.0f )*diff );
 800383a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800383e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003840:	f7fd f930 	bl	8000aa4 <__aeabi_fsub>
 8003844:	4603      	mov	r3, r0
 8003846:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800384a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800384c:	4618      	mov	r0, r3
 800384e:	f7fd fa33 	bl	8000cb8 <__aeabi_fmul>
 8003852:	4603      	mov	r3, r0
 8003854:	4618      	mov	r0, r3
 8003856:	f7fe f9ea 	bl	8001c2e <qFFMath_Sqrt>
 800385a:	4603      	mov	r3, r0
 800385c:	4619      	mov	r1, r3
 800385e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003860:	f7fd f922 	bl	8000aa8 <__addsf3>
 8003864:	4603      	mov	r3, r0
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 800386c:	f107 0314 	add.w	r3, r7, #20
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	68b9      	ldr	r1, [r7, #8]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fd3a 	bl	80032ee <qFIS_SMF>
 800387a:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( x*diff );
 800387c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800387e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003880:	f7fd fa1a 	bl	8000cb8 <__aeabi_fmul>
 8003884:	4603      	mov	r3, r0
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe f9d1 	bl	8001c2e <qFFMath_Sqrt>
 800388c:	4603      	mov	r3, r0
 800388e:	4619      	mov	r1, r3
 8003890:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003892:	f7fd f909 	bl	8000aa8 <__addsf3>
 8003896:	4603      	mov	r3, r0
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 800389e:	f107 0314 	add.w	r3, r7, #20
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fd21 	bl	80032ee <qFIS_SMF>
 80038ac:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 80038ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80038b2:	f7fd f8f7 	bl	8000aa4 <__aeabi_fsub>
 80038b6:	4603      	mov	r3, r0
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fe f9a3 	bl	8001c04 <qFFMath_Abs>
 80038be:	4604      	mov	r4, r0
 80038c0:	6a39      	ldr	r1, [r7, #32]
 80038c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80038c4:	f7fd f8ee 	bl	8000aa4 <__aeabi_fsub>
 80038c8:	4603      	mov	r3, r0
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe f99a 	bl	8001c04 <qFFMath_Abs>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4619      	mov	r1, r3
 80038d4:	4620      	mov	r0, r4
 80038d6:	f7fd fb8d 	bl	8000ff4 <__aeabi_fcmplt>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <qFIS_TZMF+0xfe>
 80038e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e2:	e000      	b.n	80038e6 <qFIS_TZMF+0x100>
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3744      	adds	r7, #68	; 0x44
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd90      	pop	{r4, r7, pc}

080038ee <qFIS_PiMF>:
/*============================================================================*/
static float qFIS_PiMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 80038ee:	b590      	push	{r4, r7, lr}
 80038f0:	b085      	sub	sp, #20
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SMF( in , p, n )*qFIS_ZMF( in , &p[ 2 ], n ) );
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f7ff fcf5 	bl	80032ee <qFIS_SMF>
 8003904:	4604      	mov	r4, r0
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	3308      	adds	r3, #8
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	4619      	mov	r1, r3
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f7ff fe12 	bl	8003538 <qFIS_ZMF>
 8003914:	4603      	mov	r3, r0
 8003916:	4619      	mov	r1, r3
 8003918:	4620      	mov	r0, r4
 800391a:	f7fd f9cd 	bl	8000cb8 <__aeabi_fmul>
 800391e:	4603      	mov	r3, r0
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe f96f 	bl	8001c04 <qFFMath_Abs>
 8003926:	4603      	mov	r3, r0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	bd90      	pop	{r4, r7, pc}

08003930 <qFIS_SingletonMF>:
/*============================================================================*/
static float qFIS_SingletonMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	617b      	str	r3, [r7, #20]
    (void)n;

    return ( qFMathEx_Equal( x, p[ 0 ] ) ) ? 1.0f : 0.0f;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4619      	mov	r1, r3
 8003948:	6978      	ldr	r0, [r7, #20]
 800394a:	f000 faf2 	bl	8003f32 <qFMathEx_Equal>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <qFIS_SingletonMF+0x2a>
 8003954:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003958:	e001      	b.n	800395e <qFIS_SingletonMF+0x2e>
 800395a:	f04f 0300 	mov.w	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <qFIS_ConcaveMF>:
/*============================================================================*/
static float qFIS_ConcaveMF( const qFIS_IO_Base_t * const in,
                             const float *p,
                             const size_t n )
{
 8003966:	b590      	push	{r4, r7, lr}
 8003968:	b089      	sub	sp, #36	; 0x24
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	61bb      	str	r3, [r7, #24]
    float i, e, y;
    (void)n;

    i = p[ 0 ];
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	613b      	str	r3, [r7, #16]
    if ( ( i <= e ) && ( x < e ) ) {
 8003984:	6939      	ldr	r1, [r7, #16]
 8003986:	6978      	ldr	r0, [r7, #20]
 8003988:	f7fd fb3e 	bl	8001008 <__aeabi_fcmple>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d023      	beq.n	80039da <qFIS_ConcaveMF+0x74>
 8003992:	6939      	ldr	r1, [r7, #16]
 8003994:	69b8      	ldr	r0, [r7, #24]
 8003996:	f7fd fb2d 	bl	8000ff4 <__aeabi_fcmplt>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01c      	beq.n	80039da <qFIS_ConcaveMF+0x74>
        y = ( e - i )/( ( 2.0f*e ) - i -x );
 80039a0:	6979      	ldr	r1, [r7, #20]
 80039a2:	6938      	ldr	r0, [r7, #16]
 80039a4:	f7fd f87e 	bl	8000aa4 <__aeabi_fsub>
 80039a8:	4603      	mov	r3, r0
 80039aa:	461c      	mov	r4, r3
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4619      	mov	r1, r3
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fd f879 	bl	8000aa8 <__addsf3>
 80039b6:	4603      	mov	r3, r0
 80039b8:	6979      	ldr	r1, [r7, #20]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fd f872 	bl	8000aa4 <__aeabi_fsub>
 80039c0:	4603      	mov	r3, r0
 80039c2:	69b9      	ldr	r1, [r7, #24]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fd f86d 	bl	8000aa4 <__aeabi_fsub>
 80039ca:	4603      	mov	r3, r0
 80039cc:	4619      	mov	r1, r3
 80039ce:	4620      	mov	r0, r4
 80039d0:	f7fd fa26 	bl	8000e20 <__aeabi_fdiv>
 80039d4:	4603      	mov	r3, r0
 80039d6:	61fb      	str	r3, [r7, #28]
 80039d8:	e02d      	b.n	8003a36 <qFIS_ConcaveMF+0xd0>
    }
    else if ( ( i > e ) && ( x > e ) ) {
 80039da:	6939      	ldr	r1, [r7, #16]
 80039dc:	6978      	ldr	r0, [r7, #20]
 80039de:	f7fd fb27 	bl	8001030 <__aeabi_fcmpgt>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d023      	beq.n	8003a30 <qFIS_ConcaveMF+0xca>
 80039e8:	6939      	ldr	r1, [r7, #16]
 80039ea:	69b8      	ldr	r0, [r7, #24]
 80039ec:	f7fd fb20 	bl	8001030 <__aeabi_fcmpgt>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01c      	beq.n	8003a30 <qFIS_ConcaveMF+0xca>
        y = ( i - e )/( -( 2.0f*e ) + i +x );
 80039f6:	6939      	ldr	r1, [r7, #16]
 80039f8:	6978      	ldr	r0, [r7, #20]
 80039fa:	f7fd f853 	bl	8000aa4 <__aeabi_fsub>
 80039fe:	4603      	mov	r3, r0
 8003a00:	461c      	mov	r4, r3
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4619      	mov	r1, r3
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd f84e 	bl	8000aa8 <__addsf3>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	4619      	mov	r1, r3
 8003a10:	6978      	ldr	r0, [r7, #20]
 8003a12:	f7fd f847 	bl	8000aa4 <__aeabi_fsub>
 8003a16:	4603      	mov	r3, r0
 8003a18:	69b9      	ldr	r1, [r7, #24]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd f844 	bl	8000aa8 <__addsf3>
 8003a20:	4603      	mov	r3, r0
 8003a22:	4619      	mov	r1, r3
 8003a24:	4620      	mov	r0, r4
 8003a26:	f7fd f9fb 	bl	8000e20 <__aeabi_fdiv>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	e002      	b.n	8003a36 <qFIS_ConcaveMF+0xd0>
    }
    else {
        y = 1.0f;
 8003a30:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a34:	61fb      	str	r3, [r7, #28]
    }

    return y;
 8003a36:	69fb      	ldr	r3, [r7, #28]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3724      	adds	r7, #36	; 0x24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd90      	pop	{r4, r7, pc}

08003a40 <qFIS_TConcaveMF>:
/*============================================================================*/
static float qFIS_TConcaveMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 8003a40:	b590      	push	{r4, r7, lr}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
    float i, e;

    i = p[ 0 ];
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	613b      	str	r3, [r7, #16]

    return ( ( i - e )/qFIS_ConcaveMF( in, p, n ) ) + ( 2.0f*e ) - i;
 8003a58:	6939      	ldr	r1, [r7, #16]
 8003a5a:	6978      	ldr	r0, [r7, #20]
 8003a5c:	f7fd f822 	bl	8000aa4 <__aeabi_fsub>
 8003a60:	4603      	mov	r3, r0
 8003a62:	461c      	mov	r4, r3
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f7ff ff7c 	bl	8003966 <qFIS_ConcaveMF>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4619      	mov	r1, r3
 8003a72:	4620      	mov	r0, r4
 8003a74:	f7fd f9d4 	bl	8000e20 <__aeabi_fdiv>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	461c      	mov	r4, r3
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fd f811 	bl	8000aa8 <__addsf3>
 8003a86:	4603      	mov	r3, r0
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f7fd f80c 	bl	8000aa8 <__addsf3>
 8003a90:	4603      	mov	r3, r0
 8003a92:	6979      	ldr	r1, [r7, #20]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fd f805 	bl	8000aa4 <__aeabi_fsub>
 8003a9a:	4603      	mov	r3, r0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	371c      	adds	r7, #28
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd90      	pop	{r4, r7, pc}

08003aa4 <qFIS_SpikeMF>:
/*============================================================================*/
static float qFIS_SpikeMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	61fb      	str	r3, [r7, #28]
    float w, c;
    (void)n;

    w = p[ 0 ];
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	617b      	str	r3, [r7, #20]

    return QLIB_EXP( -QLIB_ABS( 10.0f*( x - c )/w ) );
 8003ac2:	6979      	ldr	r1, [r7, #20]
 8003ac4:	69f8      	ldr	r0, [r7, #28]
 8003ac6:	f7fc ffed 	bl	8000aa4 <__aeabi_fsub>
 8003aca:	4603      	mov	r3, r0
 8003acc:	490b      	ldr	r1, [pc, #44]	; (8003afc <qFIS_SpikeMF+0x58>)
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fd f8f2 	bl	8000cb8 <__aeabi_fmul>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	69b9      	ldr	r1, [r7, #24]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fd f9a1 	bl	8000e20 <__aeabi_fdiv>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fe f88f 	bl	8001c04 <qFFMath_Abs>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe fa13 	bl	8001f18 <qFFMath_Exp>
 8003af2:	4603      	mov	r3, r0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3720      	adds	r7, #32
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	41200000 	.word	0x41200000

08003b00 <qFIS_TLinSMF>:
/*============================================================================*/
static float qFIS_TLinSMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	617b      	str	r3, [r7, #20]

    return ( ( b - a )*x ) + a;
 8003b1e:	69b9      	ldr	r1, [r7, #24]
 8003b20:	6978      	ldr	r0, [r7, #20]
 8003b22:	f7fc ffbf 	bl	8000aa4 <__aeabi_fsub>
 8003b26:	4603      	mov	r3, r0
 8003b28:	69f9      	ldr	r1, [r7, #28]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fd f8c4 	bl	8000cb8 <__aeabi_fmul>
 8003b30:	4603      	mov	r3, r0
 8003b32:	69b9      	ldr	r1, [r7, #24]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fc ffb7 	bl	8000aa8 <__addsf3>
 8003b3a:	4603      	mov	r3, r0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3720      	adds	r7, #32
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <qFIS_TLinZMF>:
/*============================================================================*/
static float qFIS_TLinZMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	617b      	str	r3, [r7, #20]

    return + a - ( ( a - b )*x );
 8003b62:	6979      	ldr	r1, [r7, #20]
 8003b64:	69b8      	ldr	r0, [r7, #24]
 8003b66:	f7fc ff9d 	bl	8000aa4 <__aeabi_fsub>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	69f9      	ldr	r1, [r7, #28]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fd f8a2 	bl	8000cb8 <__aeabi_fmul>
 8003b74:	4603      	mov	r3, r0
 8003b76:	4619      	mov	r1, r3
 8003b78:	69b8      	ldr	r0, [r7, #24]
 8003b7a:	f7fc ff93 	bl	8000aa4 <__aeabi_fsub>
 8003b7e:	4603      	mov	r3, r0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3720      	adds	r7, #32
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <qFIS_RectangleMF>:
/*============================================================================*/
static float qFIS_RectangleMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	61fb      	str	r3, [r7, #28]
    float s, e;
    (void)n;

    s = p[ 0 ];
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	61bb      	str	r3, [r7, #24]
    e = p[ 1 ];
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	617b      	str	r3, [r7, #20]

    return ( ( x >= s ) && ( x <= e ) ) ? 1.0f : 0.0f;
 8003ba6:	69b9      	ldr	r1, [r7, #24]
 8003ba8:	69f8      	ldr	r0, [r7, #28]
 8003baa:	f7fd fa37 	bl	800101c <__aeabi_fcmpge>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d009      	beq.n	8003bc8 <qFIS_RectangleMF+0x40>
 8003bb4:	6979      	ldr	r1, [r7, #20]
 8003bb6:	69f8      	ldr	r0, [r7, #28]
 8003bb8:	f7fd fa26 	bl	8001008 <__aeabi_fcmple>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <qFIS_RectangleMF+0x40>
 8003bc2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003bc6:	e001      	b.n	8003bcc <qFIS_RectangleMF+0x44>
 8003bc8:	f04f 0300 	mov.w	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <qFIS_CosineMF>:
/*============================================================================*/
static float qFIS_CosineMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 8003bd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003bd8:	b08a      	sub	sp, #40	; 0x28
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	623b      	str	r3, [r7, #32]
    float c, w, y;
    const float pi = 3.14159265358979323846f;
 8003be8:	4b35      	ldr	r3, [pc, #212]	; (8003cc0 <qFIS_CosineMF+0xec>)
 8003bea:	61fb      	str	r3, [r7, #28]
    (void)n;

    c = p[ 0 ];
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	61bb      	str	r3, [r7, #24]
    w = p[ 1 ];
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	617b      	str	r3, [r7, #20]
    if ( ( x < ( c - ( 0.5*w ) ) ) || ( x > ( c + ( 0.5f*w ) ) ) ) {
 8003bf8:	6a38      	ldr	r0, [r7, #32]
 8003bfa:	f7fc fc0d 	bl	8000418 <__aeabi_f2d>
 8003bfe:	4604      	mov	r4, r0
 8003c00:	460d      	mov	r5, r1
 8003c02:	69b8      	ldr	r0, [r7, #24]
 8003c04:	f7fc fc08 	bl	8000418 <__aeabi_f2d>
 8003c08:	4680      	mov	r8, r0
 8003c0a:	4689      	mov	r9, r1
 8003c0c:	6978      	ldr	r0, [r7, #20]
 8003c0e:	f7fc fc03 	bl	8000418 <__aeabi_f2d>
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	4b2b      	ldr	r3, [pc, #172]	; (8003cc4 <qFIS_CosineMF+0xf0>)
 8003c18:	f7fc fc56 	bl	80004c8 <__aeabi_dmul>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4640      	mov	r0, r8
 8003c22:	4649      	mov	r1, r9
 8003c24:	f7fc fa98 	bl	8000158 <__aeabi_dsub>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	4629      	mov	r1, r5
 8003c30:	f7fc febc 	bl	80009ac <__aeabi_dcmplt>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d111      	bne.n	8003c5e <qFIS_CosineMF+0x8a>
 8003c3a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003c3e:	6978      	ldr	r0, [r7, #20]
 8003c40:	f7fd f83a 	bl	8000cb8 <__aeabi_fmul>
 8003c44:	4603      	mov	r3, r0
 8003c46:	69b9      	ldr	r1, [r7, #24]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fc ff2d 	bl	8000aa8 <__addsf3>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	4619      	mov	r1, r3
 8003c52:	6a38      	ldr	r0, [r7, #32]
 8003c54:	f7fd f9ec 	bl	8001030 <__aeabi_fcmpgt>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <qFIS_CosineMF+0x92>
        y = 0.0f;
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
 8003c64:	e026      	b.n	8003cb4 <qFIS_CosineMF+0xe0>
    }
    else {
        y = 0.5f*( 1.0f + QLIB_COS( 2.0f/w*pi*( x - c) ) );
 8003c66:	6979      	ldr	r1, [r7, #20]
 8003c68:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003c6c:	f7fd f8d8 	bl	8000e20 <__aeabi_fdiv>
 8003c70:	4603      	mov	r3, r0
 8003c72:	69f9      	ldr	r1, [r7, #28]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fd f81f 	bl	8000cb8 <__aeabi_fmul>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	461c      	mov	r4, r3
 8003c7e:	69b9      	ldr	r1, [r7, #24]
 8003c80:	6a38      	ldr	r0, [r7, #32]
 8003c82:	f7fc ff0f 	bl	8000aa4 <__aeabi_fsub>
 8003c86:	4603      	mov	r3, r0
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	f7fd f814 	bl	8000cb8 <__aeabi_fmul>
 8003c90:	4603      	mov	r3, r0
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe f85c 	bl	8001d50 <qFFMath_Cos>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fc ff02 	bl	8000aa8 <__addsf3>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fd f804 	bl	8000cb8 <__aeabi_fmul>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3728      	adds	r7, #40	; 0x28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003cc0:	40490fdb 	.word	0x40490fdb
 8003cc4:	3fe00000 	.word	0x3fe00000

08003cc8 <qFIS_ConstantMF>:
/*============================================================================*/
static float qFIS_ConstantMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
    (void)in;
    (void)n;
    return p[ 0 ];
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	681b      	ldr	r3, [r3, #0]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr

08003ce2 <qFIS_LinearMF>:
/*============================================================================*/
static float qFIS_LinearMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b086      	sub	sp, #24
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
    float px = 0.0f;
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
    size_t i;

    for ( i = 0u ; i < n ; ++i ) {
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	e01a      	b.n	8003d30 <qFIS_LinearMF+0x4e>
        px += in[ i ].value*p[ i ];
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	461a      	mov	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4413      	add	r3, r2
 8003d0a:	6898      	ldr	r0, [r3, #8]
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	4413      	add	r3, r2
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4619      	mov	r1, r3
 8003d18:	f7fc ffce 	bl	8000cb8 <__aeabi_fmul>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	4619      	mov	r1, r3
 8003d20:	6978      	ldr	r0, [r7, #20]
 8003d22:	f7fc fec1 	bl	8000aa8 <__addsf3>
 8003d26:	4603      	mov	r3, r0
 8003d28:	617b      	str	r3, [r7, #20]
    for ( i = 0u ; i < n ; ++i ) {
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d3e0      	bcc.n	8003cfa <qFIS_LinearMF+0x18>
    }
    px += p[ i ];
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	4413      	add	r3, r2
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4619      	mov	r1, r3
 8003d44:	6978      	ldr	r0, [r7, #20]
 8003d46:	f7fc feaf 	bl	8000aa8 <__addsf3>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	617b      	str	r3, [r7, #20]

    return px;
 8003d4e:	697b      	ldr	r3, [r7, #20]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <qFIS_Min>:
/*============================================================================*/
static float qFIS_Min( const float a,
                       const float b )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a < b ) ? a : b, 0.0f, 1.0f );
 8003d62:	6839      	ldr	r1, [r7, #0]
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7fd f945 	bl	8000ff4 <__aeabi_fcmplt>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <qFIS_Min+0x1c>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	e000      	b.n	8003d76 <qFIS_Min+0x1e>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d7a:	f04f 0100 	mov.w	r1, #0
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 f86d 	bl	8003e5e <qFIS_Bound>
 8003d84:	4603      	mov	r3, r0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <qFIS_Max>:
/*============================================================================*/
static float qFIS_Max( const float a,
                       const float b )
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a > b ) ? a : b, 0.0f, 1.0f );
 8003d98:	6839      	ldr	r1, [r7, #0]
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fd f948 	bl	8001030 <__aeabi_fcmpgt>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <qFIS_Max+0x1c>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	e000      	b.n	8003dac <qFIS_Max+0x1e>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003db0:	f04f 0100 	mov.w	r1, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 f852 	bl	8003e5e <qFIS_Bound>
 8003dba:	4603      	mov	r3, r0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <qFIS_Prod>:
/*============================================================================*/
static float qFIS_Prod( const float a,
                        const float b )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a*b, 0.0f, 1.0f );
 8003dce:	6839      	ldr	r1, [r7, #0]
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7fc ff71 	bl	8000cb8 <__aeabi_fmul>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003ddc:	f04f 0100 	mov.w	r1, #0
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 f83c 	bl	8003e5e <qFIS_Bound>
 8003de6:	4603      	mov	r3, r0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <qFIS_ProbOR>:
/*============================================================================*/
static float qFIS_ProbOR( const float a,
                          const float b )
{
 8003df0:	b590      	push	{r4, r7, lr}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b - ( a*b ), 0.0f, 1.0f );
 8003dfa:	6839      	ldr	r1, [r7, #0]
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7fc fe53 	bl	8000aa8 <__addsf3>
 8003e02:	4603      	mov	r3, r0
 8003e04:	461c      	mov	r4, r3
 8003e06:	6839      	ldr	r1, [r7, #0]
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7fc ff55 	bl	8000cb8 <__aeabi_fmul>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4619      	mov	r1, r3
 8003e12:	4620      	mov	r0, r4
 8003e14:	f7fc fe46 	bl	8000aa4 <__aeabi_fsub>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003e1e:	f04f 0100 	mov.w	r1, #0
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 f81b 	bl	8003e5e <qFIS_Bound>
 8003e28:	4603      	mov	r3, r0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd90      	pop	{r4, r7, pc}

08003e32 <qFIS_Sum>:
/*============================================================================*/
static float qFIS_Sum( const float a,
                       const float b )
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b, 0.0f, 1.0f );
 8003e3c:	6839      	ldr	r1, [r7, #0]
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fc fe32 	bl	8000aa8 <__addsf3>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003e4a:	f04f 0100 	mov.w	r1, #0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f805 	bl	8003e5e <qFIS_Bound>
 8003e54:	4603      	mov	r3, r0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <qFIS_Bound>:
/*============================================================================*/
static float qFIS_Bound( float y,
                         const float yMin,
                         const float yMax )
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
    (void)qFMathEx_InRangeCoerce( &y, yMin, yMax );
 8003e6a:	f107 030c 	add.w	r3, r7, #12
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 f805 	bl	8003e82 <qFMathEx_InRangeCoerce>

    return y;
 8003e78:	68fb      	ldr	r3, [r7, #12]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <qFMathEx_InRangeCoerce>:
}
/*============================================================================*/
bool qFMathEx_InRangeCoerce( float * const x,
                             const float lowerL,
                             const float upperL )
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b086      	sub	sp, #24
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
    bool retVal = false;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	75fb      	strb	r3, [r7, #23]

    if ( 1 == (int)QLIB_ISNAN( x[ 0 ] ) ) {
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd fea3 	bl	8001be2 <qFFMath_IsNaN>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <qFMathEx_InRangeCoerce+0x28>
        x[ 0 ] = lowerL;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	e01b      	b.n	8003ee2 <qFMathEx_InRangeCoerce+0x60>
    }
    else {
        if ( x[ 0 ] < lowerL ) {
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	68b8      	ldr	r0, [r7, #8]
 8003eb2:	f7fd f8bd 	bl	8001030 <__aeabi_fcmpgt>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <qFMathEx_InRangeCoerce+0x42>
            x[ 0 ] = lowerL;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	e00e      	b.n	8003ee2 <qFMathEx_InRangeCoerce+0x60>
        }
        else if ( x[ 0 ] > upperL ) {
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fd f892 	bl	8000ff4 <__aeabi_fcmplt>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <qFMathEx_InRangeCoerce+0x5c>
            x[ 0 ] = upperL;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e001      	b.n	8003ee2 <qFMathEx_InRangeCoerce+0x60>
        }
        else {
            retVal = true;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	75fb      	strb	r3, [r7, #23]
        }
    }

    return retVal;
 8003ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <qFMathEx_AlmostEqual>:
/*============================================================================*/
bool qFMathEx_AlmostEqual( const float a,
                           const float b,
                           const float tol )
{
 8003eec:	b5b0      	push	{r4, r5, r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
    return ( QLIB_ABS( a - b ) <= QLIB_ABS( tol ) );
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f7fc fdd2 	bl	8000aa4 <__aeabi_fsub>
 8003f00:	4603      	mov	r3, r0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fd fe7e 	bl	8001c04 <qFFMath_Abs>
 8003f08:	4605      	mov	r5, r0
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fd fe7a 	bl	8001c04 <qFFMath_Abs>
 8003f10:	4602      	mov	r2, r0
 8003f12:	2301      	movs	r3, #1
 8003f14:	461c      	mov	r4, r3
 8003f16:	4611      	mov	r1, r2
 8003f18:	4628      	mov	r0, r5
 8003f1a:	f7fd f875 	bl	8001008 <__aeabi_fcmple>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <qFMathEx_AlmostEqual+0x3c>
 8003f24:	2300      	movs	r3, #0
 8003f26:	461c      	mov	r4, r3
 8003f28:	b2e3      	uxtb	r3, r4
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bdb0      	pop	{r4, r5, r7, pc}

08003f32 <qFMathEx_Equal>:
/*============================================================================*/
bool qFMathEx_Equal( const float a,
                     const float b )
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]
    return qFMathEx_AlmostEqual( a, b, FLT_MIN );
 8003f3c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003f40:	6839      	ldr	r1, [r7, #0]
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff ffd2 	bl	8003eec <qFMathEx_AlmostEqual>
 8003f48:	4603      	mov	r3, r0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003f5a:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <HAL_MspInit+0x5c>)
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <HAL_MspInit+0x5c>)
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	6193      	str	r3, [r2, #24]
 8003f66:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <HAL_MspInit+0x5c>)
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f72:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <HAL_MspInit+0x5c>)
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	4a0e      	ldr	r2, [pc, #56]	; (8003fb0 <HAL_MspInit+0x5c>)
 8003f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	61d3      	str	r3, [r2, #28]
 8003f7e:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <HAL_MspInit+0x5c>)
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f86:	607b      	str	r3, [r7, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003f8a:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <HAL_MspInit+0x60>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <HAL_MspInit+0x60>)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	40010000 	.word	0x40010000

08003fb8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a12      	ldr	r2, [pc, #72]	; (8004010 <HAL_TIM_PWM_MspInit+0x58>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003fca:	4b12      	ldr	r3, [pc, #72]	; (8004014 <HAL_TIM_PWM_MspInit+0x5c>)
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	4a11      	ldr	r2, [pc, #68]	; (8004014 <HAL_TIM_PWM_MspInit+0x5c>)
 8003fd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fd4:	6193      	str	r3, [r2, #24]
 8003fd6:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <HAL_TIM_PWM_MspInit+0x5c>)
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003fe2:	e010      	b.n	8004006 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a0b      	ldr	r2, [pc, #44]	; (8004018 <HAL_TIM_PWM_MspInit+0x60>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d10b      	bne.n	8004006 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fee:	4b09      	ldr	r3, [pc, #36]	; (8004014 <HAL_TIM_PWM_MspInit+0x5c>)
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	4a08      	ldr	r2, [pc, #32]	; (8004014 <HAL_TIM_PWM_MspInit+0x5c>)
 8003ff4:	f043 0302 	orr.w	r3, r3, #2
 8003ff8:	61d3      	str	r3, [r2, #28]
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <HAL_TIM_PWM_MspInit+0x5c>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	68bb      	ldr	r3, [r7, #8]
}
 8004006:	bf00      	nop
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	40012c00 	.word	0x40012c00
 8004014:	40021000 	.word	0x40021000
 8004018:	40000400 	.word	0x40000400

0800401c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004024:	f107 0310 	add.w	r3, r7, #16
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	605a      	str	r2, [r3, #4]
 800402e:	609a      	str	r2, [r3, #8]
 8004030:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403a:	d123      	bne.n	8004084 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800403c:	4b13      	ldr	r3, [pc, #76]	; (800408c <HAL_TIM_Encoder_MspInit+0x70>)
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	4a12      	ldr	r2, [pc, #72]	; (800408c <HAL_TIM_Encoder_MspInit+0x70>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	61d3      	str	r3, [r2, #28]
 8004048:	4b10      	ldr	r3, [pc, #64]	; (800408c <HAL_TIM_Encoder_MspInit+0x70>)
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004054:	4b0d      	ldr	r3, [pc, #52]	; (800408c <HAL_TIM_Encoder_MspInit+0x70>)
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	4a0c      	ldr	r2, [pc, #48]	; (800408c <HAL_TIM_Encoder_MspInit+0x70>)
 800405a:	f043 0304 	orr.w	r3, r3, #4
 800405e:	6193      	str	r3, [r2, #24]
 8004060:	4b0a      	ldr	r3, [pc, #40]	; (800408c <HAL_TIM_Encoder_MspInit+0x70>)
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	60bb      	str	r3, [r7, #8]
 800406a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800406c:	2303      	movs	r3, #3
 800406e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004074:	2300      	movs	r3, #0
 8004076:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004078:	f107 0310 	add.w	r3, r7, #16
 800407c:	4619      	mov	r1, r3
 800407e:	4804      	ldr	r0, [pc, #16]	; (8004090 <HAL_TIM_Encoder_MspInit+0x74>)
 8004080:	f000 fa76 	bl	8004570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004084:	bf00      	nop
 8004086:	3720      	adds	r7, #32
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40021000 	.word	0x40021000
 8004090:	40010800 	.word	0x40010800

08004094 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a09      	ldr	r2, [pc, #36]	; (80040c8 <HAL_TIM_Base_MspInit+0x34>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d10b      	bne.n	80040be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <HAL_TIM_Base_MspInit+0x38>)
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	4a08      	ldr	r2, [pc, #32]	; (80040cc <HAL_TIM_Base_MspInit+0x38>)
 80040ac:	f043 0304 	orr.w	r3, r3, #4
 80040b0:	61d3      	str	r3, [r2, #28]
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_TIM_Base_MspInit+0x38>)
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80040be:	bf00      	nop
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr
 80040c8:	40000800 	.word	0x40000800
 80040cc:	40021000 	.word	0x40021000

080040d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08a      	sub	sp, #40	; 0x28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d8:	f107 0314 	add.w	r3, r7, #20
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	605a      	str	r2, [r3, #4]
 80040e2:	609a      	str	r2, [r3, #8]
 80040e4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a28      	ldr	r2, [pc, #160]	; (800418c <HAL_TIM_MspPostInit+0xbc>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d119      	bne.n	8004124 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040f0:	4b27      	ldr	r3, [pc, #156]	; (8004190 <HAL_TIM_MspPostInit+0xc0>)
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	4a26      	ldr	r2, [pc, #152]	; (8004190 <HAL_TIM_MspPostInit+0xc0>)
 80040f6:	f043 0304 	orr.w	r3, r3, #4
 80040fa:	6193      	str	r3, [r2, #24]
 80040fc:	4b24      	ldr	r3, [pc, #144]	; (8004190 <HAL_TIM_MspPostInit+0xc0>)
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004108:	f44f 7380 	mov.w	r3, #256	; 0x100
 800410c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410e:	2302      	movs	r3, #2
 8004110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004112:	2302      	movs	r3, #2
 8004114:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004116:	f107 0314 	add.w	r3, r7, #20
 800411a:	4619      	mov	r1, r3
 800411c:	481d      	ldr	r0, [pc, #116]	; (8004194 <HAL_TIM_MspPostInit+0xc4>)
 800411e:	f000 fa27 	bl	8004570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004122:	e02e      	b.n	8004182 <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM3)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1b      	ldr	r2, [pc, #108]	; (8004198 <HAL_TIM_MspPostInit+0xc8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d129      	bne.n	8004182 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800412e:	4b18      	ldr	r3, [pc, #96]	; (8004190 <HAL_TIM_MspPostInit+0xc0>)
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	4a17      	ldr	r2, [pc, #92]	; (8004190 <HAL_TIM_MspPostInit+0xc0>)
 8004134:	f043 0308 	orr.w	r3, r3, #8
 8004138:	6193      	str	r3, [r2, #24]
 800413a:	4b15      	ldr	r3, [pc, #84]	; (8004190 <HAL_TIM_MspPostInit+0xc0>)
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004146:	2310      	movs	r3, #16
 8004148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414a:	2302      	movs	r3, #2
 800414c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800414e:	2302      	movs	r3, #2
 8004150:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004152:	f107 0314 	add.w	r3, r7, #20
 8004156:	4619      	mov	r1, r3
 8004158:	4810      	ldr	r0, [pc, #64]	; (800419c <HAL_TIM_MspPostInit+0xcc>)
 800415a:	f000 fa09 	bl	8004570 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800415e:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <HAL_TIM_MspPostInit+0xd0>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	627b      	str	r3, [r7, #36]	; 0x24
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
 800417c:	4a08      	ldr	r2, [pc, #32]	; (80041a0 <HAL_TIM_MspPostInit+0xd0>)
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	6053      	str	r3, [r2, #4]
}
 8004182:	bf00      	nop
 8004184:	3728      	adds	r7, #40	; 0x28
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40012c00 	.word	0x40012c00
 8004190:	40021000 	.word	0x40021000
 8004194:	40010800 	.word	0x40010800
 8004198:	40000400 	.word	0x40000400
 800419c:	40010c00 	.word	0x40010c00
 80041a0:	40010000 	.word	0x40010000

080041a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ac:	f107 0310 	add.w	r3, r7, #16
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	605a      	str	r2, [r3, #4]
 80041b6:	609a      	str	r2, [r3, #8]
 80041b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a1c      	ldr	r2, [pc, #112]	; (8004230 <HAL_UART_MspInit+0x8c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d131      	bne.n	8004228 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80041c4:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <HAL_UART_MspInit+0x90>)
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	4a1a      	ldr	r2, [pc, #104]	; (8004234 <HAL_UART_MspInit+0x90>)
 80041ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ce:	61d3      	str	r3, [r2, #28]
 80041d0:	4b18      	ldr	r3, [pc, #96]	; (8004234 <HAL_UART_MspInit+0x90>)
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041dc:	4b15      	ldr	r3, [pc, #84]	; (8004234 <HAL_UART_MspInit+0x90>)
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	4a14      	ldr	r2, [pc, #80]	; (8004234 <HAL_UART_MspInit+0x90>)
 80041e2:	f043 0308 	orr.w	r3, r3, #8
 80041e6:	6193      	str	r3, [r2, #24]
 80041e8:	4b12      	ldr	r3, [pc, #72]	; (8004234 <HAL_UART_MspInit+0x90>)
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80041f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fa:	2302      	movs	r3, #2
 80041fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041fe:	2303      	movs	r3, #3
 8004200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004202:	f107 0310 	add.w	r3, r7, #16
 8004206:	4619      	mov	r1, r3
 8004208:	480b      	ldr	r0, [pc, #44]	; (8004238 <HAL_UART_MspInit+0x94>)
 800420a:	f000 f9b1 	bl	8004570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800420e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004218:	2300      	movs	r3, #0
 800421a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800421c:	f107 0310 	add.w	r3, r7, #16
 8004220:	4619      	mov	r1, r3
 8004222:	4805      	ldr	r0, [pc, #20]	; (8004238 <HAL_UART_MspInit+0x94>)
 8004224:	f000 f9a4 	bl	8004570 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004228:	bf00      	nop
 800422a:	3720      	adds	r7, #32
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40004800 	.word	0x40004800
 8004234:	40021000 	.word	0x40021000
 8004238:	40010c00 	.word	0x40010c00

0800423c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004240:	e7fe      	b.n	8004240 <NMI_Handler+0x4>

08004242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004242:	b480      	push	{r7}
 8004244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004246:	e7fe      	b.n	8004246 <HardFault_Handler+0x4>

08004248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800424c:	e7fe      	b.n	800424c <MemManage_Handler+0x4>

0800424e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800424e:	b480      	push	{r7}
 8004250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004252:	e7fe      	b.n	8004252 <BusFault_Handler+0x4>

08004254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004258:	e7fe      	b.n	8004258 <UsageFault_Handler+0x4>

0800425a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800425a:	b480      	push	{r7}
 800425c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800425e:	bf00      	nop
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr

08004266 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004266:	b480      	push	{r7}
 8004268:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800426a:	bf00      	nop
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr

08004272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004272:	b480      	push	{r7}
 8004274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr

0800427e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004282:	f000 f875 	bl	8004370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004286:	bf00      	nop
 8004288:	bd80      	pop	{r7, pc}

0800428a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800428a:	b480      	push	{r7}
 800428c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800428e:	bf00      	nop
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr
	...

08004298 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004298:	480c      	ldr	r0, [pc, #48]	; (80042cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800429a:	490d      	ldr	r1, [pc, #52]	; (80042d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800429c:	4a0d      	ldr	r2, [pc, #52]	; (80042d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800429e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042a0:	e002      	b.n	80042a8 <LoopCopyDataInit>

080042a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042a6:	3304      	adds	r3, #4

080042a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042ac:	d3f9      	bcc.n	80042a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042ae:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042b0:	4c0a      	ldr	r4, [pc, #40]	; (80042dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80042b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042b4:	e001      	b.n	80042ba <LoopFillZerobss>

080042b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042b8:	3204      	adds	r2, #4

080042ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042bc:	d3fb      	bcc.n	80042b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80042be:	f7ff ffe4 	bl	800428a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042c2:	f001 fda3 	bl	8005e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80042c6:	f7fd f861 	bl	800138c <main>
  bx lr
 80042ca:	4770      	bx	lr
  ldr r0, =_sdata
 80042cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042d0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80042d4:	08006160 	.word	0x08006160
  ldr r2, =_sbss
 80042d8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80042dc:	2000042c 	.word	0x2000042c

080042e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042e0:	e7fe      	b.n	80042e0 <ADC1_2_IRQHandler>
	...

080042e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042e8:	4b08      	ldr	r3, [pc, #32]	; (800430c <HAL_Init+0x28>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a07      	ldr	r2, [pc, #28]	; (800430c <HAL_Init+0x28>)
 80042ee:	f043 0310 	orr.w	r3, r3, #16
 80042f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042f4:	2003      	movs	r0, #3
 80042f6:	f000 f907 	bl	8004508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042fa:	2000      	movs	r0, #0
 80042fc:	f000 f808 	bl	8004310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004300:	f7ff fe28 	bl	8003f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40022000 	.word	0x40022000

08004310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004318:	4b12      	ldr	r3, [pc, #72]	; (8004364 <HAL_InitTick+0x54>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4b12      	ldr	r3, [pc, #72]	; (8004368 <HAL_InitTick+0x58>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	4619      	mov	r1, r3
 8004322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004326:	fbb3 f3f1 	udiv	r3, r3, r1
 800432a:	fbb2 f3f3 	udiv	r3, r2, r3
 800432e:	4618      	mov	r0, r3
 8004330:	f000 f911 	bl	8004556 <HAL_SYSTICK_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e00e      	b.n	800435c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b0f      	cmp	r3, #15
 8004342:	d80a      	bhi.n	800435a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004344:	2200      	movs	r2, #0
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	f04f 30ff 	mov.w	r0, #4294967295
 800434c:	f000 f8e7 	bl	800451e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004350:	4a06      	ldr	r2, [pc, #24]	; (800436c <HAL_InitTick+0x5c>)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	e000      	b.n	800435c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
}
 800435c:	4618      	mov	r0, r3
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20000004 	.word	0x20000004
 8004368:	2000000c 	.word	0x2000000c
 800436c:	20000008 	.word	0x20000008

08004370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004374:	4b05      	ldr	r3, [pc, #20]	; (800438c <HAL_IncTick+0x1c>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_IncTick+0x20>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4413      	add	r3, r2
 8004380:	4a03      	ldr	r2, [pc, #12]	; (8004390 <HAL_IncTick+0x20>)
 8004382:	6013      	str	r3, [r2, #0]
}
 8004384:	bf00      	nop
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr
 800438c:	2000000c 	.word	0x2000000c
 8004390:	20000428 	.word	0x20000428

08004394 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  return uwTick;
 8004398:	4b02      	ldr	r3, [pc, #8]	; (80043a4 <HAL_GetTick+0x10>)
 800439a:	681b      	ldr	r3, [r3, #0]
}
 800439c:	4618      	mov	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr
 80043a4:	20000428 	.word	0x20000428

080043a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043b8:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <__NVIC_SetPriorityGrouping+0x44>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043c4:	4013      	ands	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043da:	4a04      	ldr	r2, [pc, #16]	; (80043ec <__NVIC_SetPriorityGrouping+0x44>)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	60d3      	str	r3, [r2, #12]
}
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	e000ed00 	.word	0xe000ed00

080043f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043f4:	4b04      	ldr	r3, [pc, #16]	; (8004408 <__NVIC_GetPriorityGrouping+0x18>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	f003 0307 	and.w	r3, r3, #7
}
 80043fe:	4618      	mov	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	6039      	str	r1, [r7, #0]
 8004416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441c:	2b00      	cmp	r3, #0
 800441e:	db0a      	blt.n	8004436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	b2da      	uxtb	r2, r3
 8004424:	490c      	ldr	r1, [pc, #48]	; (8004458 <__NVIC_SetPriority+0x4c>)
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	0112      	lsls	r2, r2, #4
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	440b      	add	r3, r1
 8004430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004434:	e00a      	b.n	800444c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	4908      	ldr	r1, [pc, #32]	; (800445c <__NVIC_SetPriority+0x50>)
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	3b04      	subs	r3, #4
 8004444:	0112      	lsls	r2, r2, #4
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	440b      	add	r3, r1
 800444a:	761a      	strb	r2, [r3, #24]
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	e000e100 	.word	0xe000e100
 800445c:	e000ed00 	.word	0xe000ed00

08004460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004460:	b480      	push	{r7}
 8004462:	b089      	sub	sp, #36	; 0x24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f1c3 0307 	rsb	r3, r3, #7
 800447a:	2b04      	cmp	r3, #4
 800447c:	bf28      	it	cs
 800447e:	2304      	movcs	r3, #4
 8004480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3304      	adds	r3, #4
 8004486:	2b06      	cmp	r3, #6
 8004488:	d902      	bls.n	8004490 <NVIC_EncodePriority+0x30>
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3b03      	subs	r3, #3
 800448e:	e000      	b.n	8004492 <NVIC_EncodePriority+0x32>
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004494:	f04f 32ff 	mov.w	r2, #4294967295
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43da      	mvns	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	401a      	ands	r2, r3
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044a8:	f04f 31ff 	mov.w	r1, #4294967295
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	fa01 f303 	lsl.w	r3, r1, r3
 80044b2:	43d9      	mvns	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b8:	4313      	orrs	r3, r2
         );
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3724      	adds	r7, #36	; 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr

080044c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044d4:	d301      	bcc.n	80044da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044d6:	2301      	movs	r3, #1
 80044d8:	e00f      	b.n	80044fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044da:	4a0a      	ldr	r2, [pc, #40]	; (8004504 <SysTick_Config+0x40>)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3b01      	subs	r3, #1
 80044e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044e2:	210f      	movs	r1, #15
 80044e4:	f04f 30ff 	mov.w	r0, #4294967295
 80044e8:	f7ff ff90 	bl	800440c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <SysTick_Config+0x40>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044f2:	4b04      	ldr	r3, [pc, #16]	; (8004504 <SysTick_Config+0x40>)
 80044f4:	2207      	movs	r2, #7
 80044f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	e000e010 	.word	0xe000e010

08004508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff ff49 	bl	80043a8 <__NVIC_SetPriorityGrouping>
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800451e:	b580      	push	{r7, lr}
 8004520:	b086      	sub	sp, #24
 8004522:	af00      	add	r7, sp, #0
 8004524:	4603      	mov	r3, r0
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
 800452a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004530:	f7ff ff5e 	bl	80043f0 <__NVIC_GetPriorityGrouping>
 8004534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	6978      	ldr	r0, [r7, #20]
 800453c:	f7ff ff90 	bl	8004460 <NVIC_EncodePriority>
 8004540:	4602      	mov	r2, r0
 8004542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004546:	4611      	mov	r1, r2
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff ff5f 	bl	800440c <__NVIC_SetPriority>
}
 800454e:	bf00      	nop
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff ffb0 	bl	80044c4 <SysTick_Config>
 8004564:	4603      	mov	r3, r0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004570:	b480      	push	{r7}
 8004572:	b08b      	sub	sp, #44	; 0x2c
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800457a:	2300      	movs	r3, #0
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800457e:	2300      	movs	r3, #0
 8004580:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004582:	e127      	b.n	80047d4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004584:	2201      	movs	r2, #1
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	4013      	ands	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	429a      	cmp	r2, r3
 800459e:	f040 8116 	bne.w	80047ce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b12      	cmp	r3, #18
 80045a8:	d034      	beq.n	8004614 <HAL_GPIO_Init+0xa4>
 80045aa:	2b12      	cmp	r3, #18
 80045ac:	d80d      	bhi.n	80045ca <HAL_GPIO_Init+0x5a>
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d02b      	beq.n	800460a <HAL_GPIO_Init+0x9a>
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d804      	bhi.n	80045c0 <HAL_GPIO_Init+0x50>
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d031      	beq.n	800461e <HAL_GPIO_Init+0xae>
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d01c      	beq.n	80045f8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80045be:	e048      	b.n	8004652 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d043      	beq.n	800464c <HAL_GPIO_Init+0xdc>
 80045c4:	2b11      	cmp	r3, #17
 80045c6:	d01b      	beq.n	8004600 <HAL_GPIO_Init+0x90>
          break;
 80045c8:	e043      	b.n	8004652 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80045ca:	4a89      	ldr	r2, [pc, #548]	; (80047f0 <HAL_GPIO_Init+0x280>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d026      	beq.n	800461e <HAL_GPIO_Init+0xae>
 80045d0:	4a87      	ldr	r2, [pc, #540]	; (80047f0 <HAL_GPIO_Init+0x280>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d806      	bhi.n	80045e4 <HAL_GPIO_Init+0x74>
 80045d6:	4a87      	ldr	r2, [pc, #540]	; (80047f4 <HAL_GPIO_Init+0x284>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d020      	beq.n	800461e <HAL_GPIO_Init+0xae>
 80045dc:	4a86      	ldr	r2, [pc, #536]	; (80047f8 <HAL_GPIO_Init+0x288>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d01d      	beq.n	800461e <HAL_GPIO_Init+0xae>
          break;
 80045e2:	e036      	b.n	8004652 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80045e4:	4a85      	ldr	r2, [pc, #532]	; (80047fc <HAL_GPIO_Init+0x28c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d019      	beq.n	800461e <HAL_GPIO_Init+0xae>
 80045ea:	4a85      	ldr	r2, [pc, #532]	; (8004800 <HAL_GPIO_Init+0x290>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d016      	beq.n	800461e <HAL_GPIO_Init+0xae>
 80045f0:	4a84      	ldr	r2, [pc, #528]	; (8004804 <HAL_GPIO_Init+0x294>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <HAL_GPIO_Init+0xae>
          break;
 80045f6:	e02c      	b.n	8004652 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	623b      	str	r3, [r7, #32]
          break;
 80045fe:	e028      	b.n	8004652 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	3304      	adds	r3, #4
 8004606:	623b      	str	r3, [r7, #32]
          break;
 8004608:	e023      	b.n	8004652 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	3308      	adds	r3, #8
 8004610:	623b      	str	r3, [r7, #32]
          break;
 8004612:	e01e      	b.n	8004652 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	330c      	adds	r3, #12
 800461a:	623b      	str	r3, [r7, #32]
          break;
 800461c:	e019      	b.n	8004652 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004626:	2304      	movs	r3, #4
 8004628:	623b      	str	r3, [r7, #32]
          break;
 800462a:	e012      	b.n	8004652 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d105      	bne.n	8004640 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004634:	2308      	movs	r3, #8
 8004636:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	611a      	str	r2, [r3, #16]
          break;
 800463e:	e008      	b.n	8004652 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004640:	2308      	movs	r3, #8
 8004642:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	615a      	str	r2, [r3, #20]
          break;
 800464a:	e002      	b.n	8004652 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800464c:	2300      	movs	r3, #0
 800464e:	623b      	str	r3, [r7, #32]
          break;
 8004650:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	2bff      	cmp	r3, #255	; 0xff
 8004656:	d801      	bhi.n	800465c <HAL_GPIO_Init+0xec>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	e001      	b.n	8004660 <HAL_GPIO_Init+0xf0>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	2bff      	cmp	r3, #255	; 0xff
 8004666:	d802      	bhi.n	800466e <HAL_GPIO_Init+0xfe>
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	e002      	b.n	8004674 <HAL_GPIO_Init+0x104>
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	3b08      	subs	r3, #8
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	210f      	movs	r1, #15
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	fa01 f303 	lsl.w	r3, r1, r3
 8004682:	43db      	mvns	r3, r3
 8004684:	401a      	ands	r2, r3
 8004686:	6a39      	ldr	r1, [r7, #32]
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	fa01 f303 	lsl.w	r3, r1, r3
 800468e:	431a      	orrs	r2, r3
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8096 	beq.w	80047ce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80046a2:	4b59      	ldr	r3, [pc, #356]	; (8004808 <HAL_GPIO_Init+0x298>)
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	4a58      	ldr	r2, [pc, #352]	; (8004808 <HAL_GPIO_Init+0x298>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	6193      	str	r3, [r2, #24]
 80046ae:	4b56      	ldr	r3, [pc, #344]	; (8004808 <HAL_GPIO_Init+0x298>)
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80046ba:	4a54      	ldr	r2, [pc, #336]	; (800480c <HAL_GPIO_Init+0x29c>)
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	089b      	lsrs	r3, r3, #2
 80046c0:	3302      	adds	r3, #2
 80046c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	220f      	movs	r2, #15
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	43db      	mvns	r3, r3
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4013      	ands	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a4b      	ldr	r2, [pc, #300]	; (8004810 <HAL_GPIO_Init+0x2a0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d013      	beq.n	800470e <HAL_GPIO_Init+0x19e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a4a      	ldr	r2, [pc, #296]	; (8004814 <HAL_GPIO_Init+0x2a4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00d      	beq.n	800470a <HAL_GPIO_Init+0x19a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a49      	ldr	r2, [pc, #292]	; (8004818 <HAL_GPIO_Init+0x2a8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d007      	beq.n	8004706 <HAL_GPIO_Init+0x196>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a48      	ldr	r2, [pc, #288]	; (800481c <HAL_GPIO_Init+0x2ac>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d101      	bne.n	8004702 <HAL_GPIO_Init+0x192>
 80046fe:	2303      	movs	r3, #3
 8004700:	e006      	b.n	8004710 <HAL_GPIO_Init+0x1a0>
 8004702:	2304      	movs	r3, #4
 8004704:	e004      	b.n	8004710 <HAL_GPIO_Init+0x1a0>
 8004706:	2302      	movs	r3, #2
 8004708:	e002      	b.n	8004710 <HAL_GPIO_Init+0x1a0>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <HAL_GPIO_Init+0x1a0>
 800470e:	2300      	movs	r3, #0
 8004710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004712:	f002 0203 	and.w	r2, r2, #3
 8004716:	0092      	lsls	r2, r2, #2
 8004718:	4093      	lsls	r3, r2
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4313      	orrs	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004720:	493a      	ldr	r1, [pc, #232]	; (800480c <HAL_GPIO_Init+0x29c>)
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	089b      	lsrs	r3, r3, #2
 8004726:	3302      	adds	r3, #2
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d006      	beq.n	8004748 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800473a:	4b39      	ldr	r3, [pc, #228]	; (8004820 <HAL_GPIO_Init+0x2b0>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4938      	ldr	r1, [pc, #224]	; (8004820 <HAL_GPIO_Init+0x2b0>)
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	4313      	orrs	r3, r2
 8004744:	600b      	str	r3, [r1, #0]
 8004746:	e006      	b.n	8004756 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004748:	4b35      	ldr	r3, [pc, #212]	; (8004820 <HAL_GPIO_Init+0x2b0>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	43db      	mvns	r3, r3
 8004750:	4933      	ldr	r1, [pc, #204]	; (8004820 <HAL_GPIO_Init+0x2b0>)
 8004752:	4013      	ands	r3, r2
 8004754:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d006      	beq.n	8004770 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004762:	4b2f      	ldr	r3, [pc, #188]	; (8004820 <HAL_GPIO_Init+0x2b0>)
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	492e      	ldr	r1, [pc, #184]	; (8004820 <HAL_GPIO_Init+0x2b0>)
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	4313      	orrs	r3, r2
 800476c:	604b      	str	r3, [r1, #4]
 800476e:	e006      	b.n	800477e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004770:	4b2b      	ldr	r3, [pc, #172]	; (8004820 <HAL_GPIO_Init+0x2b0>)
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	43db      	mvns	r3, r3
 8004778:	4929      	ldr	r1, [pc, #164]	; (8004820 <HAL_GPIO_Init+0x2b0>)
 800477a:	4013      	ands	r3, r2
 800477c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d006      	beq.n	8004798 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800478a:	4b25      	ldr	r3, [pc, #148]	; (8004820 <HAL_GPIO_Init+0x2b0>)
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	4924      	ldr	r1, [pc, #144]	; (8004820 <HAL_GPIO_Init+0x2b0>)
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	4313      	orrs	r3, r2
 8004794:	608b      	str	r3, [r1, #8]
 8004796:	e006      	b.n	80047a6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004798:	4b21      	ldr	r3, [pc, #132]	; (8004820 <HAL_GPIO_Init+0x2b0>)
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	43db      	mvns	r3, r3
 80047a0:	491f      	ldr	r1, [pc, #124]	; (8004820 <HAL_GPIO_Init+0x2b0>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d006      	beq.n	80047c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80047b2:	4b1b      	ldr	r3, [pc, #108]	; (8004820 <HAL_GPIO_Init+0x2b0>)
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	491a      	ldr	r1, [pc, #104]	; (8004820 <HAL_GPIO_Init+0x2b0>)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60cb      	str	r3, [r1, #12]
 80047be:	e006      	b.n	80047ce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80047c0:	4b17      	ldr	r3, [pc, #92]	; (8004820 <HAL_GPIO_Init+0x2b0>)
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	43db      	mvns	r3, r3
 80047c8:	4915      	ldr	r1, [pc, #84]	; (8004820 <HAL_GPIO_Init+0x2b0>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	3301      	adds	r3, #1
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	fa22 f303 	lsr.w	r3, r2, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f47f aed0 	bne.w	8004584 <HAL_GPIO_Init+0x14>
  }
}
 80047e4:	bf00      	nop
 80047e6:	372c      	adds	r7, #44	; 0x2c
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	10210000 	.word	0x10210000
 80047f4:	10110000 	.word	0x10110000
 80047f8:	10120000 	.word	0x10120000
 80047fc:	10310000 	.word	0x10310000
 8004800:	10320000 	.word	0x10320000
 8004804:	10220000 	.word	0x10220000
 8004808:	40021000 	.word	0x40021000
 800480c:	40010000 	.word	0x40010000
 8004810:	40010800 	.word	0x40010800
 8004814:	40010c00 	.word	0x40010c00
 8004818:	40011000 	.word	0x40011000
 800481c:	40011400 	.word	0x40011400
 8004820:	40010400 	.word	0x40010400

08004824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	807b      	strh	r3, [r7, #2]
 8004830:	4613      	mov	r3, r2
 8004832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004834:	787b      	ldrb	r3, [r7, #1]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800483a:	887a      	ldrh	r2, [r7, #2]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004840:	e003      	b.n	800484a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004842:	887b      	ldrh	r3, [r7, #2]
 8004844:	041a      	lsls	r2, r3, #16
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	611a      	str	r2, [r3, #16]
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr

08004854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e26c      	b.n	8004d40 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 8087 	beq.w	8004982 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004874:	4b92      	ldr	r3, [pc, #584]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 030c 	and.w	r3, r3, #12
 800487c:	2b04      	cmp	r3, #4
 800487e:	d00c      	beq.n	800489a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004880:	4b8f      	ldr	r3, [pc, #572]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f003 030c 	and.w	r3, r3, #12
 8004888:	2b08      	cmp	r3, #8
 800488a:	d112      	bne.n	80048b2 <HAL_RCC_OscConfig+0x5e>
 800488c:	4b8c      	ldr	r3, [pc, #560]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004898:	d10b      	bne.n	80048b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800489a:	4b89      	ldr	r3, [pc, #548]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d06c      	beq.n	8004980 <HAL_RCC_OscConfig+0x12c>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d168      	bne.n	8004980 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e246      	b.n	8004d40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ba:	d106      	bne.n	80048ca <HAL_RCC_OscConfig+0x76>
 80048bc:	4b80      	ldr	r3, [pc, #512]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a7f      	ldr	r2, [pc, #508]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80048c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c6:	6013      	str	r3, [r2, #0]
 80048c8:	e02e      	b.n	8004928 <HAL_RCC_OscConfig+0xd4>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10c      	bne.n	80048ec <HAL_RCC_OscConfig+0x98>
 80048d2:	4b7b      	ldr	r3, [pc, #492]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a7a      	ldr	r2, [pc, #488]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80048d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	4b78      	ldr	r3, [pc, #480]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a77      	ldr	r2, [pc, #476]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80048e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	e01d      	b.n	8004928 <HAL_RCC_OscConfig+0xd4>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048f4:	d10c      	bne.n	8004910 <HAL_RCC_OscConfig+0xbc>
 80048f6:	4b72      	ldr	r3, [pc, #456]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a71      	ldr	r2, [pc, #452]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80048fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	4b6f      	ldr	r3, [pc, #444]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a6e      	ldr	r2, [pc, #440]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e00b      	b.n	8004928 <HAL_RCC_OscConfig+0xd4>
 8004910:	4b6b      	ldr	r3, [pc, #428]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a6a      	ldr	r2, [pc, #424]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	4b68      	ldr	r3, [pc, #416]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a67      	ldr	r2, [pc, #412]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004926:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d013      	beq.n	8004958 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004930:	f7ff fd30 	bl	8004394 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004938:	f7ff fd2c 	bl	8004394 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b64      	cmp	r3, #100	; 0x64
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e1fa      	b.n	8004d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494a:	4b5d      	ldr	r3, [pc, #372]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0xe4>
 8004956:	e014      	b.n	8004982 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004958:	f7ff fd1c 	bl	8004394 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004960:	f7ff fd18 	bl	8004394 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b64      	cmp	r3, #100	; 0x64
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e1e6      	b.n	8004d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004972:	4b53      	ldr	r3, [pc, #332]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f0      	bne.n	8004960 <HAL_RCC_OscConfig+0x10c>
 800497e:	e000      	b.n	8004982 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d063      	beq.n	8004a56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800498e:	4b4c      	ldr	r3, [pc, #304]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00b      	beq.n	80049b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800499a:	4b49      	ldr	r3, [pc, #292]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f003 030c 	and.w	r3, r3, #12
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d11c      	bne.n	80049e0 <HAL_RCC_OscConfig+0x18c>
 80049a6:	4b46      	ldr	r3, [pc, #280]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d116      	bne.n	80049e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b2:	4b43      	ldr	r3, [pc, #268]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <HAL_RCC_OscConfig+0x176>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d001      	beq.n	80049ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e1ba      	b.n	8004d40 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ca:	4b3d      	ldr	r3, [pc, #244]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	4939      	ldr	r1, [pc, #228]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049de:	e03a      	b.n	8004a56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d020      	beq.n	8004a2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049e8:	4b36      	ldr	r3, [pc, #216]	; (8004ac4 <HAL_RCC_OscConfig+0x270>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ee:	f7ff fcd1 	bl	8004394 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049f6:	f7ff fccd 	bl	8004394 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e19b      	b.n	8004d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a08:	4b2d      	ldr	r3, [pc, #180]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f0      	beq.n	80049f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a14:	4b2a      	ldr	r3, [pc, #168]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	4927      	ldr	r1, [pc, #156]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	600b      	str	r3, [r1, #0]
 8004a28:	e015      	b.n	8004a56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a2a:	4b26      	ldr	r3, [pc, #152]	; (8004ac4 <HAL_RCC_OscConfig+0x270>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a30:	f7ff fcb0 	bl	8004394 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a38:	f7ff fcac 	bl	8004394 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e17a      	b.n	8004d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4a:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f0      	bne.n	8004a38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d03a      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d019      	beq.n	8004a9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a6a:	4b17      	ldr	r3, [pc, #92]	; (8004ac8 <HAL_RCC_OscConfig+0x274>)
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a70:	f7ff fc90 	bl	8004394 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a78:	f7ff fc8c 	bl	8004394 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e15a      	b.n	8004d40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a96:	2001      	movs	r0, #1
 8004a98:	f000 fada 	bl	8005050 <RCC_Delay>
 8004a9c:	e01c      	b.n	8004ad8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <HAL_RCC_OscConfig+0x274>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa4:	f7ff fc76 	bl	8004394 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aaa:	e00f      	b.n	8004acc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aac:	f7ff fc72 	bl	8004394 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d908      	bls.n	8004acc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e140      	b.n	8004d40 <HAL_RCC_OscConfig+0x4ec>
 8004abe:	bf00      	nop
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	42420000 	.word	0x42420000
 8004ac8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004acc:	4b9e      	ldr	r3, [pc, #632]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e9      	bne.n	8004aac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 80a6 	beq.w	8004c32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aea:	4b97      	ldr	r3, [pc, #604]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10d      	bne.n	8004b12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af6:	4b94      	ldr	r3, [pc, #592]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	4a93      	ldr	r2, [pc, #588]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b00:	61d3      	str	r3, [r2, #28]
 8004b02:	4b91      	ldr	r3, [pc, #580]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	60bb      	str	r3, [r7, #8]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b12:	4b8e      	ldr	r3, [pc, #568]	; (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d118      	bne.n	8004b50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b1e:	4b8b      	ldr	r3, [pc, #556]	; (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a8a      	ldr	r2, [pc, #552]	; (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b2a:	f7ff fc33 	bl	8004394 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b32:	f7ff fc2f 	bl	8004394 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b64      	cmp	r3, #100	; 0x64
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e0fd      	b.n	8004d40 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b44:	4b81      	ldr	r3, [pc, #516]	; (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d106      	bne.n	8004b66 <HAL_RCC_OscConfig+0x312>
 8004b58:	4b7b      	ldr	r3, [pc, #492]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	4a7a      	ldr	r2, [pc, #488]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	6213      	str	r3, [r2, #32]
 8004b64:	e02d      	b.n	8004bc2 <HAL_RCC_OscConfig+0x36e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x334>
 8004b6e:	4b76      	ldr	r3, [pc, #472]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	4a75      	ldr	r2, [pc, #468]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004b74:	f023 0301 	bic.w	r3, r3, #1
 8004b78:	6213      	str	r3, [r2, #32]
 8004b7a:	4b73      	ldr	r3, [pc, #460]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	4a72      	ldr	r2, [pc, #456]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004b80:	f023 0304 	bic.w	r3, r3, #4
 8004b84:	6213      	str	r3, [r2, #32]
 8004b86:	e01c      	b.n	8004bc2 <HAL_RCC_OscConfig+0x36e>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	2b05      	cmp	r3, #5
 8004b8e:	d10c      	bne.n	8004baa <HAL_RCC_OscConfig+0x356>
 8004b90:	4b6d      	ldr	r3, [pc, #436]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	4a6c      	ldr	r2, [pc, #432]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004b96:	f043 0304 	orr.w	r3, r3, #4
 8004b9a:	6213      	str	r3, [r2, #32]
 8004b9c:	4b6a      	ldr	r3, [pc, #424]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	4a69      	ldr	r2, [pc, #420]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	6213      	str	r3, [r2, #32]
 8004ba8:	e00b      	b.n	8004bc2 <HAL_RCC_OscConfig+0x36e>
 8004baa:	4b67      	ldr	r3, [pc, #412]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	4a66      	ldr	r2, [pc, #408]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	6213      	str	r3, [r2, #32]
 8004bb6:	4b64      	ldr	r3, [pc, #400]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	4a63      	ldr	r2, [pc, #396]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004bbc:	f023 0304 	bic.w	r3, r3, #4
 8004bc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d015      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bca:	f7ff fbe3 	bl	8004394 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd0:	e00a      	b.n	8004be8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd2:	f7ff fbdf 	bl	8004394 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e0ab      	b.n	8004d40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be8:	4b57      	ldr	r3, [pc, #348]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0ee      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x37e>
 8004bf4:	e014      	b.n	8004c20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf6:	f7ff fbcd 	bl	8004394 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bfc:	e00a      	b.n	8004c14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfe:	f7ff fbc9 	bl	8004394 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e095      	b.n	8004d40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c14:	4b4c      	ldr	r3, [pc, #304]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1ee      	bne.n	8004bfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c20:	7dfb      	ldrb	r3, [r7, #23]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d105      	bne.n	8004c32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c26:	4b48      	ldr	r3, [pc, #288]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	4a47      	ldr	r2, [pc, #284]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8081 	beq.w	8004d3e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c3c:	4b42      	ldr	r3, [pc, #264]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f003 030c 	and.w	r3, r3, #12
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d061      	beq.n	8004d0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d146      	bne.n	8004cde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c50:	4b3f      	ldr	r3, [pc, #252]	; (8004d50 <HAL_RCC_OscConfig+0x4fc>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c56:	f7ff fb9d 	bl	8004394 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c5e:	f7ff fb99 	bl	8004394 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e067      	b.n	8004d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c70:	4b35      	ldr	r3, [pc, #212]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f0      	bne.n	8004c5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c84:	d108      	bne.n	8004c98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c86:	4b30      	ldr	r3, [pc, #192]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	492d      	ldr	r1, [pc, #180]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c98:	4b2b      	ldr	r3, [pc, #172]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a19      	ldr	r1, [r3, #32]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	4927      	ldr	r1, [pc, #156]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cb0:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <HAL_RCC_OscConfig+0x4fc>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb6:	f7ff fb6d 	bl	8004394 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cbe:	f7ff fb69 	bl	8004394 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e037      	b.n	8004d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cd0:	4b1d      	ldr	r3, [pc, #116]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0f0      	beq.n	8004cbe <HAL_RCC_OscConfig+0x46a>
 8004cdc:	e02f      	b.n	8004d3e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cde:	4b1c      	ldr	r3, [pc, #112]	; (8004d50 <HAL_RCC_OscConfig+0x4fc>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7ff fb56 	bl	8004394 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cec:	f7ff fb52 	bl	8004394 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e020      	b.n	8004d40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cfe:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0x498>
 8004d0a:	e018      	b.n	8004d3e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e013      	b.n	8004d40 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d18:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <HAL_RCC_OscConfig+0x4f4>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d106      	bne.n	8004d3a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d001      	beq.n	8004d3e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	40007000 	.word	0x40007000
 8004d50:	42420060 	.word	0x42420060

08004d54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0d0      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d68:	4b6a      	ldr	r3, [pc, #424]	; (8004f14 <HAL_RCC_ClockConfig+0x1c0>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d910      	bls.n	8004d98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d76:	4b67      	ldr	r3, [pc, #412]	; (8004f14 <HAL_RCC_ClockConfig+0x1c0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f023 0207 	bic.w	r2, r3, #7
 8004d7e:	4965      	ldr	r1, [pc, #404]	; (8004f14 <HAL_RCC_ClockConfig+0x1c0>)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d86:	4b63      	ldr	r3, [pc, #396]	; (8004f14 <HAL_RCC_ClockConfig+0x1c0>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d001      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e0b8      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d020      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004db0:	4b59      	ldr	r3, [pc, #356]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	4a58      	ldr	r2, [pc, #352]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004db6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004dba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dc8:	4b53      	ldr	r3, [pc, #332]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	4a52      	ldr	r2, [pc, #328]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004dce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004dd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd4:	4b50      	ldr	r3, [pc, #320]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	494d      	ldr	r1, [pc, #308]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d040      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d107      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfa:	4b47      	ldr	r3, [pc, #284]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d115      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e07f      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d107      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e12:	4b41      	ldr	r3, [pc, #260]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d109      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e073      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e22:	4b3d      	ldr	r3, [pc, #244]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e06b      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e32:	4b39      	ldr	r3, [pc, #228]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f023 0203 	bic.w	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	4936      	ldr	r1, [pc, #216]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e44:	f7ff faa6 	bl	8004394 <HAL_GetTick>
 8004e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4a:	e00a      	b.n	8004e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e4c:	f7ff faa2 	bl	8004394 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e053      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e62:	4b2d      	ldr	r3, [pc, #180]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f003 020c 	and.w	r2, r3, #12
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d1eb      	bne.n	8004e4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e74:	4b27      	ldr	r3, [pc, #156]	; (8004f14 <HAL_RCC_ClockConfig+0x1c0>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d210      	bcs.n	8004ea4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e82:	4b24      	ldr	r3, [pc, #144]	; (8004f14 <HAL_RCC_ClockConfig+0x1c0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f023 0207 	bic.w	r2, r3, #7
 8004e8a:	4922      	ldr	r1, [pc, #136]	; (8004f14 <HAL_RCC_ClockConfig+0x1c0>)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e92:	4b20      	ldr	r3, [pc, #128]	; (8004f14 <HAL_RCC_ClockConfig+0x1c0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d001      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e032      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d008      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eb0:	4b19      	ldr	r3, [pc, #100]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4916      	ldr	r1, [pc, #88]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ece:	4b12      	ldr	r3, [pc, #72]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	490e      	ldr	r1, [pc, #56]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ee2:	f000 f821 	bl	8004f28 <HAL_RCC_GetSysClockFreq>
 8004ee6:	4601      	mov	r1, r0
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	091b      	lsrs	r3, r3, #4
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	4a0a      	ldr	r2, [pc, #40]	; (8004f1c <HAL_RCC_ClockConfig+0x1c8>)
 8004ef4:	5cd3      	ldrb	r3, [r2, r3]
 8004ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8004efa:	4a09      	ldr	r2, [pc, #36]	; (8004f20 <HAL_RCC_ClockConfig+0x1cc>)
 8004efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <HAL_RCC_ClockConfig+0x1d0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff fa04 	bl	8004310 <HAL_InitTick>

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40022000 	.word	0x40022000
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	08006140 	.word	0x08006140
 8004f20:	20000004 	.word	0x20000004
 8004f24:	20000008 	.word	0x20000008

08004f28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f28:	b490      	push	{r4, r7}
 8004f2a:	b08a      	sub	sp, #40	; 0x28
 8004f2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f2e:	4b2a      	ldr	r3, [pc, #168]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f30:	1d3c      	adds	r4, r7, #4
 8004f32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f38:	4b28      	ldr	r3, [pc, #160]	; (8004fdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
 8004f42:	2300      	movs	r3, #0
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	2300      	movs	r3, #0
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f52:	4b23      	ldr	r3, [pc, #140]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d002      	beq.n	8004f68 <HAL_RCC_GetSysClockFreq+0x40>
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d003      	beq.n	8004f6e <HAL_RCC_GetSysClockFreq+0x46>
 8004f66:	e02d      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f68:	4b1e      	ldr	r3, [pc, #120]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f6a:	623b      	str	r3, [r7, #32]
      break;
 8004f6c:	e02d      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	0c9b      	lsrs	r3, r3, #18
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004f80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d013      	beq.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f8c:	4b14      	ldr	r3, [pc, #80]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	0c5b      	lsrs	r3, r3, #17
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004fa0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	4a0f      	ldr	r2, [pc, #60]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fa6:	fb02 f203 	mul.w	r2, r2, r3
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb2:	e004      	b.n	8004fbe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	4a0c      	ldr	r2, [pc, #48]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fb8:	fb02 f303 	mul.w	r3, r2, r3
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	623b      	str	r3, [r7, #32]
      break;
 8004fc2:	e002      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fc4:	4b07      	ldr	r3, [pc, #28]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fc6:	623b      	str	r3, [r7, #32]
      break;
 8004fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fca:	6a3b      	ldr	r3, [r7, #32]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3728      	adds	r7, #40	; 0x28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc90      	pop	{r4, r7}
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	08005e7c 	.word	0x08005e7c
 8004fdc:	08005e8c 	.word	0x08005e8c
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	007a1200 	.word	0x007a1200
 8004fe8:	003d0900 	.word	0x003d0900

08004fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ff0:	4b02      	ldr	r3, [pc, #8]	; (8004ffc <HAL_RCC_GetHCLKFreq+0x10>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr
 8004ffc:	20000004 	.word	0x20000004

08005000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005004:	f7ff fff2 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8005008:	4601      	mov	r1, r0
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	0a1b      	lsrs	r3, r3, #8
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	4a03      	ldr	r2, [pc, #12]	; (8005024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005016:	5cd3      	ldrb	r3, [r2, r3]
 8005018:	fa21 f303 	lsr.w	r3, r1, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40021000 	.word	0x40021000
 8005024:	08006150 	.word	0x08006150

08005028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800502c:	f7ff ffde 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8005030:	4601      	mov	r1, r0
 8005032:	4b05      	ldr	r3, [pc, #20]	; (8005048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	0adb      	lsrs	r3, r3, #11
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	4a03      	ldr	r2, [pc, #12]	; (800504c <HAL_RCC_GetPCLK2Freq+0x24>)
 800503e:	5cd3      	ldrb	r3, [r2, r3]
 8005040:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005044:	4618      	mov	r0, r3
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40021000 	.word	0x40021000
 800504c:	08006150 	.word	0x08006150

08005050 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005058:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <RCC_Delay+0x34>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a0a      	ldr	r2, [pc, #40]	; (8005088 <RCC_Delay+0x38>)
 800505e:	fba2 2303 	umull	r2, r3, r2, r3
 8005062:	0a5b      	lsrs	r3, r3, #9
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	fb02 f303 	mul.w	r3, r2, r3
 800506a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800506c:	bf00      	nop
  }
  while (Delay --);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1e5a      	subs	r2, r3, #1
 8005072:	60fa      	str	r2, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1f9      	bne.n	800506c <RCC_Delay+0x1c>
}
 8005078:	bf00      	nop
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20000004 	.word	0x20000004
 8005088:	10624dd3 	.word	0x10624dd3

0800508c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e041      	b.n	8005122 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fe ffee 	bl	8004094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3304      	adds	r3, #4
 80050c8:	4619      	mov	r1, r3
 80050ca:	4610      	mov	r0, r2
 80050cc:	f000 fa94 	bl	80055f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b082      	sub	sp, #8
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e041      	b.n	80051c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d106      	bne.n	8005156 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7fe ff31 	bl	8003fb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2202      	movs	r2, #2
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3304      	adds	r3, #4
 8005166:	4619      	mov	r1, r3
 8005168:	4610      	mov	r0, r2
 800516a:	f000 fa45 	bl	80055f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e093      	b.n	8005304 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d106      	bne.n	80051f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7fe ff13 	bl	800401c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800520c:	f023 0307 	bic.w	r3, r3, #7
 8005210:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3304      	adds	r3, #4
 800521a:	4619      	mov	r1, r3
 800521c:	4610      	mov	r0, r2
 800521e:	f000 f9eb 	bl	80055f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524a:	f023 0303 	bic.w	r3, r3, #3
 800524e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	021b      	lsls	r3, r3, #8
 800525a:	4313      	orrs	r3, r2
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005268:	f023 030c 	bic.w	r3, r3, #12
 800526c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005274:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005278:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	021b      	lsls	r3, r3, #8
 8005284:	4313      	orrs	r3, r2
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	011a      	lsls	r2, r3, #4
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	031b      	lsls	r3, r3, #12
 8005298:	4313      	orrs	r3, r2
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80052a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	4313      	orrs	r3, r2
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005322:	2302      	movs	r3, #2
 8005324:	e0ac      	b.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b0c      	cmp	r3, #12
 8005332:	f200 809f 	bhi.w	8005474 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005336:	a201      	add	r2, pc, #4	; (adr r2, 800533c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	08005371 	.word	0x08005371
 8005340:	08005475 	.word	0x08005475
 8005344:	08005475 	.word	0x08005475
 8005348:	08005475 	.word	0x08005475
 800534c:	080053b1 	.word	0x080053b1
 8005350:	08005475 	.word	0x08005475
 8005354:	08005475 	.word	0x08005475
 8005358:	08005475 	.word	0x08005475
 800535c:	080053f3 	.word	0x080053f3
 8005360:	08005475 	.word	0x08005475
 8005364:	08005475 	.word	0x08005475
 8005368:	08005475 	.word	0x08005475
 800536c:	08005433 	.word	0x08005433
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	4618      	mov	r0, r3
 8005378:	f000 f9a0 	bl	80056bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0208 	orr.w	r2, r2, #8
 800538a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0204 	bic.w	r2, r2, #4
 800539a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6999      	ldr	r1, [r3, #24]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	691a      	ldr	r2, [r3, #16]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	619a      	str	r2, [r3, #24]
      break;
 80053ae:	e062      	b.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 f9e6 	bl	8005788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6999      	ldr	r1, [r3, #24]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	021a      	lsls	r2, r3, #8
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	619a      	str	r2, [r3, #24]
      break;
 80053f0:	e041      	b.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fa2f 	bl	800585c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0208 	orr.w	r2, r2, #8
 800540c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69da      	ldr	r2, [r3, #28]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0204 	bic.w	r2, r2, #4
 800541c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69d9      	ldr	r1, [r3, #28]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	61da      	str	r2, [r3, #28]
      break;
 8005430:	e021      	b.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fa79 	bl	8005930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69da      	ldr	r2, [r3, #28]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800544c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69d9      	ldr	r1, [r3, #28]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	021a      	lsls	r2, r3, #8
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	61da      	str	r2, [r3, #28]
      break;
 8005472:	e000      	b.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005474:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <HAL_TIM_ConfigClockSource+0x18>
 800549c:	2302      	movs	r3, #2
 800549e:	e0a6      	b.n	80055ee <HAL_TIM_ConfigClockSource+0x166>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d067      	beq.n	80055a8 <HAL_TIM_ConfigClockSource+0x120>
 80054d8:	2b40      	cmp	r3, #64	; 0x40
 80054da:	d80b      	bhi.n	80054f4 <HAL_TIM_ConfigClockSource+0x6c>
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d073      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x140>
 80054e0:	2b10      	cmp	r3, #16
 80054e2:	d802      	bhi.n	80054ea <HAL_TIM_ConfigClockSource+0x62>
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d06f      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80054e8:	e078      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054ea:	2b20      	cmp	r3, #32
 80054ec:	d06c      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x140>
 80054ee:	2b30      	cmp	r3, #48	; 0x30
 80054f0:	d06a      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80054f2:	e073      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054f4:	2b70      	cmp	r3, #112	; 0x70
 80054f6:	d00d      	beq.n	8005514 <HAL_TIM_ConfigClockSource+0x8c>
 80054f8:	2b70      	cmp	r3, #112	; 0x70
 80054fa:	d804      	bhi.n	8005506 <HAL_TIM_ConfigClockSource+0x7e>
 80054fc:	2b50      	cmp	r3, #80	; 0x50
 80054fe:	d033      	beq.n	8005568 <HAL_TIM_ConfigClockSource+0xe0>
 8005500:	2b60      	cmp	r3, #96	; 0x60
 8005502:	d041      	beq.n	8005588 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005504:	e06a      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800550a:	d066      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x152>
 800550c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005510:	d017      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005512:	e063      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	6899      	ldr	r1, [r3, #8]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f000 fac9 	bl	8005aba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005536:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	609a      	str	r2, [r3, #8]
      break;
 8005540:	e04c      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6899      	ldr	r1, [r3, #8]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f000 fab2 	bl	8005aba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005564:	609a      	str	r2, [r3, #8]
      break;
 8005566:	e039      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	6859      	ldr	r1, [r3, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	461a      	mov	r2, r3
 8005576:	f000 fa29 	bl	80059cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2150      	movs	r1, #80	; 0x50
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fa80 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 8005586:	e029      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	6859      	ldr	r1, [r3, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	461a      	mov	r2, r3
 8005596:	f000 fa47 	bl	8005a28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2160      	movs	r1, #96	; 0x60
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fa70 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 80055a6:	e019      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	6859      	ldr	r1, [r3, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	461a      	mov	r2, r3
 80055b6:	f000 fa09 	bl	80059cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2140      	movs	r1, #64	; 0x40
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fa60 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 80055c6:	e009      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f000 fa57 	bl	8005a86 <TIM_ITRx_SetConfig>
        break;
 80055d8:	e000      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80055da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a29      	ldr	r2, [pc, #164]	; (80056b0 <TIM_Base_SetConfig+0xb8>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00b      	beq.n	8005628 <TIM_Base_SetConfig+0x30>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005616:	d007      	beq.n	8005628 <TIM_Base_SetConfig+0x30>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a26      	ldr	r2, [pc, #152]	; (80056b4 <TIM_Base_SetConfig+0xbc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d003      	beq.n	8005628 <TIM_Base_SetConfig+0x30>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a25      	ldr	r2, [pc, #148]	; (80056b8 <TIM_Base_SetConfig+0xc0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d108      	bne.n	800563a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a1c      	ldr	r2, [pc, #112]	; (80056b0 <TIM_Base_SetConfig+0xb8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00b      	beq.n	800565a <TIM_Base_SetConfig+0x62>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005648:	d007      	beq.n	800565a <TIM_Base_SetConfig+0x62>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a19      	ldr	r2, [pc, #100]	; (80056b4 <TIM_Base_SetConfig+0xbc>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d003      	beq.n	800565a <TIM_Base_SetConfig+0x62>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a18      	ldr	r2, [pc, #96]	; (80056b8 <TIM_Base_SetConfig+0xc0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d108      	bne.n	800566c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a07      	ldr	r2, [pc, #28]	; (80056b0 <TIM_Base_SetConfig+0xb8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d103      	bne.n	80056a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	615a      	str	r2, [r3, #20]
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr
 80056b0:	40012c00 	.word	0x40012c00
 80056b4:	40000400 	.word	0x40000400
 80056b8:	40000800 	.word	0x40000800

080056bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	f023 0201 	bic.w	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 0303 	bic.w	r3, r3, #3
 80056f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f023 0302 	bic.w	r3, r3, #2
 8005704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a1c      	ldr	r2, [pc, #112]	; (8005784 <TIM_OC1_SetConfig+0xc8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d10c      	bne.n	8005732 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f023 0308 	bic.w	r3, r3, #8
 800571e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f023 0304 	bic.w	r3, r3, #4
 8005730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a13      	ldr	r2, [pc, #76]	; (8005784 <TIM_OC1_SetConfig+0xc8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d111      	bne.n	800575e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	621a      	str	r2, [r3, #32]
}
 8005778:	bf00      	nop
 800577a:	371c      	adds	r7, #28
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40012c00 	.word	0x40012c00

08005788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	f023 0210 	bic.w	r2, r3, #16
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f023 0320 	bic.w	r3, r3, #32
 80057d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a1d      	ldr	r2, [pc, #116]	; (8005858 <TIM_OC2_SetConfig+0xd0>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d10d      	bne.n	8005804 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005802:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a14      	ldr	r2, [pc, #80]	; (8005858 <TIM_OC2_SetConfig+0xd0>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d113      	bne.n	8005834 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005812:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800581a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	621a      	str	r2, [r3, #32]
}
 800584e:	bf00      	nop
 8005850:	371c      	adds	r7, #28
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr
 8005858:	40012c00 	.word	0x40012c00

0800585c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0303 	bic.w	r3, r3, #3
 8005892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a1d      	ldr	r2, [pc, #116]	; (800592c <TIM_OC3_SetConfig+0xd0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d10d      	bne.n	80058d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a14      	ldr	r2, [pc, #80]	; (800592c <TIM_OC3_SetConfig+0xd0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d113      	bne.n	8005906 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	621a      	str	r2, [r3, #32]
}
 8005920:	bf00      	nop
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	bc80      	pop	{r7}
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40012c00 	.word	0x40012c00

08005930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800597a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	031b      	lsls	r3, r3, #12
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a0f      	ldr	r2, [pc, #60]	; (80059c8 <TIM_OC4_SetConfig+0x98>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d109      	bne.n	80059a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005996:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	019b      	lsls	r3, r3, #6
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	621a      	str	r2, [r3, #32]
}
 80059be:	bf00      	nop
 80059c0:	371c      	adds	r7, #28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc80      	pop	{r7}
 80059c6:	4770      	bx	lr
 80059c8:	40012c00 	.word	0x40012c00

080059cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f023 0201 	bic.w	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f023 030a 	bic.w	r3, r3, #10
 8005a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	621a      	str	r2, [r3, #32]
}
 8005a1e:	bf00      	nop
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr

08005a28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	f023 0210 	bic.w	r2, r3, #16
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	031b      	lsls	r3, r3, #12
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	621a      	str	r2, [r3, #32]
}
 8005a7c:	bf00      	nop
 8005a7e:	371c      	adds	r7, #28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bc80      	pop	{r7}
 8005a84:	4770      	bx	lr

08005a86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b085      	sub	sp, #20
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f043 0307 	orr.w	r3, r3, #7
 8005aa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	609a      	str	r2, [r3, #8]
}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc80      	pop	{r7}
 8005ab8:	4770      	bx	lr

08005aba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b087      	sub	sp, #28
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	60f8      	str	r0, [r7, #12]
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	607a      	str	r2, [r7, #4]
 8005ac6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	021a      	lsls	r2, r3, #8
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	431a      	orrs	r2, r3
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	609a      	str	r2, [r3, #8]
}
 8005aee:	bf00      	nop
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bc80      	pop	{r7}
 8005af6:	4770      	bx	lr

08005af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d101      	bne.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e046      	b.n	8005b9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a16      	ldr	r2, [pc, #88]	; (8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00e      	beq.n	8005b72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b5c:	d009      	beq.n	8005b72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a12      	ldr	r2, [pc, #72]	; (8005bac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d004      	beq.n	8005b72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a10      	ldr	r2, [pc, #64]	; (8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d10c      	bne.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bc80      	pop	{r7}
 8005ba6:	4770      	bx	lr
 8005ba8:	40012c00 	.word	0x40012c00
 8005bac:	40000400 	.word	0x40000400
 8005bb0:	40000800 	.word	0x40000800

08005bb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e03d      	b.n	8005c4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bc80      	pop	{r7}
 8005c54:	4770      	bx	lr

08005c56 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e03f      	b.n	8005ce8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d106      	bne.n	8005c82 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7fe fa91 	bl	80041a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2224      	movs	r2, #36	; 0x24
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c98:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f828 	bl	8005cf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695a      	ldr	r2, [r3, #20]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cbe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005d2a:	f023 030c 	bic.w	r3, r3, #12
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6812      	ldr	r2, [r2, #0]
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	430b      	orrs	r3, r1
 8005d36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	699a      	ldr	r2, [r3, #24]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a2c      	ldr	r2, [pc, #176]	; (8005e04 <UART_SetConfig+0x114>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d103      	bne.n	8005d60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d58:	f7ff f966 	bl	8005028 <HAL_RCC_GetPCLK2Freq>
 8005d5c:	60f8      	str	r0, [r7, #12]
 8005d5e:	e002      	b.n	8005d66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d60:	f7ff f94e 	bl	8005000 <HAL_RCC_GetPCLK1Freq>
 8005d64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009a      	lsls	r2, r3, #2
 8005d70:	441a      	add	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7c:	4a22      	ldr	r2, [pc, #136]	; (8005e08 <UART_SetConfig+0x118>)
 8005d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d82:	095b      	lsrs	r3, r3, #5
 8005d84:	0119      	lsls	r1, r3, #4
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	009a      	lsls	r2, r3, #2
 8005d90:	441a      	add	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d9c:	4b1a      	ldr	r3, [pc, #104]	; (8005e08 <UART_SetConfig+0x118>)
 8005d9e:	fba3 0302 	umull	r0, r3, r3, r2
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	2064      	movs	r0, #100	; 0x64
 8005da6:	fb00 f303 	mul.w	r3, r0, r3
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	3332      	adds	r3, #50	; 0x32
 8005db0:	4a15      	ldr	r2, [pc, #84]	; (8005e08 <UART_SetConfig+0x118>)
 8005db2:	fba2 2303 	umull	r2, r3, r2, r3
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dbc:	4419      	add	r1, r3
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009a      	lsls	r2, r3, #2
 8005dc8:	441a      	add	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dd4:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <UART_SetConfig+0x118>)
 8005dd6:	fba3 0302 	umull	r0, r3, r3, r2
 8005dda:	095b      	lsrs	r3, r3, #5
 8005ddc:	2064      	movs	r0, #100	; 0x64
 8005dde:	fb00 f303 	mul.w	r3, r0, r3
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	011b      	lsls	r3, r3, #4
 8005de6:	3332      	adds	r3, #50	; 0x32
 8005de8:	4a07      	ldr	r2, [pc, #28]	; (8005e08 <UART_SetConfig+0x118>)
 8005dea:	fba2 2303 	umull	r2, r3, r2, r3
 8005dee:	095b      	lsrs	r3, r3, #5
 8005df0:	f003 020f 	and.w	r2, r3, #15
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	440a      	add	r2, r1
 8005dfa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005dfc:	bf00      	nop
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40013800 	.word	0x40013800
 8005e08:	51eb851f 	.word	0x51eb851f

08005e0c <__libc_init_array>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	2500      	movs	r5, #0
 8005e10:	4e0c      	ldr	r6, [pc, #48]	; (8005e44 <__libc_init_array+0x38>)
 8005e12:	4c0d      	ldr	r4, [pc, #52]	; (8005e48 <__libc_init_array+0x3c>)
 8005e14:	1ba4      	subs	r4, r4, r6
 8005e16:	10a4      	asrs	r4, r4, #2
 8005e18:	42a5      	cmp	r5, r4
 8005e1a:	d109      	bne.n	8005e30 <__libc_init_array+0x24>
 8005e1c:	f000 f822 	bl	8005e64 <_init>
 8005e20:	2500      	movs	r5, #0
 8005e22:	4e0a      	ldr	r6, [pc, #40]	; (8005e4c <__libc_init_array+0x40>)
 8005e24:	4c0a      	ldr	r4, [pc, #40]	; (8005e50 <__libc_init_array+0x44>)
 8005e26:	1ba4      	subs	r4, r4, r6
 8005e28:	10a4      	asrs	r4, r4, #2
 8005e2a:	42a5      	cmp	r5, r4
 8005e2c:	d105      	bne.n	8005e3a <__libc_init_array+0x2e>
 8005e2e:	bd70      	pop	{r4, r5, r6, pc}
 8005e30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e34:	4798      	blx	r3
 8005e36:	3501      	adds	r5, #1
 8005e38:	e7ee      	b.n	8005e18 <__libc_init_array+0xc>
 8005e3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e3e:	4798      	blx	r3
 8005e40:	3501      	adds	r5, #1
 8005e42:	e7f2      	b.n	8005e2a <__libc_init_array+0x1e>
 8005e44:	08006158 	.word	0x08006158
 8005e48:	08006158 	.word	0x08006158
 8005e4c:	08006158 	.word	0x08006158
 8005e50:	0800615c 	.word	0x0800615c

08005e54 <memset>:
 8005e54:	4603      	mov	r3, r0
 8005e56:	4402      	add	r2, r0
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d100      	bne.n	8005e5e <memset+0xa>
 8005e5c:	4770      	bx	lr
 8005e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e62:	e7f9      	b.n	8005e58 <memset+0x4>

08005e64 <_init>:
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	bf00      	nop
 8005e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6a:	bc08      	pop	{r3}
 8005e6c:	469e      	mov	lr, r3
 8005e6e:	4770      	bx	lr

08005e70 <_fini>:
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	bf00      	nop
 8005e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e76:	bc08      	pop	{r3}
 8005e78:	469e      	mov	lr, r3
 8005e7a:	4770      	bx	lr
